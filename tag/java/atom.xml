<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://alazymechnaic.github.io</id>
    <title>alazymachine • Posts by &#34;java&#34; tag</title>
    <link href="https://alazymechnaic.github.io" />
    <updated>2024-03-09T07:24:28.000Z</updated>
    <category term="paper" />
    <category term="fuzz" />
    <category term="arm" />
    <category term="Linux" />
    <category term="C" />
    <category term="go" />
    <category term="Paper" />
    <category term="bypass" />
    <category term="clash" />
    <category term="Hook" />
    <category term="go, RE" />
    <category term="kernel pwn" />
    <category term="binary" />
    <category term="writing" />
    <category term="HEAP PWN CTF" />
    <category term="Android" />
    <category term="dataflow" />
    <category term="pwn" />
    <category term="java" />
    <category term="web" />
    <category term="exploit" />
    <category term="network" />
    <category term="代码分析" />
    <category term="二进制安全" />
    <category term="渗透" />
    <category term="程序分析" />
    <category term="stack overflow" />
    <category term="算法" />
    <entry>
        <id>https://alazymechnaic.github.io/2024/03/09/jvm-zi-jie-ma-ru-men/</id>
        <title>jvm字节码入门</title>
        <link rel="alternate" href="https://alazymechnaic.github.io/2024/03/09/jvm-zi-jie-ma-ru-men/"/>
        <content type="html">&lt;h2 id=&#34;JAVA-基础&#34;&gt;&lt;a href=&#34;#JAVA-基础&#34; class=&#34;headerlink&#34; title=&#34;JAVA 基础&#34;&gt;&lt;/a&gt;JAVA 基础&lt;/h2&gt;&lt;h3 id=&#34;java-class-与-jar的区别&#34;&gt;&lt;a href=&#34;#java-class-与-jar的区别&#34; class=&#34;headerlink&#34; title=&#34;.java .class 与 .jar的区别&#34;&gt;&lt;/a&gt;.java .class 与 .jar的区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;.java是JAVA代码的源代码文件，就和C语言中的.c一样。&lt;/li&gt;
&lt;li&gt;.class则是字节码文件，是java源码通过javac这个工具生成的中间语言，这个和机器架构之类的没有任何关系。而java虚拟机的任务就是去运行这个.class文件中的内容。&lt;/li&gt;
&lt;li&gt;JAR文件则是将多个Class文件打包压缩，并添加META-INF/MANIFEST.MF 文件，构成的一个压缩包&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;JVM虚拟机编译原理&#34;&gt;&lt;a href=&#34;#JVM虚拟机编译原理&#34; class=&#34;headerlink&#34; title=&#34;JVM虚拟机编译原理&#34;&gt;&lt;/a&gt;JVM虚拟机编译原理&lt;/h2&gt;&lt;h3 id=&#34;JVM虚拟机的设计特性&#34;&gt;&lt;a href=&#34;#JVM虚拟机的设计特性&#34; class=&#34;headerlink&#34; title=&#34;JVM虚拟机的设计特性&#34;&gt;&lt;/a&gt;JVM虚拟机的设计特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;java是面向对象的语言，类在其中十分重要。类的唯一性不仅仅由路径和类名决定，还需要考虑类的加载。&lt;/li&gt;
&lt;li&gt;JVM来负责java程序运行时的内存管理，垃圾回收等机制，通过调整jvm的参数可以优化java应用的启动速度和运行效率。&lt;/li&gt;
&lt;li&gt;源代码-&amp;gt;字节码-&amp;gt;机器码，这两次转换分别依靠javac和JVM虚拟机进行转译。&lt;/li&gt;
&lt;li&gt;JVM虚拟机接收的字节码不一定非要来自java程序，还可以来自JRuby或者Groovy等程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;JVM架构&#34;&gt;&lt;a href=&#34;#JVM架构&#34; class=&#34;headerlink&#34; title=&#34;JVM架构&#34;&gt;&lt;/a&gt;JVM架构&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403091958023.png&#34; alt=&#34;image-20240309195820483&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;图片转载自：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/655490660&#34;&gt;https://zhuanlan.zhihu.com/p/655490660&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;类加载器子系统&#34;&gt;&lt;a href=&#34;#类加载器子系统&#34; class=&#34;headerlink&#34; title=&#34;类加载器子系统&#34;&gt;&lt;/a&gt;类加载器子系统&lt;/h4&gt;&lt;p&gt;可以看到这个部分是会直接对class文件进行处理的，处理的过程中会加载class中的描述类数据，并进行校验，解析和初始化。Java语言只有在运行时才会完成&lt;strong&gt;类型的加载、链接和初始化&lt;/strong&gt;（这里注意，是类型的加载也在运行时完成，也就是在这之前类还是不被确定的，那么是否存在攻击面？），java可以在运行时动态地指定使用的类。这个类可以是Java预制的，甚至是可以从网络上来的二进制字节流（这就是java反序列化漏洞的来源机制？）&lt;/p&gt;
&lt;h4 id=&#34;运行时数据区&#34;&gt;&lt;a href=&#34;#运行时数据区&#34; class=&#34;headerlink&#34; title=&#34;运行时数据区&#34;&gt;&lt;/a&gt;运行时数据区&lt;/h4&gt;&lt;p&gt;可以看到在运行时，JVM划定了堆栈区域，线程间的共享方式与x86指令的机器类似。但是需要注意，方法区是共享的。&lt;/p&gt;
&lt;h4 id=&#34;执行引擎&#34;&gt;&lt;a href=&#34;#执行引擎&#34; class=&#34;headerlink&#34; title=&#34;执行引擎&#34;&gt;&lt;/a&gt;执行引擎&lt;/h4&gt;&lt;p&gt;执行引擎用于对中间语言的字节码进行翻译，翻译成符合当前程序的底层机器码，同时对不受支持的指令做转换。这个部分是对java字节码直接解析的部分。JIT的工作也是将字节码转换为本地CPU的机器码，而不是执行该字节码的语义。&lt;/p&gt;
&lt;h2 id=&#34;JAVA字节码&#34;&gt;&lt;a href=&#34;#JAVA字节码&#34; class=&#34;headerlink&#34; title=&#34;JAVA字节码&#34;&gt;&lt;/a&gt;JAVA字节码&lt;/h2&gt;&lt;p&gt;编译java源代码并获取反编译后的字节码：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;javac .\test.java&lt;br&gt;javap -v -p .\test.class&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;终于到这一部分了。java有200多个操作码，主要由&lt;strong&gt;类型前缀&lt;/strong&gt;和&lt;strong&gt;操作名称&lt;/strong&gt;两个部分组成。主要包含下面几种指令类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;堆栈操作指令&lt;/li&gt;
&lt;li&gt;控制流操作指令&lt;/li&gt;
&lt;li&gt;对象操作指令&lt;/li&gt;
&lt;li&gt;算数运算指令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要明白的一点是，一个class文件中只可能包含一个类，所以编译出的java字节码只有一个class可以写。同时JVM的指令集是基于栈实现的，所以运算的本质是从栈中取内容进行操作。以下面的代码为例讲解：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;StackStruTest&lt;/span&gt; { &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; { &lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; i + j; &lt;br&gt;  } &lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;产生的字节码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;br&gt;&lt;br&gt;Classfile /java/javaDemoTest/StackStruTest.class：指明类文件的路径和名称。&lt;br&gt;&lt;br&gt;Last modified Sep &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2023&lt;/span&gt;; size &lt;span class=&#34;hljs-number&#34;&gt;291&lt;/span&gt; bytes：表示类文件最后修改的时间和文件大小。&lt;br&gt;&lt;br&gt;MD5 checksum 5df16de26bb720cea2f763c042f9dc30：给出类文件内容的MD5校验和。&lt;br&gt;&lt;br&gt;Compiled from &lt;span class=&#34;hljs-string&#34;&gt;&#34;StackStruTest.java&#34;&lt;/span&gt;：表示该类文件是从名为&lt;span class=&#34;hljs-string&#34;&gt;&#34;StackStruTest.java&#34;&lt;/span&gt;的源文件编译而来。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;StackStruTest&lt;/span&gt;：定义一个公共的类名为StackStruTest。&lt;br&gt;&lt;br&gt;minor version: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;：表示类文件的次版本号。&lt;br&gt;&lt;br&gt;major version: &lt;span class=&#34;hljs-number&#34;&gt;52&lt;/span&gt;：表示类文件的主版本号。&lt;br&gt;&lt;br&gt;flags: ACC_PUBLIC, ACC_SUPER：表示类的访问修饰符为&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;，并且使用了ACC_SUPER标志。&lt;br&gt;&lt;br&gt;Constant pool:：常量池开始。&lt;br&gt;&lt;br&gt;#&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; = Methodref          #&lt;span class=&#34;hljs-number&#34;&gt;3.&lt;/span&gt;#&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;         &lt;span class=&#34;hljs-comment&#34;&gt;// java/lang/Object.&#34;&amp;lt;init&amp;gt;&#34;:()V：常量池中的一项，表示对java/lang/Object类的构造方法&amp;lt;init&amp;gt;的引用。&lt;/span&gt;&lt;br&gt;&lt;br&gt;#&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; = Class              #&lt;span class=&#34;hljs-number&#34;&gt;13&lt;/span&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;// StackStruTest：常量池中的一项，表示对StackStruTest类的引用。&lt;/span&gt;&lt;br&gt;&lt;br&gt;#&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; = Class              #&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;// java/lang/Object：常量池中的一项，表示对java/lang/Object类的引用。&lt;/span&gt;&lt;br&gt;&lt;br&gt;#&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; = Utf8               &amp;lt;init&amp;gt;：常量池中的一项，表示字符串&lt;span class=&#34;hljs-string&#34;&gt;&#34;&amp;lt;init&amp;gt;&#34;&lt;/span&gt;。&lt;br&gt;&lt;br&gt;#&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt; = Utf8               ()V：常量池中的一项，表示字符串&lt;span class=&#34;hljs-string&#34;&gt;&#34;()V&#34;&lt;/span&gt;，表示无参数无返回值的方法描述符。&lt;br&gt;&lt;br&gt;#&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt; = Utf8               Code：常量池中的一项，表示字符串&lt;span class=&#34;hljs-string&#34;&gt;&#34;Code&#34;&lt;/span&gt;，表示接下来是字节码指令。&lt;br&gt;&lt;br&gt;#&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt; = Utf8               LineNumberTable：常量池中的一项，表示字符串&lt;span class=&#34;hljs-string&#34;&gt;&#34;LineNumberTable&#34;&lt;/span&gt;，表示接下来是行号表。&lt;br&gt;&lt;br&gt;#&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt; = Utf8               main：常量池中的一项，表示字符串&lt;span class=&#34;hljs-string&#34;&gt;&#34;main&#34;&lt;/span&gt;，表示方法名。&lt;br&gt;&lt;br&gt;#&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt; = Utf8               ([Ljava/lang/String;)V：常量池中的一项，表示字符串&lt;span class=&#34;hljs-string&#34;&gt;&#34;([Ljava/lang/String;)V&#34;&lt;/span&gt;，表示入口方法的描述符。&lt;br&gt;&lt;br&gt;#&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; = Utf8               SourceFile：常量池中的一项，表示字符串&lt;span class=&#34;hljs-string&#34;&gt;&#34;SourceFile&#34;&lt;/span&gt;，表示接下来是源文件信息。&lt;br&gt;&lt;br&gt;#&lt;span class=&#34;hljs-number&#34;&gt;11&lt;/span&gt; = Utf8               StackStruTest.java：常量池中的一项，表示字符串&lt;span class=&#34;hljs-string&#34;&gt;&#34;StackStruTest.java&#34;&lt;/span&gt;，表示源文件名。&lt;br&gt;&lt;br&gt;#&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt; = NameAndType        #&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;:#&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;          &lt;span class=&#34;hljs-comment&#34;&gt;// &#34;&amp;lt;init&amp;gt;&#34;:()V：常量池中的一项，表示NameAndType类型的项，表示构造方法的名称和描述符。&lt;/span&gt;&lt;br&gt;&lt;br&gt;#&lt;span class=&#34;hljs-number&#34;&gt;13&lt;/span&gt; = Utf8               StackStruTest：常量池中的一项，表示字符串&lt;span class=&#34;hljs-string&#34;&gt;&#34;StackStruTest&#34;&lt;/span&gt;。&lt;br&gt;&lt;br&gt;#&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt; = Utf8               java/lang/Object：常量池中的一项，表示字符串&lt;span class=&#34;hljs-string&#34;&gt;&#34;java/lang/Object&#34;&lt;/span&gt;。&lt;br&gt;&lt;br&gt;{：类的开始。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;StackStruTest&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;：定义一个公共的无参构造方法。&lt;br&gt;&lt;br&gt;descriptor: ()V：表示方法的描述符，无参数无返回值。&lt;br&gt;&lt;br&gt;flags: ACC_PUBLIC：表示方法的访问修饰符为&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;。&lt;br&gt;&lt;br&gt;Code:：方法的字节码指令开始。&lt;br&gt;&lt;br&gt;stack=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, locals=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, args_size=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;：表示方法的最大堆栈深度为&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;，局部变量表大小为&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;，参数数量为&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;: aload_0：将局部变量表索引&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;的引用类型值（&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;）加载到操作数栈。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;: invokespecial #&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;：调用常量池中索引为&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;的方法（java/lang/Object类的构造方法）。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;: &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;：返回。&lt;br&gt;&lt;br&gt;LineNumberTable:：行号表开始。&lt;br&gt;&lt;br&gt;line &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;：表示第&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;行对应的字节码指令索引为&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(java.lang.String[])&lt;/span&gt;;：定义一个公共的静态方法main，接受一个String数组作为参数。&lt;br&gt;&lt;br&gt;descriptor: ([Ljava/lang/String;)V：表示方法的描述符，接受一个String数组（前面那一长串用来描述这个类），V表示无返回值。&lt;br&gt;&lt;br&gt;flags: ACC_PUBLIC, ACC_STATIC：表示方法的访问修饰符为&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;和&lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt;。&lt;br&gt;&lt;br&gt;Code:：方法的字节码指令开始。&lt;br&gt;&lt;br&gt;stack=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, locals=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, args_size=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;：表示方法的最大堆栈深度为&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;，局部变量表大小为&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;，参数数量为&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;: iconst_2：将&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;类型常量&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;压入操作数栈。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;: istore_1：将操作数栈顶的&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;类型值存储到局部变量表的索引&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;位置。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;: bipush        &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;：将&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;类型常量&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;压入操作数栈。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;: istore_2：将操作数栈顶的&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;类型值存储到局部变量表的索引&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;位置。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;: iload_1：将局部变量表索引&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;位置的&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;类型值压入操作数栈。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;: iload_2：将局部变量表索引&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;位置的&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;类型值压入操作数栈。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;: iadd：从操作数栈中弹出两个&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;类型值，执行加法操作，将结果压入操作数栈。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;: istore_3：将操作数栈顶的&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;类型值存储到局部变量表的索引&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;位置。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;: &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;：返回。&lt;br&gt;&lt;br&gt;LineNumberTable:：行号表开始。&lt;br&gt;&lt;br&gt;line &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;：表示第&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;行对应的字节码指令索引为&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;。&lt;br&gt;&lt;br&gt;line &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;：表示第&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;行对应的字节码指令索引为&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;。&lt;br&gt;&lt;br&gt;line &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;：表示第&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;行对应的字节码指令索引为&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;。&lt;br&gt;&lt;br&gt;line &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;：表示第&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;行对应的字节码指令索引为&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;。&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;在反编译后的信息中，最上面是当前这个文件的信息，包括编译来源等操作。&lt;/li&gt;
&lt;li&gt;后面的常量池，可以理解为C语言中的Define，对符号的引用情况做个记录。其中#num其实就是在常量池中定义的临时变量。java代码在运行的时候通常会将常量直接嵌入到字节码中，而对于符号的引用则会转化为对应的常量池索引。&lt;/li&gt;
&lt;li&gt;最后一行用于记录第几行的汇编，在字节码中占据第几位。（这是不是就类似汇编语言中的指令地址？只不过不能按照偏移算了，于是要手工记一下。（gpt说是的 ：）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;JAVA指令集分类&#34;&gt;&lt;a href=&#34;#JAVA指令集分类&#34; class=&#34;headerlink&#34; title=&#34;JAVA指令集分类&#34;&gt;&lt;/a&gt;JAVA指令集分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[x]const_[n]:&lt;/strong&gt; 指令，这个指令是加载一个常量指令并且将其压入到栈中，前面的x表示操作数的类型i表示int，f表示float，后面的n表示常量值。但是这里注意，int类型下，n常量最大只能取到5，超过这个数就只能使用[x]ipush的方式压栈&lt;/li&gt;
&lt;li&gt;bipush / sipush [n]： 表示将八位(b),十六位(s)带符号整数n压入到栈中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ldc:&lt;/strong&gt;  将常量池中的项压入到栈中。（我猜后面应该是跟编号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[x]load_[n]：&lt;/strong&gt; 同样是压栈指令，但是使用从局部变量表类型为x编号为n的变量取出压栈。这里的&lt;strong&gt;局部变量表&lt;/strong&gt;其实就是类似X86架构中的临时栈，其中存放了外部传来的参数和当前方法的局部变量，当前过程退出之后，就会回收该部分。&lt;strong&gt;这里注意一点，如果是static类，传参用0号局部变量开始表示，如果不是static则存在this指针，则从1号变量开始&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[x]store_[n]:&lt;/strong&gt; 从栈顶取出内容并将其存入到局部变量n中保存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运算指令&lt;/strong&gt;：运算指令将当前栈顶的两个元素先出栈，然后将其相加后再压回栈顶。idiv将第二个整数除以栈顶的整数，将结果放在栈顶。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;比较指令&lt;/strong&gt;： icmp指令的执行是比较第二个元素和栈顶元素的之间的关系，并且将结果放到栈里面。同时，&lt;strong&gt;被比较的两个数会被弹出，这点和X86架构不同&lt;/strong&gt;。其实就是第二个数减去第一个数，减为负数就存-1，相等存0，否则存1，就这样简单。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跳转指令&lt;/strong&gt;：ifeq如果栈顶的int型数字为0则跳转。当栈顶的 int 值等于零时，JVM会将程序计数器（Program Counter）设置为当前指令的地址加上指令中给定的偏移量。ifeq执行完，无论结果如何，都会将栈顶的内容弹出。ifgt（大于则0则跳转）。无条件跳转就直接goto。&lt;strong&gt;跳转位置使用相对于当前跳转指令的偏移进行计算的&lt;/strong&gt;。tableswitch使用索引访问跳转表并进行跳转。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;比较跳转&lt;/strong&gt;：if_icmplt比较栈顶的两个元素，同样也是第二个元素比较栈顶的元素的大小关系。运算结束后同样会出栈。if_acmpnc还能比较引用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[x]return&lt;/strong&gt;:返回指令，前面的x表示了返回值的类型，如果x为空，直接return则表示返回值是void。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的数似乎太温和了，不好表示所有的操作。稍稍修改地复杂些：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;test&lt;/span&gt; { &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; { &lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;996&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;700&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; i*&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; + j*&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;; &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; k;&lt;br&gt;  } &lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;反编译出字节码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;test&lt;/span&gt;&lt;br&gt;  minor version: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;  major version: &lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;&lt;br&gt;  flags: (&lt;span class=&#34;hljs-number&#34;&gt;0x0021&lt;/span&gt;) ACC_PUBLIC, ACC_SUPER&lt;br&gt;  this_class: #&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;                          &lt;span class=&#34;hljs-comment&#34;&gt;// test&lt;/span&gt;&lt;br&gt;  super_class: #&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;                         &lt;span class=&#34;hljs-comment&#34;&gt;// java/lang/Object&lt;/span&gt;&lt;br&gt;  interfaces: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, fields: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, methods: &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, attributes: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;Constant pool:&lt;br&gt;   #&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; = Methodref          #&lt;span class=&#34;hljs-number&#34;&gt;2.&lt;/span&gt;#&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;          &lt;span class=&#34;hljs-comment&#34;&gt;// java/lang/Object.&#34;&amp;lt;init&amp;gt;&#34;:()V&lt;/span&gt;&lt;br&gt;   #&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; = Class              #&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;             &lt;span class=&#34;hljs-comment&#34;&gt;// java/lang/Object&lt;/span&gt;&lt;br&gt;   #&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; = NameAndType        #&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;:#&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;          &lt;span class=&#34;hljs-comment&#34;&gt;// &#34;&amp;lt;init&amp;gt;&#34;:()V&lt;/span&gt;&lt;br&gt;   #&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; = Utf8               java/lang/Object&lt;br&gt;   #&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt; = Utf8               &amp;lt;init&amp;gt;&lt;br&gt;   #&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt; = Utf8               ()V&lt;br&gt;   #&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt; = Class              #&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;             &lt;span class=&#34;hljs-comment&#34;&gt;// test&lt;/span&gt;&lt;br&gt;   #&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt; = Utf8               test&lt;br&gt;   #&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt; = Utf8               Code&lt;br&gt;  #&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; = Utf8               LineNumberTable&lt;br&gt;  #&lt;span class=&#34;hljs-number&#34;&gt;11&lt;/span&gt; = Utf8               main&lt;br&gt;  #&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt; = Utf8               ([Ljava/lang/String;)I&lt;br&gt;  #&lt;span class=&#34;hljs-number&#34;&gt;13&lt;/span&gt; = Utf8               SourceFile&lt;br&gt;  #&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt; = Utf8               test.java&lt;br&gt;{&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;    descriptor: ()V&lt;br&gt;    flags: (&lt;span class=&#34;hljs-number&#34;&gt;0x0001&lt;/span&gt;) ACC_PUBLIC&lt;br&gt;    Code:&lt;br&gt;      stack=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, locals=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, args_size=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;: aload_0&lt;br&gt;         &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;: invokespecial #&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;                  &lt;span class=&#34;hljs-comment&#34;&gt;// Method java/lang/Object.&#34;&amp;lt;init&amp;gt;&#34;:()V&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;: &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;&lt;br&gt;      LineNumberTable:&lt;br&gt;        line &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(java.lang.String[])&lt;/span&gt;;&lt;br&gt;    descriptor: ([Ljava/lang/String;)I&lt;br&gt;    flags: (&lt;span class=&#34;hljs-number&#34;&gt;0x0009&lt;/span&gt;) ACC_PUBLIC, ACC_STATIC&lt;br&gt;    Code:&lt;br&gt;      stack=&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, locals=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, args_size=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;: sipush        &lt;span class=&#34;hljs-number&#34;&gt;996&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// 将常量996压入到本地栈中，&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;: istore_1  &lt;span class=&#34;hljs-comment&#34;&gt;// 将栈中的内容存到临时变量1中&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;: sipush        &lt;span class=&#34;hljs-number&#34;&gt;700&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// 将常量700压入到栈中&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;: istore_2  &lt;span class=&#34;hljs-comment&#34;&gt;// 存到临时变量&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;: iload_1&lt;br&gt;         &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;: iconst_3&lt;br&gt;        &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;: imul&lt;br&gt;        &lt;span class=&#34;hljs-number&#34;&gt;11&lt;/span&gt;: iload_2&lt;br&gt;        &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;: bipush        &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;: imul&lt;br&gt;        &lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt;: iadd&lt;br&gt;        &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;: istore_3&lt;br&gt;        &lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;: iload_3&lt;br&gt;        &lt;span class=&#34;hljs-number&#34;&gt;18&lt;/span&gt;: ireturn&lt;br&gt;      LineNumberTable:&lt;br&gt;        line &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;        line &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;        line &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;&lt;br&gt;        line &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对象操作指令&lt;/strong&gt;：JAVA是面向对象的语言，但是与C的不同，java指令集直接定义了这些操作&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;new&lt;/strong&gt;：创建一个对象，并且将创建出来的该对象的索引压入栈中。在底层会为该对象创建一个heap区域的内存块。在分配内存后，JVM 会调用初始化函数，根据对象的类信息初始化对象头，包括存储对象的元数据、锁信息等。需要注意的是，对象的分配和初始化过过程是原子过程，以便于在多线程环境下保证对象的正确创建。new指令只能创建对象，不能创建数组。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getstatic&lt;/strong&gt;: getstatic只能用于获取静态字段的值，不能用于获取实例的值。&lt;code&gt;getstatic&lt;/code&gt; 指令需要指定要获取的静态字段的符号引用，包括字段所在的类、字段的名称和字段的描述符。JVM 首先根据符号引用解析静态字段的实际引用，确定要获取的字段的具体位置。JVM 在执行 &lt;code&gt;getstatic&lt;/code&gt; 之前会检查当前执行线程对静态字段的访问权限，确保它具有足够的权限来读取该字段。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getfield&lt;/strong&gt;：从对象中获取字段。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;checkcast&lt;/strong&gt;：将对象转换为所给类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;instanceof&lt;/strong&gt;：判断给定对象是否是给定类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;提问&#34;&gt;&lt;a href=&#34;#提问&#34; class=&#34;headerlink&#34; title=&#34;提问&#34;&gt;&lt;/a&gt;提问&lt;/h2&gt;&lt;h3 id=&#34;JAVA插装怎么插？&#34;&gt;&lt;a href=&#34;#JAVA插装怎么插？&#34; class=&#34;headerlink&#34; title=&#34;JAVA插装怎么插？&#34;&gt;&lt;/a&gt;JAVA插装怎么插？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用ASM工具直接对java的class字段进行操作即可。 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/496213736&#34;&gt;https://zhuanlan.zhihu.com/p/496213736&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;JIT和JVM是啥关系？&#34;&gt;&lt;a href=&#34;#JIT和JVM是啥关系？&#34; class=&#34;headerlink&#34; title=&#34;JIT和JVM是啥关系？&#34;&gt;&lt;/a&gt;JIT和JVM是啥关系？&lt;/h3&gt;&lt;p&gt;上面的图已经解释了，jvm中包含jit，jvm在运行的过程中需要把java的字节码丢到jit中去进行处理。&lt;/p&gt;
&lt;h3 id=&#34;安卓中的-dex文件和一般java中的jar文件有什么不同？&#34;&gt;&lt;a href=&#34;#安卓中的-dex文件和一般java中的jar文件有什么不同？&#34; class=&#34;headerlink&#34; title=&#34;安卓中的.dex文件和一般java中的jar文件有什么不同？&#34;&gt;&lt;/a&gt;安卓中的.dex文件和一般java中的jar文件有什么不同？&lt;/h3&gt;&lt;p&gt;Java虚拟机(Java Virtual Machine, JVM)和Dalvik虚拟机(Dalvik Virtual Machine, DVM)是两种不同的虚拟机，它们在设计、编译后的文件格式、运行架构等方面存在显著差异：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译后的文件不同： JVM运行的是&lt;code&gt;.class&lt;/code&gt;字节码文件。 DVM运行的是其专有的&lt;code&gt;.dex&lt;/code&gt;文件。Java程序中的Java类会被编译成&lt;code&gt;.class&lt;/code&gt;字节码文件，然后打包到&lt;code&gt;.jar&lt;/code&gt;文件中。对于Android平台，这些&lt;code&gt;.class&lt;/code&gt;文件会被转换成&lt;code&gt;.dex&lt;/code&gt;文件，以适应Dalvik虚拟机。此外，&lt;code&gt;.odex&lt;/code&gt;文件是&lt;code&gt;.dex&lt;/code&gt;文件的优化版本，用于提高运行性能。&lt;/li&gt;
&lt;li&gt;基于的架构不同： JVM是基于栈的架构，栈是一个连续的内存空间，存取速度相对较慢。 DVM是基于寄存器的架构，寄存器是CPU上的缓存，存取速度比从内存中存取的速度快很多，更适合移动设备的使用&lt;/li&gt;
&lt;li&gt;内存管理不同：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;DVM为每个应用程序默认分配最多16MB内存。如果应用程序加载的资源超过这个限制，可能会导致OutOfMemoryError异常。JVM的内存管理方式与DVM不同，但通常更加灵活和高效。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;应用范围和兼容性：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;JVM可以运行多种编程语言（如Java、Kotlin等），不限于Java语言。&lt;/li&gt;
&lt;li&gt;DVM是Google公司为Android平台设计的虚拟机，专门针对ARM架构的处理器优化。虽然Dalvik虚拟机不是按照Java虚拟机的规范来实现的，且两者不兼容，但它们都提供了进程隔离和线程管理的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;JVM虚拟机和DALVIK虚拟机有何不同？&#34;&gt;&lt;a href=&#34;#JVM虚拟机和DALVIK虚拟机有何不同？&#34; class=&#34;headerlink&#34; title=&#34;JVM虚拟机和DALVIK虚拟机有何不同？&#34;&gt;&lt;/a&gt;JVM虚拟机和DALVIK虚拟机有何不同？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JVM是读取.class文件进行运行，一个class文件中只包含一个类，而Dalvik虚拟机的dex的文件包含有多个类（因为他是多个class文件打包成的），&lt;/li&gt;
&lt;li&gt;alvik的指令集基于寄存器，而JVM的指令集基于堆栈。不同之处在于，基于寄存器的指令在寄存器中寻址，速度更快但指令长度长；基于堆栈的指令集更短，但占用CPU时间较多。（所以说二者的指令集是不一样的）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Smali字节码和JVM字节码有什么不一样？&#34;&gt;&lt;a href=&#34;#Smali字节码和JVM字节码有什么不一样？&#34; class=&#34;headerlink&#34; title=&#34;Smali字节码和JVM字节码有什么不一样？&#34;&gt;&lt;/a&gt;Smali字节码和JVM字节码有什么不一样？&lt;/h3&gt;&lt;h3 id=&#34;进程隔离和线程管理的概念是什么？&#34;&gt;&lt;a href=&#34;#进程隔离和线程管理的概念是什么？&#34; class=&#34;headerlink&#34; title=&#34;进程隔离和线程管理的概念是什么？&#34;&gt;&lt;/a&gt;进程隔离和线程管理的概念是什么？&lt;/h3&gt;&lt;h2 id=&#34;Reference&#34;&gt;&lt;a href=&#34;#Reference&#34; class=&#34;headerlink&#34; title=&#34;Reference&#34;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_43896318/article/details/104631106&#34;&gt;https://blog.csdn.net/weixin_43896318/article/details/104631106&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/Megetood/article/details/109114038&#34;&gt;https://blog.csdn.net/Megetood/article/details/109114038&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/655490660&#34;&gt;https://zhuanlan.zhihu.com/p/655490660&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="java" />
        <updated>2024-03-09T07:24:28.000Z</updated>
    </entry>
    <entry>
        <id>https://alazymechnaic.github.io/2024/02/29/java-an-quan-shen-ji/</id>
        <title>JAVA安全审计</title>
        <link rel="alternate" href="https://alazymechnaic.github.io/2024/02/29/java-an-quan-shen-ji/"/>
        <content type="html">&lt;h2 id=&#34;环境配置&#34;&gt;&lt;a href=&#34;#环境配置&#34; class=&#34;headerlink&#34; title=&#34;环境配置&#34;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;&lt;h3 id=&#34;IDEA&#34;&gt;&lt;a href=&#34;#IDEA&#34; class=&#34;headerlink&#34; title=&#34;IDEA&#34;&gt;&lt;/a&gt;IDEA&lt;/h3&gt;&lt;h3 id=&#34;Maven&#34;&gt;&lt;a href=&#34;#Maven&#34; class=&#34;headerlink&#34; title=&#34;Maven&#34;&gt;&lt;/a&gt;Maven&lt;/h3&gt;&lt;h3 id=&#34;JavaWeb&#34;&gt;&lt;a href=&#34;#JavaWeb&#34; class=&#34;headerlink&#34; title=&#34;JavaWeb&#34;&gt;&lt;/a&gt;JavaWeb&lt;/h3&gt;&lt;h4 id=&#34;Serverlet基础&#34;&gt;&lt;a href=&#34;#Serverlet基础&#34; class=&#34;headerlink&#34; title=&#34;Serverlet基础&#34;&gt;&lt;/a&gt;Serverlet基础&lt;/h4&gt;&lt;h3 id=&#34;反射机制&#34;&gt;&lt;a href=&#34;#反射机制&#34; class=&#34;headerlink&#34; title=&#34;反射机制&#34;&gt;&lt;/a&gt;反射机制&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;反射修改字段&lt;/li&gt;
&lt;li&gt;反射修改final的问题&lt;/li&gt;
&lt;li&gt;反射调试方法&lt;/li&gt;
&lt;li&gt;高版本绕过反射限制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ASM-x2F-javassist&#34;&gt;&lt;a href=&#34;#ASM-x2F-javassist&#34; class=&#34;headerlink&#34; title=&#34;ASM/javassist&#34;&gt;&lt;/a&gt;ASM/javassist&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;java字节码（用到再学）&lt;/li&gt;
&lt;li&gt;如何使用ASM修改字节码&lt;/li&gt;
&lt;li&gt;如何使用javaassist生成字节码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;JNDI攻击&#34;&gt;&lt;a href=&#34;#JNDI攻击&#34; class=&#34;headerlink&#34; title=&#34;JNDI攻击&#34;&gt;&lt;/a&gt;JNDI攻击&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;log4j2&lt;/li&gt;
&lt;li&gt;8u191下如何攻击&lt;/li&gt;
&lt;li&gt;8u191以上如何打（反序列化/本地工厂）&lt;/li&gt;
&lt;li&gt;漏洞如何审计：lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;RMI攻击&#34;&gt;&lt;a href=&#34;#RMI攻击&#34; class=&#34;headerlink&#34; title=&#34;RMI攻击&#34;&gt;&lt;/a&gt;RMI攻击&lt;/h3&gt;&lt;h3 id=&#34;Java-Agent&#34;&gt;&lt;a href=&#34;#Java-Agent&#34; class=&#34;headerlink&#34; title=&#34;Java Agent&#34;&gt;&lt;/a&gt;Java Agent&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;启动前与运行中Agent，如何attach java agent&lt;/li&gt;
&lt;li&gt;RASP的原理，简单实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;JMX-x2F-JDWP&#34;&gt;&lt;a href=&#34;#JMX-x2F-JDWP&#34; class=&#34;headerlink&#34; title=&#34;JMX/JDWP&#34;&gt;&lt;/a&gt;JMX/JDWP&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个监控，一个调试&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;反序列化基础&#34;&gt;&lt;a href=&#34;#反序列化基础&#34; class=&#34;headerlink&#34; title=&#34;反序列化基础&#34;&gt;&lt;/a&gt;反序列化基础&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;反序列化链：URLDNS/CC/CB/7u21/8u20分析&lt;/li&gt;
&lt;li&gt;尝试阅读并魔改ysoserial&lt;/li&gt;
&lt;li&gt;JEP 290是什么&lt;/li&gt;
&lt;li&gt;JEP 290鸡肋绕过&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;FastJson反序列化&#34;&gt;&lt;a href=&#34;#FastJson反序列化&#34; class=&#34;headerlink&#34; title=&#34;FastJson反序列化&#34;&gt;&lt;/a&gt;FastJson反序列化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.2.47以前的分析和绕过&lt;/li&gt;
&lt;li&gt;1.2.47 到 1.2.68的分析和绕过&lt;/li&gt;
&lt;li&gt;1.2.80的分析&lt;/li&gt;
&lt;li&gt;出网与不出网的利用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;weblogic&#34;&gt;&lt;a href=&#34;#weblogic&#34; class=&#34;headerlink&#34; title=&#34;weblogic&#34;&gt;&lt;/a&gt;weblogic&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;反序列化漏洞&lt;/li&gt;
&lt;li&gt;二次反序列化&lt;/li&gt;
&lt;li&gt;14882绕过&lt;/li&gt;
&lt;li&gt;XML Decoder绕过&lt;/li&gt;
&lt;li&gt;IIOP/T3&lt;/li&gt;
&lt;li&gt;文件上传&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;XStream-x2F-jackson&#34;&gt;&lt;a href=&#34;#XStream-x2F-jackson&#34; class=&#34;headerlink&#34; title=&#34;XStream/jackson&#34;&gt;&lt;/a&gt;XStream/jackson&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;历史上有很多的Gadget，如何去找新的Gadget&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Hessian&#34;&gt;&lt;a href=&#34;#Hessian&#34; class=&#34;headerlink&#34; title=&#34;Hessian&#34;&gt;&lt;/a&gt;Hessian&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Apache dubbo历史上的漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;SnakeYAML&#34;&gt;&lt;a href=&#34;#SnakeYAML&#34; class=&#34;headerlink&#34; title=&#34;SnakeYAML&#34;&gt;&lt;/a&gt;SnakeYAML&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如何利用，如何修复，如何审计&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shiro（重点）&#34;&gt;&lt;a href=&#34;#shiro（重点）&#34; class=&#34;headerlink&#34; title=&#34;shiro（重点）&#34;&gt;&lt;/a&gt;shiro（重点）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;经典的RCE&lt;/li&gt;
&lt;li&gt;shiro 721 Padding Oracle&lt;/li&gt;
&lt;li&gt;如何检测（SimplePrincipalCollection）&lt;/li&gt;
&lt;li&gt;如何自己写利用工具&lt;/li&gt;
&lt;li&gt;如何通过Shiro注入内存木马&lt;/li&gt;
&lt;li&gt;修改KEY&lt;/li&gt;
&lt;li&gt;请求头过大的限制方法&lt;/li&gt;
&lt;li&gt;请求头长度严格限制的情况下如何绕过&lt;/li&gt;
&lt;li&gt;Nginx反向代理和负载均衡下的问题解决&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;structs2&#34;&gt;&lt;a href=&#34;#structs2&#34; class=&#34;headerlink&#34; title=&#34;structs2&#34;&gt;&lt;/a&gt;structs2&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ognl漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Spring&#34;&gt;&lt;a href=&#34;#Spring&#34; class=&#34;headerlink&#34; title=&#34;Spring&#34;&gt;&lt;/a&gt;Spring&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Spring RCE分析&lt;/li&gt;
&lt;li&gt;Spring EL相关漏洞&lt;/li&gt;
&lt;li&gt;Springboot&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Log4j2&#34;&gt;&lt;a href=&#34;#Log4j2&#34; class=&#34;headerlink&#34; title=&#34;Log4j2&#34;&gt;&lt;/a&gt;Log4j2&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;最初版RCERC1的绕过&lt;/li&gt;
&lt;li&gt;拒绝服务原理&lt;/li&gt;
&lt;li&gt;Java Agent修复原理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Tomcat&#34;&gt;&lt;a href=&#34;#Tomcat&#34; class=&#34;headerlink&#34; title=&#34;Tomcat&#34;&gt;&lt;/a&gt;Tomcat&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;PUT RCE&lt;/li&gt;
&lt;li&gt;CGI SERVERLET RCE&lt;/li&gt;
&lt;li&gt;SESSION RCE&lt;/li&gt;
&lt;li&gt;AJP RCE&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="java" />
        <updated>2024-02-29T13:21:04.000Z</updated>
    </entry>
</feed>
