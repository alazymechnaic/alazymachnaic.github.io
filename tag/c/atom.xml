<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://alazymechnaic.github.io</id>
    <title>alazymachine • Posts by &#34;c&#34; tag</title>
    <link href="https://alazymechnaic.github.io" />
    <updated>2023-09-11T11:24:57.000Z</updated>
    <category term="paper" />
    <category term="fuzz" />
    <category term="arm" />
    <category term="Linux" />
    <category term="C" />
    <category term="go" />
    <category term="Paper" />
    <category term="bypass" />
    <category term="clash" />
    <category term="Hook" />
    <category term="go, RE" />
    <category term="kernel pwn" />
    <category term="binary" />
    <category term="writing" />
    <category term="HEAP PWN CTF" />
    <category term="Android" />
    <category term="dataflow" />
    <category term="pwn" />
    <category term="java" />
    <entry>
        <id>https://alazymechnaic.github.io/2023/09/11/c-yu-yan-fu-jian/</id>
        <title>C语言复健</title>
        <link rel="alternate" href="https://alazymechnaic.github.io/2023/09/11/c-yu-yan-fu-jian/"/>
        <content type="html">&lt;h2 id=&#34;SpeedRunner-for-C&#34;&gt;&lt;a href=&#34;#SpeedRunner-for-C&#34; class=&#34;headerlink&#34; title=&#34;SpeedRunner_for_C&#34;&gt;&lt;/a&gt;SpeedRunner_for_C&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;​	本文用于帮助常年不使用C语言的程序员进行复健。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202309111927899.png&#34; alt=&#34;image-20230911192658774&#34;&gt;&lt;/p&gt;
&lt;p&gt;图片来源：&lt;a href=&#34;https://mp.weixin.qq.com/s/aSiVNXJ0rKBWLy_MlzOMWA&#34;&gt;https://mp.weixin.qq.com/s/aSiVNXJ0rKBWLy_MlzOMWA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;直接上例子，哪里不会读哪里&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 定义结构体&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Person&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; name[&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;];&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; age;&lt;br&gt;};&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 函数声明&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;printPerson&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; Person* p)&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; {&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 声明并初始化数组&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; numbers[] = {&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;};&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 数组遍历&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(numbers) / &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(numbers[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]); i++) {&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;%d &#34;&lt;/span&gt;, numbers[i]);&lt;br&gt;    }&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 声明并初始化指针&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;* ptr = numbers;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 使用指针访问数组元素&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(numbers) / &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(numbers[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]); i++) {&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;%d &#34;&lt;/span&gt;, *(ptr + i));&lt;br&gt;    }&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 定义结构体变量&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;person1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;strcpy&lt;/span&gt;(person1.name, &lt;span class=&#34;hljs-string&#34;&gt;&#34;John&#34;&lt;/span&gt;);&lt;br&gt;    person1.age = &lt;span class=&#34;hljs-number&#34;&gt;25&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 调用函数打印结构体内容&lt;/span&gt;&lt;br&gt;    printPerson(&amp;amp;person1);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 函数定义&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;printPerson&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; Person* p)&lt;/span&gt; {&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Name: %s\n&#34;&lt;/span&gt;, p-&amp;gt;name);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Age: %d\n&#34;&lt;/span&gt;, p-&amp;gt;age);&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;值传递方式&#34;&gt;&lt;a href=&#34;#值传递方式&#34; class=&#34;headerlink&#34; title=&#34;值传递方式&#34;&gt;&lt;/a&gt;值传递方式&lt;/h2&gt;&lt;p&gt;​	在C语言中，指针可以通过值传递或引用传递的方式进行函数参数的传递。下面给出了两种指针传参的示例代码：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;值传递方式：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;changeValue&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; num)&lt;/span&gt; {&lt;br&gt;    num = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// 修改局部变量的值&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; {&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; num = &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Before: %d\n&#34;&lt;/span&gt;, num);&lt;br&gt;    &lt;br&gt;    changeValue(num); &lt;span class=&#34;hljs-comment&#34;&gt;// 值传递&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;After: %d\n&#34;&lt;/span&gt;, num); &lt;span class=&#34;hljs-comment&#34;&gt;// num的值未改变&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​	在这个示例中，&lt;code&gt;changeValue&lt;/code&gt;函数通过值传递方式接收一个&lt;code&gt;int&lt;/code&gt;类型的参数&lt;code&gt;num&lt;/code&gt;。在函数内部，对&lt;code&gt;num&lt;/code&gt;进行修改，但这只会影响到函数内部的局部变量，不会改变&lt;code&gt;main&lt;/code&gt;函数中的&lt;code&gt;num&lt;/code&gt;的值。因此，输出结果为&lt;code&gt;Before: 5&lt;/code&gt;和&lt;code&gt;After: 5&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引用传递方式：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;changeValue&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;* ptr)&lt;/span&gt; {&lt;br&gt;    *ptr = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// 修改指针所指向的变量的值&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; {&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; num = &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Before: %d\n&#34;&lt;/span&gt;, num);&lt;br&gt;    &lt;br&gt;    changeValue(&amp;amp;num); &lt;span class=&#34;hljs-comment&#34;&gt;// 引用传递&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;After: %d\n&#34;&lt;/span&gt;, num); &lt;span class=&#34;hljs-comment&#34;&gt;// num的值已被修改&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​	在这个示例中，&lt;code&gt;changeValue&lt;/code&gt;函数通过引用传递方式接收一个指向&lt;code&gt;int&lt;/code&gt;类型的指针&lt;code&gt;ptr&lt;/code&gt;。在函数内部，通过解引用操作&lt;code&gt;*ptr&lt;/code&gt;修改了指针所指向的变量的值，因为传递的是指针的地址。这样就可以在函数内部修改&lt;code&gt;main&lt;/code&gt;函数中的&lt;code&gt;num&lt;/code&gt;的值。输出结果为&lt;code&gt;Before: 5&lt;/code&gt;和&lt;code&gt;After: 10&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	通过这两个示例，可以看到值传递方式只是传递了变量的副本，函数对副本的修改不会影响原始变量。而引用传递方式通过传递指针的地址，可以直接修改原始变量的值。在实际应用中，可以根据需要选择合适的传参方式。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;上述内容有一个易错点，就是int*p作为changeValue的参数，指的是传入的ptr是一个地址类型，而调用使用&amp;amp;恰好是取出一个地址进行操作。在做类型定义和类型使用时对于指针的用法是不一样的。&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;双重指针的传递方式&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setValue&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;** ptr)&lt;/span&gt; { &lt;span class=&#34;hljs-comment&#34;&gt;// 这里定义传入的指针是指向指针地址的类型&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; value = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;; &lt;br&gt;    *ptr = &amp;amp;value; &lt;span class=&#34;hljs-comment&#34;&gt;// 将指针指向局部变量value的地址&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; {&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;* p = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;br&gt;    setValue(&amp;amp;p); &lt;span class=&#34;hljs-comment&#34;&gt;// 将p的地址传递给函数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (p != &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;) {&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Value: %d\n&#34;&lt;/span&gt;, *p); &lt;span class=&#34;hljs-comment&#34;&gt;// 解引用p获取值&lt;/span&gt;&lt;br&gt;    } &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; {&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Invalid pointer\n&#34;&lt;/span&gt;); &lt;br&gt;    }&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;Union类型的使用&#34;&gt;&lt;a href=&#34;#Union类型的使用&#34; class=&#34;headerlink&#34; title=&#34;Union类型的使用&#34;&gt;&lt;/a&gt;Union类型的使用&lt;/h2&gt;&lt;p&gt;​	在C语言中，联合（Union）是一种特殊的数据结构，&lt;strong&gt;它允许在相同的内存位置存储不同的数据类型。只能同时存储联合中所定义的一个成员的值，如果多个成员的内存大小不相同，则按照尺寸最大的那个变量申请内存&lt;/strong&gt;。下面是一个具体的例子，展示了如何使用联合：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 定义联合&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;union&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Data&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; intValue;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; floatValue;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; stringValue[&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;];&lt;br&gt;};&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; {&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;union&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;data&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 设置整数值&lt;/span&gt;&lt;br&gt;    data.intValue = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Integer value: %d\n&#34;&lt;/span&gt;, data.intValue);&lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 设置浮点数值&lt;/span&gt;&lt;br&gt;    data.floatValue = &lt;span class=&#34;hljs-number&#34;&gt;3.14&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Float value: %.2f\n&#34;&lt;/span&gt;, data.floatValue);&lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 设置字符串值&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;strcpy&lt;/span&gt;(data.stringValue, &lt;span class=&#34;hljs-string&#34;&gt;&#34;Hello&#34;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;String value: %s\n&#34;&lt;/span&gt;, data.stringValue);&lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 访问共用体的值&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;After setting string value, Integer value: %d\n&#34;&lt;/span&gt;, data.intValue);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;After setting string value, Float value: %.2f\n&#34;&lt;/span&gt;, data.floatValue);&lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​	在这个例子中，我们定义了一个联合&lt;code&gt;Data&lt;/code&gt;，包含三个成员：&lt;code&gt;intValue&lt;/code&gt;（整数类型）、&lt;code&gt;floatValue&lt;/code&gt;（浮点数类型）和&lt;code&gt;stringValue&lt;/code&gt;（字符串类型）。&lt;/p&gt;
&lt;p&gt;​	在&lt;code&gt;main&lt;/code&gt;函数中，我们声明了一个&lt;code&gt;data&lt;/code&gt;联合变量。我们可以通过给联合的不同成员赋值来存储不同类型的数据。在示例中，我们首先设置&lt;code&gt;intValue&lt;/code&gt;为10，然后打印出整数值。接下来，我们将&lt;code&gt;floatValue&lt;/code&gt;设置为3.14，并打印出浮点数值。最后，我们使用&lt;code&gt;strcpy&lt;/code&gt;函数将字符串”Hello”复制到&lt;code&gt;stringValue&lt;/code&gt;成员中，并打印出字符串值。&lt;/p&gt;
&lt;p&gt;​	需要注意的是，联合只能同时存储一个成员的值，因此在设置一个成员的值后，其他成员的值将被覆盖。在示例的最后，我们访问整数值和浮点数值，并发现在设置字符串值后，这两个值被改变了。&lt;/p&gt;
&lt;p&gt;​	联合在某些情况下可以用于节省内存空间，因为它们共享相同的内存位置。但是要注意使用联合时要小心，确保正确地访问和解释存储在联合中的数据。&lt;/p&gt;
&lt;h2 id=&#34;二维数组的使用&#34;&gt;&lt;a href=&#34;#二维数组的使用&#34; class=&#34;headerlink&#34; title=&#34;二维数组的使用&#34;&gt;&lt;/a&gt;二维数组的使用&lt;/h2&gt;&lt;p&gt;在C语言中，可以使用多种方法创建二维数组。下面是两种常见的创建二维数组的方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法一：使用静态初始化创建二维数组&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; {&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 创建一个2行3列的二维数组&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; matrix[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;] = {&lt;br&gt;        {&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;},   &lt;span class=&#34;hljs-comment&#34;&gt;// 第一行的元素&lt;/span&gt;&lt;br&gt;        {&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;}    &lt;span class=&#34;hljs-comment&#34;&gt;// 第二行的元素&lt;/span&gt;&lt;br&gt;    };&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 访问二维数组的元素&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Element at matrix[0][0]: %d\n&#34;&lt;/span&gt;, matrix[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]); &lt;span class=&#34;hljs-comment&#34;&gt;// 输出：1&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Element at matrix[1][2]: %d\n&#34;&lt;/span&gt;, matrix[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;]); &lt;span class=&#34;hljs-comment&#34;&gt;// 输出：6&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在这个例子中，我们使用静态初始化的方式创建了一个2行3列的二维数组&lt;code&gt;matrix&lt;/code&gt;。通过在花括号内提供初始值来初始化二维数组的每个元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法二：使用动态内存分配创建二维数组&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; {&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 创建一个2行3列的二维数组&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; rows = &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; cols = &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;** matrix = (&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;**)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(rows * &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;*)); &lt;span class=&#34;hljs-comment&#34;&gt;// 这里定义指向int*的指针类型&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; rows; i++) {&lt;br&gt;        matrix[i] = (&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(cols * &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;)); &lt;span class=&#34;hljs-comment&#34;&gt;// 指向int类型的指针&lt;/span&gt;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 给二维数组赋值&lt;/span&gt;&lt;br&gt;    matrix[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;    matrix[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;    matrix[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;;&lt;br&gt;    matrix[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;    matrix[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;;&lt;br&gt;    matrix[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 访问二维数组的元素&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Element at matrix[0][0]: %d\n&#34;&lt;/span&gt;, matrix[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]); &lt;span class=&#34;hljs-comment&#34;&gt;// 输出：1&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Element at matrix[1][2]: %d\n&#34;&lt;/span&gt;, matrix[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;]); &lt;span class=&#34;hljs-comment&#34;&gt;// 输出：6&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 释放动态分配的内存&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; rows; i++) {&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(matrix[i]);&lt;br&gt;    }&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(matrix);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​	在这个例子中，我们使用动态内存分配的方式创建了一个2行3列的二维数组&lt;code&gt;matrix&lt;/code&gt;。首先，我们使用&lt;code&gt;malloc&lt;/code&gt;函数分配了一个指向指针的指针&lt;code&gt;matrix&lt;/code&gt;，作为二维数组的行。然后，通过循环为每一行分配内存空间。&lt;/p&gt;
&lt;p&gt;​	接下来，我们可以像普通的二维数组一样，使用索引操作符&lt;code&gt;[]&lt;/code&gt;来访问和赋值二维数组的元素。&lt;/p&gt;
&lt;p&gt;​	在最后，我们需要记得释放动态分配的内存，以避免内存泄漏。首先，我们使用循环释放每一行的内存，然后再释放指向指针的指针&lt;code&gt;matrix&lt;/code&gt;的内存。&lt;/p&gt;
&lt;p&gt;​	这两种方法分别适用于不同的情况。静态初始化适用于已知大小且不会改变的二维数组，而动态内存分配适用于在程序运行时需要根据具体需求创建大小可变的二维数组。&lt;/p&gt;
&lt;h2 id=&#34;字符串操作&#34;&gt;&lt;a href=&#34;#字符串操作&#34; class=&#34;headerlink&#34; title=&#34;字符串操作&#34;&gt;&lt;/a&gt;字符串操作&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202309111959759.png&#34; alt=&#34;image-20230911195937691&#34;&gt;&lt;/p&gt;
&lt;p&gt;图片来源：&lt;a href=&#34;https://mp.weixin.qq.com/s/duCnyM53doEt_-OPXK1mDQ&#34;&gt;https://mp.weixin.qq.com/s/duCnyM53doEt_-OPXK1mDQ&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs C&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; greeting[] = &lt;span class=&#34;hljs-string&#34;&gt;&#34;Hello&#34;&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

</content>
        <category term="C" />
        <updated>2023-09-11T11:24:57.000Z</updated>
    </entry>
</feed>
