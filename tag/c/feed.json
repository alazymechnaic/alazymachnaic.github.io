{
    "version": "https://jsonfeed.org/version/1",
    "title": "alazymachine • All posts by \"c\" tag",
    "description": "",
    "home_page_url": "https://alazymechnaic.github.io",
    "items": [
        {
            "id": "https://alazymechnaic.github.io/2023/09/11/c-yu-yan-fu-jian/",
            "url": "https://alazymechnaic.github.io/2023/09/11/c-yu-yan-fu-jian/",
            "title": "SpeedRunner_for_C",
            "date_published": "2023-09-11T11:24:57.000Z",
            "content_html": "<h2 id=\"SpeedRunner-for-C\"><a href=\"#SpeedRunner-for-C\" class=\"headerlink\" title=\"SpeedRunner_for_C\"></a>SpeedRunner_for_C</h2><hr>\n<p>​\t本文用于帮助常年不使用C语言的程序员进行复健。</p>\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202309111927899.png\" alt=\"image-20230911192658774\"></p>\n<p>图片来源：<a href=\"https://mp.weixin.qq.com/s/aSiVNXJ0rKBWLy_MlzOMWA\">https://mp.weixin.qq.com/s/aSiVNXJ0rKBWLy_MlzOMWA</a></p>\n<p>直接上例子，哪里不会读哪里</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-comment\">// 定义结构体</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Person</span> {</span><br>    <span class=\"hljs-type\">char</span> name[<span class=\"hljs-number\">20</span>];<br>    <span class=\"hljs-type\">int</span> age;<br>};<br><br><span class=\"hljs-comment\">// 函数声明</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printPerson</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Person* p)</span>;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {<br>    <span class=\"hljs-comment\">// 声明并初始化数组</span><br>    <span class=\"hljs-type\">int</span> numbers[] = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>};<br><br>    <span class=\"hljs-comment\">// 数组遍历</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">sizeof</span>(numbers) / <span class=\"hljs-keyword\">sizeof</span>(numbers[<span class=\"hljs-number\">0</span>]); i++) {<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>, numbers[i]);<br>    }<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\"</span>);<br><br>    <span class=\"hljs-comment\">// 声明并初始化指针</span><br>    <span class=\"hljs-type\">int</span>* ptr = numbers;<br><br>    <span class=\"hljs-comment\">// 使用指针访问数组元素</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">sizeof</span>(numbers) / <span class=\"hljs-keyword\">sizeof</span>(numbers[<span class=\"hljs-number\">0</span>]); i++) {<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>, *(ptr + i));<br>    }<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\"</span>);<br><br>    <span class=\"hljs-comment\">// 定义结构体变量</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Person</span> <span class=\"hljs-title\">person1</span>;</span><br>    <span class=\"hljs-built_in\">strcpy</span>(person1.name, <span class=\"hljs-string\">\"John\"</span>);<br>    person1.age = <span class=\"hljs-number\">25</span>;<br><br>    <span class=\"hljs-comment\">// 调用函数打印结构体内容</span><br>    printPerson(&amp;person1);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>}<br><br><span class=\"hljs-comment\">// 函数定义</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printPerson</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Person* p)</span> {<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Name: %s\\n\"</span>, p-&gt;name);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Age: %d\\n\"</span>, p-&gt;age);<br>}<br></code></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"值传递方式\"><a href=\"#值传递方式\" class=\"headerlink\" title=\"值传递方式\"></a>值传递方式</h2><p>​\t在C语言中，指针可以通过值传递或引用传递的方式进行函数参数的传递。下面给出了两种指针传参的示例代码：</p>\n<ol>\n<li><p>值传递方式：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">changeValue</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num)</span> {<br>    num = <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">// 修改局部变量的值</span><br>}<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {<br>    <span class=\"hljs-type\">int</span> num = <span class=\"hljs-number\">5</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Before: %d\\n\"</span>, num);<br>    <br>    changeValue(num); <span class=\"hljs-comment\">// 值传递</span><br>    <br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"After: %d\\n\"</span>, num); <span class=\"hljs-comment\">// num的值未改变</span><br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>\n<p>​\t在这个示例中，<code>changeValue</code>函数通过值传递方式接收一个<code>int</code>类型的参数<code>num</code>。在函数内部，对<code>num</code>进行修改，但这只会影响到函数内部的局部变量，不会改变<code>main</code>函数中的<code>num</code>的值。因此，输出结果为<code>Before: 5</code>和<code>After: 5</code>。</p>\n</li>\n<li><p>引用传递方式：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">changeValue</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>* ptr)</span> {<br>    *ptr = <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">// 修改指针所指向的变量的值</span><br>}<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {<br>    <span class=\"hljs-type\">int</span> num = <span class=\"hljs-number\">5</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Before: %d\\n\"</span>, num);<br>    <br>    changeValue(&amp;num); <span class=\"hljs-comment\">// 引用传递</span><br>    <br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"After: %d\\n\"</span>, num); <span class=\"hljs-comment\">// num的值已被修改</span><br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>\n<p>​\t在这个示例中，<code>changeValue</code>函数通过引用传递方式接收一个指向<code>int</code>类型的指针<code>ptr</code>。在函数内部，通过解引用操作<code>*ptr</code>修改了指针所指向的变量的值，因为传递的是指针的地址。这样就可以在函数内部修改<code>main</code>函数中的<code>num</code>的值。输出结果为<code>Before: 5</code>和<code>After: 10</code>。</p>\n</li>\n</ol>\n<p>​\t通过这两个示例，可以看到值传递方式只是传递了变量的副本，函数对副本的修改不会影响原始变量。而引用传递方式通过传递指针的地址，可以直接修改原始变量的值。在实际应用中，可以根据需要选择合适的传参方式。</p>\n<p>​\t<strong>上述内容有一个易错点，就是int*p作为changeValue的参数，指的是传入的ptr是一个地址类型，而调用使用&amp;恰好是取出一个地址进行操作。在做类型定义和类型使用时对于指针的用法是不一样的。</strong></p>\n<ol start=\"3\">\n<li>双重指针的传递方式</li>\n</ol>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">setValue</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>** ptr)</span> { <span class=\"hljs-comment\">// 这里定义传入的指针是指向指针地址的类型</span><br>    <span class=\"hljs-type\">int</span> value = <span class=\"hljs-number\">10</span>; <br>    *ptr = &amp;value; <span class=\"hljs-comment\">// 将指针指向局部变量value的地址</span><br>}<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {<br>    <span class=\"hljs-type\">int</span>* p = <span class=\"hljs-literal\">NULL</span>;<br>    setValue(&amp;p); <span class=\"hljs-comment\">// 将p的地址传递给函数</span><br>    <span class=\"hljs-keyword\">if</span> (p != <span class=\"hljs-literal\">NULL</span>) {<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Value: %d\\n\"</span>, *p); <span class=\"hljs-comment\">// 解引用p获取值</span><br>    } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Invalid pointer\\n\"</span>); <br>    }<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>\n\n\n\n<h2 id=\"Union类型的使用\"><a href=\"#Union类型的使用\" class=\"headerlink\" title=\"Union类型的使用\"></a>Union类型的使用</h2><p>​\t在C语言中，联合（Union）是一种特殊的数据结构，<strong>它允许在相同的内存位置存储不同的数据类型。只能同时存储联合中所定义的一个成员的值，如果多个成员的内存大小不相同，则按照尺寸最大的那个变量申请内存</strong>。下面是一个具体的例子，展示了如何使用联合：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><br><span class=\"hljs-comment\">// 定义联合</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">Data</span> {</span><br>    <span class=\"hljs-type\">int</span> intValue;<br>    <span class=\"hljs-type\">float</span> floatValue;<br>    <span class=\"hljs-type\">char</span> stringValue[<span class=\"hljs-number\">20</span>];<br>};<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">Data</span> <span class=\"hljs-title\">data</span>;</span><br>  <br>    <span class=\"hljs-comment\">// 设置整数值</span><br>    data.intValue = <span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Integer value: %d\\n\"</span>, data.intValue);<br>  <br>    <span class=\"hljs-comment\">// 设置浮点数值</span><br>    data.floatValue = <span class=\"hljs-number\">3.14</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Float value: %.2f\\n\"</span>, data.floatValue);<br>  <br>    <span class=\"hljs-comment\">// 设置字符串值</span><br>    <span class=\"hljs-built_in\">strcpy</span>(data.stringValue, <span class=\"hljs-string\">\"Hello\"</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"String value: %s\\n\"</span>, data.stringValue);<br>  <br>    <span class=\"hljs-comment\">// 访问共用体的值</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"After setting string value, Integer value: %d\\n\"</span>, data.intValue);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"After setting string value, Float value: %.2f\\n\"</span>, data.floatValue);<br>  <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>\n\n<p>​\t在这个例子中，我们定义了一个联合<code>Data</code>，包含三个成员：<code>intValue</code>（整数类型）、<code>floatValue</code>（浮点数类型）和<code>stringValue</code>（字符串类型）。</p>\n<p>​\t在<code>main</code>函数中，我们声明了一个<code>data</code>联合变量。我们可以通过给联合的不同成员赋值来存储不同类型的数据。在示例中，我们首先设置<code>intValue</code>为10，然后打印出整数值。接下来，我们将<code>floatValue</code>设置为3.14，并打印出浮点数值。最后，我们使用<code>strcpy</code>函数将字符串”Hello”复制到<code>stringValue</code>成员中，并打印出字符串值。</p>\n<p>​\t需要注意的是，联合只能同时存储一个成员的值，因此在设置一个成员的值后，其他成员的值将被覆盖。在示例的最后，我们访问整数值和浮点数值，并发现在设置字符串值后，这两个值被改变了。</p>\n<p>​\t联合在某些情况下可以用于节省内存空间，因为它们共享相同的内存位置。但是要注意使用联合时要小心，确保正确地访问和解释存储在联合中的数据。</p>\n<h2 id=\"二维数组的使用\"><a href=\"#二维数组的使用\" class=\"headerlink\" title=\"二维数组的使用\"></a>二维数组的使用</h2><p>在C语言中，可以使用多种方法创建二维数组。下面是两种常见的创建二维数组的方法：</p>\n<p><strong>方法一：使用静态初始化创建二维数组</strong></p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {<br>    <span class=\"hljs-comment\">// 创建一个2行3列的二维数组</span><br>    <span class=\"hljs-type\">int</span> matrix[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>] = {<br>        {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>},   <span class=\"hljs-comment\">// 第一行的元素</span><br>        {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>}    <span class=\"hljs-comment\">// 第二行的元素</span><br>    };<br><br>    <span class=\"hljs-comment\">// 访问二维数组的元素</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at matrix[0][0]: %d\\n\"</span>, matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]); <span class=\"hljs-comment\">// 输出：1</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at matrix[1][2]: %d\\n\"</span>, matrix[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>]); <span class=\"hljs-comment\">// 输出：6</span><br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>\n\n<p>在这个例子中，我们使用静态初始化的方式创建了一个2行3列的二维数组<code>matrix</code>。通过在花括号内提供初始值来初始化二维数组的每个元素。</p>\n<p><strong>方法二：使用动态内存分配创建二维数组</strong></p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {<br>    <span class=\"hljs-comment\">// 创建一个2行3列的二维数组</span><br>    <span class=\"hljs-type\">int</span> rows = <span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-type\">int</span> cols = <span class=\"hljs-number\">3</span>;<br><br>    <span class=\"hljs-type\">int</span>** matrix = (<span class=\"hljs-type\">int</span>**)<span class=\"hljs-built_in\">malloc</span>(rows * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>*)); <span class=\"hljs-comment\">// 这里定义指向int*的指针类型</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; rows; i++) {<br>        matrix[i] = (<span class=\"hljs-type\">int</span>*)<span class=\"hljs-built_in\">malloc</span>(cols * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>)); <span class=\"hljs-comment\">// 指向int类型的指针</span><br>    }<br><br>    <span class=\"hljs-comment\">// 给二维数组赋值</span><br>    matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>    matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">2</span>;<br>    matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">3</span>;<br>    matrix[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">4</span>;<br>    matrix[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">5</span>;<br>    matrix[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">6</span>;<br><br>    <span class=\"hljs-comment\">// 访问二维数组的元素</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at matrix[0][0]: %d\\n\"</span>, matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]); <span class=\"hljs-comment\">// 输出：1</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at matrix[1][2]: %d\\n\"</span>, matrix[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>]); <span class=\"hljs-comment\">// 输出：6</span><br><br>    <span class=\"hljs-comment\">// 释放动态分配的内存</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; rows; i++) {<br>        <span class=\"hljs-built_in\">free</span>(matrix[i]);<br>    }<br>    <span class=\"hljs-built_in\">free</span>(matrix);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>\n\n<p>​\t在这个例子中，我们使用动态内存分配的方式创建了一个2行3列的二维数组<code>matrix</code>。首先，我们使用<code>malloc</code>函数分配了一个指向指针的指针<code>matrix</code>，作为二维数组的行。然后，通过循环为每一行分配内存空间。</p>\n<p>​\t接下来，我们可以像普通的二维数组一样，使用索引操作符<code>[]</code>来访问和赋值二维数组的元素。</p>\n<p>​\t在最后，我们需要记得释放动态分配的内存，以避免内存泄漏。首先，我们使用循环释放每一行的内存，然后再释放指向指针的指针<code>matrix</code>的内存。</p>\n<p>​\t这两种方法分别适用于不同的情况。静态初始化适用于已知大小且不会改变的二维数组，而动态内存分配适用于在程序运行时需要根据具体需求创建大小可变的二维数组。</p>\n<h2 id=\"字符串操作\"><a href=\"#字符串操作\" class=\"headerlink\" title=\"字符串操作\"></a>字符串操作</h2><p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202309111959759.png\" alt=\"image-20230911195937691\"></p>\n<p>图片来源：<a href=\"https://mp.weixin.qq.com/s/duCnyM53doEt_-OPXK1mDQ\">https://mp.weixin.qq.com/s/duCnyM53doEt_-OPXK1mDQ</a></p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">char</span> greeting[] = <span class=\"hljs-string\">\"Hello\"</span>;<br></code></pre></td></tr></tbody></table></figure>\n\n",
            "tags": [
                "C"
            ]
        }
    ]
}