<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>alazymachine • Posts by &#34;binary&#34; tag</title>
        <link>https://alazymechnaic.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Mon, 02 Oct 2023 21:05:07 +0800</pubDate>
        <lastBuildDate>Mon, 02 Oct 2023 21:05:07 +0800</lastBuildDate>
        <category>paper</category>
        <category>fuzz</category>
        <category>arm</category>
        <category>Linux</category>
        <category>C</category>
        <category>go</category>
        <category>Paper</category>
        <category>bypass</category>
        <category>clash</category>
        <category>Hook</category>
        <category>go, RE</category>
        <category>kernel pwn</category>
        <category>binary</category>
        <category>writing</category>
        <category>HEAP PWN CTF</category>
        <category>Android</category>
        <category>dataflow</category>
        <category>pwn</category>
        <category>java</category>
        <category>web</category>
        <category>exploit</category>
        <category>network</category>
        <category>代码分析</category>
        <category>二进制安全</category>
        <category>渗透</category>
        <category>程序分析</category>
        <category>stack overflow</category>
        <category>算法</category>
        <item>
            <guid isPermalink="true">https://alazymechnaic.github.io/2023/10/02/jin-cheng-zhu-ru/</guid>
            <title>进程注入</title>
            <link>https://alazymechnaic.github.io/2023/10/02/jin-cheng-zhu-ru/</link>
            <category>binary</category>
            <pubDate>Mon, 02 Oct 2023 21:05:07 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;PC-端注入&#34;&gt;&lt;a href=&#34;#PC-端注入&#34; class=&#34;headerlink&#34; title=&#34;PC 端注入&#34;&gt;&lt;/a&gt;PC 端注入&lt;/h2&gt;&lt;h2 id=&#34;移动端注入&#34;&gt;&lt;a href=&#34;#移动端注入&#34; class=&#34;headerlink&#34; title=&#34;移动端注入&#34;&gt;&lt;/a&gt;移动端注入&lt;/h2&gt;&lt;p&gt;​	由于程序本身是存在进程隔离的，导致一个程序本身是不能影响其他程序的执行的。但是注入技术的初衷是热补丁，调试器功能的实现。因此只要有debug API存在就是可以注入的。&lt;/p&gt;
&lt;h3 id=&#34;Zygote-注入&#34;&gt;&lt;a href=&#34;#Zygote-注入&#34; class=&#34;headerlink&#34; title=&#34;Zygote 注入&#34;&gt;&lt;/a&gt;Zygote 注入&lt;/h3&gt;&lt;h3 id=&#34;ptrace注入&#34;&gt;&lt;a href=&#34;#ptrace注入&#34; class=&#34;headerlink&#34; title=&#34;ptrace注入&#34;&gt;&lt;/a&gt;ptrace注入&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/hp910315/article/details/77335058&#34;&gt;https://blog.csdn.net/hp910315/article/details/77335058&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;ptrace&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; __ptrace_request request, &lt;span class=&#34;hljs-type&#34;&gt;pid_t&lt;/span&gt; pid, &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *addr, &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *data)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​	其中request参数是本次ptrace要进行的操作，pid则是本次要附加的进程id，addr与data按照操作不同取不同的含义。request常见的选项如下：&lt;/p&gt;
&lt;figure class=&#34;highlight applescript&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs applescript&#34;&gt;PTRACE_ATTACH，表示附加到指定远程进程;&lt;br&gt;PTRACE_DETACH，表示从指定远程进程分离&lt;br&gt;PTRACE_GETREGS，表示读取远程进程当前寄存器环境&lt;br&gt;PTRACE_SETREGS，表示设置远程进程的寄存器环境&lt;br&gt;PTRACE_CONT，表示使远程进程继续运行&lt;br&gt;PTRACE_PEEKTEXT，从远程进程指定内存地址读取一个&lt;span class=&#34;hljs-built_in&#34;&gt;word&lt;/span&gt;大小的数据&lt;br&gt;PTRACE_POKETEXT，往远程进程指定内存地址写入一个&lt;span class=&#34;hljs-built_in&#34;&gt;word&lt;/span&gt;大小的数据&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;ul&gt;
&lt;li&gt;利用ptrace函数将shellcode注入远程进程的内存空间中，然后通过执行shellcode加载远程进程so模块。&lt;/li&gt;
&lt;li&gt;通过直接远程调用dlopen， dlsym， dlclose等函数加载被注入的so模块并执行指定代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;注入流程&#34;&gt;&lt;a href=&#34;#注入流程&#34; class=&#34;headerlink&#34; title=&#34;注入流程&#34;&gt;&lt;/a&gt;注入流程&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;通过利用ptrace进行附加到要注入的进程；父进程可用waitpid来判断子进程是否中断。&lt;/li&gt;
&lt;li&gt;保存寄存环境；&lt;/li&gt;
&lt;li&gt;远程调用mmap函数分配内存空间；&lt;/li&gt;
&lt;li&gt;向远程进程内存空间写入加载模块名称和函数名称；&lt;/li&gt;
&lt;li&gt;远程调用dlopen函数打开注入模块；&lt;/li&gt;
&lt;li&gt;远程调用dlsym函数或需要调用的函数地址；&lt;/li&gt;
&lt;li&gt;远程调用被注入模块的函数；&lt;ol&gt;
&lt;li&gt;前四个按顺序分别写入R0至R3，&lt;/li&gt;
&lt;li&gt;修改pc寄存器到要执行的函数地址，&lt;/li&gt;
&lt;li&gt;若为&lt;strong&gt;Thumb&lt;/strong&gt;指令，则最低位要重新设置为0，并将CPSR寄存器的T标志位设置为1.若为ARM指令则CPSR的T标志位复位。&lt;/li&gt;
&lt;li&gt;设置远程进程的LR寄存器的值为0，远程进程的函数调用结束后，程序会跳转到LR寄存器存储的地址，但由于LR设置为0则会导致远程进程执行出错，此时会进入暂停状态，被Tracer接管，通过读取远程进程R0的寄存器可以获取远程函数调用的返回结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;恢复寄存器环境；在detach之前恢复，保证程序原本的执行流程不崩溃。&lt;/li&gt;
&lt;li&gt;利用ptrace从远程进程剥离（detach）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	shellcode注入就是通过将dlopen/dlsym库函数的操作放在shellcode代码中，注入函数只是通过对远程APP进程进行内存空间申请，接着修改shellcode 代码中有关dlopen、dlsymdlclose等函数使用到的参数信息，然后将shellcode代码注入到远程APP进程申请的空间中，最后通过修改PC寄存器的方式来执行shellcode 的代码&lt;/p&gt;
&lt;h3 id=&#34;ELF文件感染注入&#34;&gt;&lt;a href=&#34;#ELF文件感染注入&#34; class=&#34;headerlink&#34; title=&#34;ELF文件感染注入&#34;&gt;&lt;/a&gt;ELF文件感染注入&lt;/h3&gt;&lt;p&gt;​	在android平台Native层的可执行文件SO文件，它是属于ELF文件格式，通过修改ELF文件格式可以实现对so文件的注入。&lt;/p&gt;
&lt;p&gt;通过修改ELF二进制的可执行文件，并在ELF文件中添加自己的代码，使得可执行文件在运行时会先执行自定义添加的代码，最后在执行ELF文件的原始逻辑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;修改ELF文件的注入实现过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	1.修改.dynamic段，在DT_STRTAB指向的字符串表中添加 自定义的so模块名称。由于直接在原字符串表中添加一串数据，会将字符串表后的所有数据的文件偏移发生变化，所以通常会将字符串表移至文件末尾。&lt;/p&gt;
&lt;p&gt;​	2.通过修改Program Header Table中添加PT_LOAD表项，新添加的表项将保护so模块名称的字符串表数据映射到内存中。同时将Program Header Table移动到文件末尾；&lt;/p&gt;
&lt;p&gt;​	3.修改.dynamic段的数组数据，修改DT_STRTAB,DT_STRSZ使其指向新字符串表，然后在dynamic arry的结尾加上DT_NEEDED表项，并指向自定义的so模块名称；&lt;/p&gt;
&lt;p&gt;​	4.修改ELF HEADER结构中 Program Header Table的位置信息，并指向新的Program Header Table。&lt;/p&gt;
&lt;h3 id=&#34;移动端注入实战&#34;&gt;&lt;a href=&#34;#移动端注入实战&#34; class=&#34;headerlink&#34; title=&#34;移动端注入实战&#34;&gt;&lt;/a&gt;移动端注入实战&lt;/h3&gt;&lt;h4 id=&#34;Android-NDK注入环境配置&#34;&gt;&lt;a href=&#34;#Android-NDK注入环境配置&#34; class=&#34;headerlink&#34; title=&#34;Android NDK注入环境配置&#34;&gt;&lt;/a&gt;Android NDK注入环境配置&lt;/h4&gt;&lt;p&gt;​	这里介绍在在Android环境下运行ELF文件所需要配置的NDK操作，关于frida hook的部分请参考另一篇博客&lt;a href=&#34;&#34;&gt;frida-hook&lt;/a&gt;。本文将环境配置在Ubuntu 20.04环境之上。&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs sh&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 下载NDK配置文件，这里需要科学上网一下&lt;/span&gt;&lt;br&gt;wget https://dl.google.com/android/repository/android-ndk-r17-beta2-linux-x86_64.zip&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 解压&lt;/span&gt;&lt;br&gt;unzip android-ndk-r17-beta2-linux-x86_64.zip&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 转移目录&lt;/span&gt;&lt;br&gt;sudo &lt;span class=&#34;hljs-built_in&#34;&gt;mv&lt;/span&gt; android-ndk-r17-beta2 /usr/local/&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 编辑环境配置，没有图形化界面就使用gedit&lt;/span&gt;&lt;br&gt;sudo gedit /etc/profile&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;在profile中添加以下内容&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight routeros&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs routeros&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-attribute&#34;&gt;NDK&lt;/span&gt;=/usr/local/android-ndk-r17-beta2&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-attribute&#34;&gt;PATH&lt;/span&gt;=&lt;span class=&#34;hljs-variable&#34;&gt;$PATH&lt;/span&gt;:$NDK&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-attribute&#34;&gt;NDK_ARM_GCC&lt;/span&gt;=/usr/local/android-ndk-r17-beta2/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-attribute&#34;&gt;HO_ARM&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#34;--sysroot=/usr/local/android-ndk-r17-beta2/platforms/android-21/arch-arm -isystem /usr/local/android-ndk-r17-beta2/sysroot/usr/include  -isystem /usr/local/android-ndk-r17-beta2/sysroot/usr/include/arm-linux-androideabi&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-attribute&#34;&gt;NDK_x86_64_GCC&lt;/span&gt;=/usr/local/android-ndk-r17-beta2/toolchains/x86_64-4.9/prebuilt/linux-x86_64/bin/x86_64-linux-android-gcc&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-attribute&#34;&gt;HO_x86_64&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#34;--sysroot=/usr/local/android-ndk-r17-beta2/platforms/android-21/arch-x86_64 -isystem /usr/local/android-ndk-r17-beta2/sysroot/usr/include  -isystem /usr/local/android-ndk-r17-beta2/sysroot/usr/include/x86_64-linux-android&#34;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用指令验证下，有如下显示说明配置成功：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs sh&#34;&gt;$ &lt;span class=&#34;hljs-built_in&#34;&gt;source&lt;/span&gt; /etc/profile&lt;br&gt;$ ndk-build -v&lt;br&gt;GNU Make 3.81&lt;br&gt;Copyright (C) 2006  Free Software Foundation, Inc.&lt;br&gt;This is free software; see the &lt;span class=&#34;hljs-built_in&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; copying conditions.&lt;br&gt;There is NO warranty; not even &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; MERCHANTABILITY or FITNESS FOR A&lt;br&gt;PARTICULAR PURPOSE.&lt;br&gt;&lt;br&gt;This program built &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; x86_64-pc-linux-gnu&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里自己定义了编译工具和编译环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ARM*编译&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;```sh&lt;br&gt;$NDK_ARM_GCC $HO_ARM -pie ./main.c -o main&lt;br&gt;$NDK_ARM_GCC $HO_ARM -shared -fPIC test.c -o libTest.so # 动态链接库编译&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;&lt;br&gt;- **X86_64编译**：&lt;br&gt;&lt;br&gt;  - ```sh&lt;br&gt;    &lt;span class=&#34;hljs-variable&#34;&gt;$NDK_x86_64_GCC&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$HO_x86_64&lt;/span&gt; -static ./main.c -o main_x86_64 &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# 这里要加上static参数，否则程序会报错：error: Android 5.0 and later only support position-independent executables (-fPIE).&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里的编译选项和一般gcc差异不大，但要注意运行的目标安卓机器是x86还是arm。将编译好的程序使用adb push到目标机器上，后续可以进行愉快的注入编程了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;编程实现ptrace注入&#34;&gt;&lt;a href=&#34;#编程实现ptrace注入&#34; class=&#34;headerlink&#34; title=&#34;编程实现ptrace注入&#34;&gt;&lt;/a&gt;编程实现ptrace注入&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Attach模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	一般的attach模式的注入较为容易，找到pid和要修改的内存地址，直接修改即可，ptrace提供了强大的API。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;sys/ptrace.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;{&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Ptrace\n&#34;&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; pid = &lt;span class=&#34;hljs-number&#34;&gt;2994&lt;/span&gt;;	&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; val = &lt;span class=&#34;hljs-number&#34;&gt;1633771873&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; base_so_addr = &lt;span class=&#34;hljs-number&#34;&gt;0xd7d83000&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; string_addr = &lt;span class=&#34;hljs-number&#34;&gt;0x028334&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; address = base_so_addr + string_addr;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; ret = ptrace(PTRACE_ATTACH,pid,&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;,&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;PTRACE_ATTACH:%d\n&#34;&lt;/span&gt;,ret);&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// 查找相应的数据&lt;/span&gt;&lt;br&gt;	ret = ptrace(PTRACE_PEEKDATA,pid,address,&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;PTRACE_PEEKDATA:%x\n&#34;&lt;/span&gt;,ret);&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// 修改数据&lt;/span&gt;&lt;br&gt;	ret = ptrace(PTRACE_POKEDATA,pid,address,val);&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;sub  PTRACE_PEEKDATA:%x\n&#34;&lt;/span&gt;,ret);&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// 再次查看&lt;/span&gt;&lt;br&gt;	ret = ptrace(PTRACE_PEEKDATA,pid,address,&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;PTRACE_PEEKDATA:%x\n&#34;&lt;/span&gt;,ret);&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// detach pid&lt;/span&gt;&lt;br&gt;	ret = ptrace(PTRACE_DETACH,pid,&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;,&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;PTRACE_DETACH:%d\n&#34;&lt;/span&gt;,ret);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;spawn模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	有些程序的某些函数功能在启动之初就已经执行完毕，再使用attach一定来不及了。spawn模式的原理是ptrace到zygote进程，然后跟踪zygote进程的fork系统调用，如果fork出来的新进程是指定包名的app，那么detach掉zygote进程，进而跟踪目标app进程的系统调用。&lt;/p&gt;
&lt;p&gt;​	64位下有两个zygote，zygote64和zygote。64位应用的父进程是zygote64，它的pgid也是zygote64的pid；32位应用的父进程是zygote，它的pgid却是zygote64的pid。&lt;/p&gt;
&lt;p&gt;启动流程：&lt;/p&gt;
&lt;figure class=&#34;highlight xl&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xl&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;idle&lt;/span&gt;进程 -&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;init&lt;/span&gt;进程 -&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;zygote&lt;/span&gt;进程 -&amp;gt;&lt;/span&gt; system_server进程 →App进程&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;启动zygote&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;sys/ptrace.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;sys/user.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;linux/ptrace.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;dirent.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;getopt.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; BUF_SIZE 1024&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;getNameByPid&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;pid_t&lt;/span&gt; pid, &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *task_name)&lt;/span&gt; {&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; proc_pid_path[BUF_SIZE];&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; buf[BUF_SIZE];&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;sprintf&lt;/span&gt;(proc_pid_path, &lt;span class=&#34;hljs-string&#34;&gt;&#34;/proc/%d/status&#34;&lt;/span&gt;, pid);&lt;br&gt;    FILE* fp = fopen(proc_pid_path, &lt;span class=&#34;hljs-string&#34;&gt;&#34;r&#34;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt; != fp){&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( fgets(buf, BUF_SIZE&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;, fp)== &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt; ){&lt;br&gt;            fclose(fp);&lt;br&gt;        }&lt;br&gt;        fclose(fp);&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;(buf, &lt;span class=&#34;hljs-string&#34;&gt;&#34;%*s %s&#34;&lt;/span&gt;, task_name);&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;{&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;         status;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;         success = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;pid_t&lt;/span&gt;       wait_pid; &lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;pid_t&lt;/span&gt;       target_pid = &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; zygote_pid = &lt;span class=&#34;hljs-number&#34;&gt;1398&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// zygote进程的pid&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;  appname[&lt;span class=&#34;hljs-number&#34;&gt;128&lt;/span&gt;] = &lt;span class=&#34;hljs-string&#34;&gt;&#34;com.example.x86demo&#34;&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// app的包名称&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Ptrace Zygote\n&#34;&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; res = ptrace(PTRACE_ATTACH,zygote_pid,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(res == &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;){&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;res: %d\n&#34;&lt;/span&gt;,res);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;hook zygote error\n&#34;&lt;/span&gt;);&lt;br&gt;	}&lt;br&gt;	waitpid(zygote_pid, &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// 拦截zygote的fork操作&lt;/span&gt;&lt;br&gt;	res = ptrace(PTRACE_SETOPTIONS, zygote_pid, (&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *)&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, (&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *)(PTRACE_O_TRACEFORK));&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;ptrace zygote PTRACE_O_TRACEFORK res: %d\n&#34;&lt;/span&gt;,res);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (res == &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;) {&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;FATAL ERROR: ptrace(PTRACE_SETOPTIONS, ...)\n&#34;&lt;/span&gt;);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;        }&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// 恢复zygote的运行&lt;/span&gt;&lt;br&gt;	ptrace(PTRACE_CONT, zygote_pid, (&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *)&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;zygote continue \n&#34;&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (;;) {&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;// fork后子进程的pid&lt;/span&gt;&lt;br&gt;            wait_pid = waitpid(&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;, &amp;amp;status, __WALL | WUNTRACED);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(status&amp;gt;&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt; == (SIGTRAP | (PTRACE_EVENT_FORK&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;))){&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;fork出子进程 status&amp;gt;&amp;gt;8 == (SIGTRAP | (PTRACE_EVENT_FORK&amp;lt;&amp;lt;8)) %d\n&#34;&lt;/span&gt;,wait_pid);&lt;br&gt;            }&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (wait_pid==zygote_pid){ &lt;span class=&#34;hljs-comment&#34;&gt;//如果发出信号进程的进程号跟pid一致，则说明它是被跟踪程序的父进程，否则是被跟踪程序的子进程&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(WIFSTOPPED(status)){&lt;br&gt;                    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;zygote continue \n&#34;&lt;/span&gt;);&lt;br&gt;                    ptrace(PTRACE_CONT,wait_pid,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;                    &lt;span class=&#34;hljs-keyword&#34;&gt;continue&lt;/span&gt;;&lt;br&gt;                }&lt;br&gt;            }&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;// 判断fork后的程序是不是我们指定的应用&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (wait_pid != &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; wait_pid!=zygote_pid){&lt;br&gt;                &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; name[&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;]={&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;};&lt;br&gt;                getNameByPid(wait_pid,name);&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;wait_pid: %d,name: %s\n&#34;&lt;/span&gt;,wait_pid,name);&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;strstr&lt;/span&gt;(appname, name) != &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) {&lt;br&gt;                    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;匹配到appname: %s\n&#34;&lt;/span&gt;,appname);&lt;br&gt;                    &lt;span class=&#34;hljs-comment&#34;&gt;// detach from zygote&lt;/span&gt;&lt;br&gt;                    ptrace(PTRACE_DETACH, zygote_pid, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, (&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *)SIGCONT);&lt;br&gt;                    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Detach from zygote\n&#34;&lt;/span&gt;);&lt;br&gt;                    &lt;span class=&#34;hljs-comment&#34;&gt;// now perform on new process&lt;/span&gt;&lt;br&gt;                    target_pid = wait_pid;&lt;br&gt;                    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;appname: %s pid: %d\n&#34;&lt;/span&gt;,appname,target_pid);&lt;br&gt;                    success = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;                    &lt;span class=&#34;hljs-comment&#34;&gt;// 拦截目标进程的clone和exit,clone重要 exit调试用&lt;/span&gt;&lt;br&gt;                    res = ptrace(PTRACE_SETOPTIONS, target_pid, (&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *)&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, (&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *)(PTRACE_O_TRACECLONE|PTRACE_O_TRACEEXIT|PTRACE_O_TRACEVFORK));&lt;br&gt;                    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;ptrace PTRACE_O_TRACECLONE|PTRACE_O_TRACEEXIT res: %d\n&#34;&lt;/span&gt;,res);&lt;br&gt;                    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (res == &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;) {&lt;br&gt;                        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;FATAL ERROR: ptrace(PTRACE_SETOPTIONS, ...)\n&#34;&lt;/span&gt;);&lt;br&gt;                        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;                    }&lt;br&gt;                    &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;                } &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; {&lt;br&gt;                    &lt;span class=&#34;hljs-comment&#34;&gt;// 不是的话就continue&lt;/span&gt;&lt;br&gt;                    ptrace(PTRACE_SYSCALL, wait_pid, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;                    &lt;span class=&#34;hljs-keyword&#34;&gt;continue&lt;/span&gt;;&lt;br&gt;                }&lt;br&gt;            }&lt;br&gt;        }&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a href=&#34;#参考链接&#34; class=&#34;headerlink&#34; title=&#34;参考链接&#34;&gt;&lt;/a&gt;参考链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.xjx100.cn/news/510354.html?action=onClick&#34;&gt;https://www.xjx100.cn/news/510354.html?action=onClick&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://alazymechnaic.github.io/2023/04/27/dan-zi-jie-yi-chu-one-byte-overflow/</guid>
            <title>单字节溢出（one-byte-overflow）</title>
            <link>https://alazymechnaic.github.io/2023/04/27/dan-zi-jie-yi-chu-one-byte-overflow/</link>
            <category>binary</category>
            <pubDate>Thu, 27 Apr 2023 19:40:42 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;off-By-One-缓冲区溢出&#34;&gt;&lt;a href=&#34;#off-By-One-缓冲区溢出&#34; class=&#34;headerlink&#34; title=&#34;off-By-One 缓冲区溢出&#34;&gt;&lt;/a&gt;off-By-One 缓冲区溢出&lt;/h2&gt;&lt;h3 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​	本文用于填补先前对于二进制漏洞一些理解上的不足，学习off-by-one的漏洞利用方式。&lt;strong&gt;缓冲区溢出的终极目的在于获取目标机器的权限，但是获取权限未必只要一种方式，你可以添加用户，反弹shell、开启一个新的网络链接等&lt;/strong&gt;。主要参考：&lt;a href=&#34;https://sploitfun.wordpress.com/2015/06/07/off-by-one-vulnerability-stack-based-2/&#34;&gt;https://sploitfun.wordpress.com/2015/06/07/off-by-one-vulnerability-stack-based-2/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;单字节溢出案例&#34;&gt;&lt;a href=&#34;#单字节溢出案例&#34; class=&#34;headerlink&#34; title=&#34;单字节溢出案例&#34;&gt;&lt;/a&gt;单字节溢出案例&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* arg)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* arg)&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* arg)&lt;/span&gt; {&lt;br&gt; bar(arg); &lt;span class=&#34;hljs-comment&#34;&gt;/* [1] */&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* arg)&lt;/span&gt; {&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;];&lt;br&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;strcpy&lt;/span&gt;(buf, arg); &lt;span class=&#34;hljs-comment&#34;&gt;/* [2] */&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; {&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;strlen&lt;/span&gt;(argv[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;])&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;) { &lt;span class=&#34;hljs-comment&#34;&gt;/* [3] */&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Attempted Buffer Overflow\n&#34;&lt;/span&gt;);&lt;br&gt;  fflush(&lt;span class=&#34;hljs-built_in&#34;&gt;stdout&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt; }&lt;br&gt; foo(argv[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]); &lt;span class=&#34;hljs-comment&#34;&gt;/* [4] */&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​	&lt;strong&gt;当目标缓冲区大小与写入长度相一致时，会出现单字节溢出&lt;/strong&gt;，因为在strcpy的处理过程中，将传入的参数都视为视为是字符串，默认会在复制过后在末尾添加一个字节的0x00，因此会向buffer的第256个位置处写0x00。	&lt;/p&gt;
&lt;p&gt;​	该操作会向下一个位置中写入0x00，下一个位置有可能就是ebp的存储位置，其实也就是栈区基地址。但是只能更改一个字节，其实也就是ebp指针的最低字节，当前过程在退出的过程中，执行leave指令，会将被修改后的ebp写入到寄存器中。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;栈基址&lt;/strong&gt;的高位迁移。由于只能向ebp的低字节中写入一个0，也就是稳定会将ebp抬高，从而更改栈的位置。当前ebp的较高位置其实就是用于存放当前函数临时变量的位置，其实也就控制了栈。在上述例子中，在foo函数中完成了栈的抬升，将栈设置到可控区域中。在main函数退出时就会取出错误的返回地址return，进行间接的控制流劫持操作。&lt;/p&gt;
&lt;h3 id=&#34;栈迁移不可用的情况&#34;&gt;&lt;a href=&#34;#栈迁移不可用的情况&#34; class=&#34;headerlink&#34; title=&#34;栈迁移不可用的情况&#34;&gt;&lt;/a&gt;栈迁移不可用的情况&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;单字节溢出无法影响ebp&lt;/strong&gt;：如果本身当前的缓冲区在ebp之上，但是并不能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;栈基地址的低位本身就是0x00&lt;/strong&gt;：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;程序本身存在16字节对齐的情况&lt;/strong&gt;：其实默认情况下gcc编译器都会对程序进行16字节的对齐，因此在创建堆栈空间之前会将esp的最后四个位进行清零操作。（因为最后四位正好是表示16个字节&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs assembly&#34;&gt;0x08048497 &amp;lt;+0&amp;gt;: push %ebp&lt;br&gt;0x08048498 &amp;lt;+1&amp;gt;: mov %esp,%ebp&lt;br&gt;0x0804849a &amp;lt;+3&amp;gt;: push %edi&lt;br&gt;0x0804849b &amp;lt;+4&amp;gt;: and $0xfffffff0,%esp               //Stack space aligned to 16 byte boundary&lt;br&gt;0x0804849e &amp;lt;+7&amp;gt;: sub $0x20,%esp   &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于栈迁移请参考该位置&lt;a href=&#34;https://alazymechnaic.github.io/2023/05/02/bypass-nx/&#34;&gt;https://alazymechnaic.github.io/2023/05/02/bypass-nx/&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
