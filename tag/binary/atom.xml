<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://alazymechnaic.github.io</id>
    <title>alazymachine • Posts by &#34;binary&#34; tag</title>
    <link href="https://alazymechnaic.github.io" />
    <updated>2023-04-27T11:40:42.000Z</updated>
    <category term="paper" />
    <category term="fuzz" />
    <category term="arm" />
    <category term="Linux" />
    <category term="C" />
    <category term="go" />
    <category term="Paper" />
    <category term="bypass" />
    <category term="clash" />
    <category term="Hook" />
    <category term="go, RE" />
    <category term="kernel pwn" />
    <category term="binary" />
    <category term="writing" />
    <category term="HEAP PWN CTF" />
    <category term="Android" />
    <category term="dataflow" />
    <category term="pwn" />
    <entry>
        <id>https://alazymechnaic.github.io/2023/04/27/one-byte-overflow/</id>
        <title>one_byte_overflow</title>
        <link rel="alternate" href="https://alazymechnaic.github.io/2023/04/27/one-byte-overflow/"/>
        <content type="html">&lt;h2 id=&#34;off-By-One-缓冲区溢出&#34;&gt;&lt;a href=&#34;#off-By-One-缓冲区溢出&#34; class=&#34;headerlink&#34; title=&#34;off-By-One 缓冲区溢出&#34;&gt;&lt;/a&gt;off-By-One 缓冲区溢出&lt;/h2&gt;&lt;h3 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​	本文用于填补先前对于二进制漏洞一些理解上的不足，学习off-by-one的漏洞利用方式。&lt;strong&gt;缓冲区溢出的终极目的在于获取目标机器的权限，但是获取权限未必只要一种方式，你可以添加用户，反弹shell、开启一个新的网络链接等&lt;/strong&gt;。主要参考：&lt;a href=&#34;https://sploitfun.wordpress.com/2015/06/07/off-by-one-vulnerability-stack-based-2/&#34;&gt;https://sploitfun.wordpress.com/2015/06/07/off-by-one-vulnerability-stack-based-2/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;单字节溢出案例&#34;&gt;&lt;a href=&#34;#单字节溢出案例&#34; class=&#34;headerlink&#34; title=&#34;单字节溢出案例&#34;&gt;&lt;/a&gt;单字节溢出案例&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* arg)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* arg)&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* arg)&lt;/span&gt; {&lt;br&gt; bar(arg); &lt;span class=&#34;hljs-comment&#34;&gt;/* [1] */&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* arg)&lt;/span&gt; {&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;];&lt;br&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;strcpy&lt;/span&gt;(buf, arg); &lt;span class=&#34;hljs-comment&#34;&gt;/* [2] */&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; {&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;strlen&lt;/span&gt;(argv[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;])&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;) { &lt;span class=&#34;hljs-comment&#34;&gt;/* [3] */&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Attempted Buffer Overflow\n&#34;&lt;/span&gt;);&lt;br&gt;  fflush(&lt;span class=&#34;hljs-built_in&#34;&gt;stdout&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt; }&lt;br&gt; foo(argv[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]); &lt;span class=&#34;hljs-comment&#34;&gt;/* [4] */&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​	&lt;strong&gt;当目标缓冲区大小与写入长度相一致时，会出现单字节溢出&lt;/strong&gt;，因为在strcpy的处理过程中，将传入的参数都视为视为是字符串，默认会在复制过后在末尾添加一个字节的0x00，因此会向buffer的第256个位置处写0x00。	&lt;/p&gt;
&lt;p&gt;​	该操作会向下一个位置中写入0x00，下一个位置有可能就是ebp的存储位置，其实也就是栈区基地址。但是只能更改一个字节，其实也就是ebp指针的最低字节，当前过程在退出的过程中，执行leave指令，会将被修改后的ebp写入到寄存器中。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;栈基址&lt;/strong&gt;的高位迁移。由于只能向ebp的低字节中写入一个0，也就是稳定会将ebp抬高，从而更改栈的位置。当前ebp的较高位置其实就是用于存放当前函数临时变量的位置，其实也就控制了栈。在上述例子中，在foo函数中完成了栈的抬升，将栈设置到可控区域中。在main函数退出时就会取出错误的返回地址return，进行间接的控制流劫持操作。&lt;/p&gt;
&lt;h3 id=&#34;栈迁移不可用的情况&#34;&gt;&lt;a href=&#34;#栈迁移不可用的情况&#34; class=&#34;headerlink&#34; title=&#34;栈迁移不可用的情况&#34;&gt;&lt;/a&gt;栈迁移不可用的情况&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;单字节溢出无法影响ebp&lt;/strong&gt;：如果本身当前的缓冲区在ebp之上，但是并不能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;栈基地址的低位本身就是0x00&lt;/strong&gt;：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;程序本身存在16字节对齐的情况&lt;/strong&gt;：其实默认情况下gcc编译器都会对程序进行16字节的对齐，因此在创建堆栈空间之前会将esp的最后四个位进行清零操作。（因为最后四位正好是表示16个字节&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs assembly&#34;&gt;0x08048497 &amp;lt;+0&amp;gt;: push %ebp&lt;br&gt;0x08048498 &amp;lt;+1&amp;gt;: mov %esp,%ebp&lt;br&gt;0x0804849a &amp;lt;+3&amp;gt;: push %edi&lt;br&gt;0x0804849b &amp;lt;+4&amp;gt;: and $0xfffffff0,%esp               //Stack space aligned to 16 byte boundary&lt;br&gt;0x0804849e &amp;lt;+7&amp;gt;: sub $0x20,%esp   &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于栈迁移请参考该位置&lt;a href=&#34;https://alazymechnaic.github.io/2023/05/02/bypass-nx/&#34;&gt;https://alazymechnaic.github.io/2023/05/02/bypass-nx/&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="binary" />
        <updated>2023-04-27T11:40:42.000Z</updated>
    </entry>
</feed>
