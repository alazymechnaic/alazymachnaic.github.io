<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://alazymechnaic.github.io</id>
    <title>alazymachine • Posts by &#34;算法&#34; tag</title>
    <link href="https://alazymechnaic.github.io" />
    <updated>2024-03-06T06:47:54.000Z</updated>
    <category term="paper" />
    <category term="fuzz" />
    <category term="arm" />
    <category term="Linux" />
    <category term="C" />
    <category term="go" />
    <category term="Paper" />
    <category term="bypass" />
    <category term="clash" />
    <category term="Hook" />
    <category term="go, RE" />
    <category term="kernel pwn" />
    <category term="binary" />
    <category term="writing" />
    <category term="HEAP PWN CTF" />
    <category term="Android" />
    <category term="dataflow" />
    <category term="pwn" />
    <category term="java" />
    <category term="web" />
    <category term="exploit" />
    <category term="network" />
    <category term="代码分析" />
    <category term="二进制安全" />
    <category term="渗透" />
    <category term="程序分析" />
    <category term="stack overflow" />
    <category term="算法" />
    <entry>
        <id>https://alazymechnaic.github.io/2024/03/06/wang-an-xuan-shou-de-suan-fa-ji-chu/</id>
        <title>网安选手的算法基础</title>
        <link rel="alternate" href="https://alazymechnaic.github.io/2024/03/06/wang-an-xuan-shou-de-suan-fa-ji-chu/"/>
        <content type="html">&lt;h2 id=&#34;链&#34;&gt;&lt;a href=&#34;#链&#34; class=&#34;headerlink&#34; title=&#34;链&#34;&gt;&lt;/a&gt;链&lt;/h2&gt;&lt;h3 id=&#34;单链表逆置&#34;&gt;&lt;a href=&#34;#单链表逆置&#34; class=&#34;headerlink&#34; title=&#34;单链表逆置&#34;&gt;&lt;/a&gt;单链表逆置&lt;/h3&gt;&lt;h3 id=&#34;二分查找&#34;&gt;&lt;a href=&#34;#二分查找&#34; class=&#34;headerlink&#34; title=&#34;二分查找&#34;&gt;&lt;/a&gt;二分查找&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;searchInsert&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;* nums, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; numsSize, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; target)&lt;/span&gt;{&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; left=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,right=numsSize&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(left&amp;lt;=right){ &lt;span class=&#34;hljs-comment&#34;&gt;// 这里注意是存在等于号&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; mid=(left+right)/&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(nums[mid]==target)&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; mid;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(nums[mid]&amp;gt;target)&lt;br&gt;            right=mid&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;; &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(nums[mid]&amp;lt;target)&lt;br&gt;            left=mid+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;    }&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; left; &lt;span class=&#34;hljs-comment&#34;&gt;// 这里注意是left&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;树&#34;&gt;&lt;a href=&#34;#树&#34; class=&#34;headerlink&#34; title=&#34;树&#34;&gt;&lt;/a&gt;树&lt;/h2&gt;&lt;h3 id=&#34;二叉树的中序遍历&#34;&gt;&lt;a href=&#34;#二叉树的中序遍历&#34; class=&#34;headerlink&#34; title=&#34;二叉树的中序遍历&#34;&gt;&lt;/a&gt;二叉树的中序遍历&lt;/h3&gt;&lt;h4 id=&#34;递归方法&#34;&gt;&lt;a href=&#34;#递归方法&#34; class=&#34;headerlink&#34; title=&#34;递归方法&#34;&gt;&lt;/a&gt;递归方法&lt;/h4&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;mid_show&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; TreeNode* root, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;* returnSize, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *returnNum)&lt;/span&gt;{&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(root == &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;   	&lt;span class=&#34;hljs-string&#34;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;br&gt;        前中后序的遍历按照下面的方式换顺序即可&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;br&gt;    mid_show(root-&amp;gt;left, returnSize, returnNum);&lt;br&gt;    returnNum[(*returnSize)++] = root-&amp;gt;val;&lt;br&gt;    mid_show(root-&amp;gt;right, returnSize, returnNum);&lt;br&gt;}&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;* &lt;span class=&#34;hljs-title function_&#34;&gt;inorderTraversal&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; TreeNode* root, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;* returnSize)&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//树中节点数目在范围 [0, 100] 内&lt;/span&gt;&lt;br&gt;    *returnSize = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *returnNum = (&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;)*&lt;span class=&#34;hljs-number&#34;&gt;101&lt;/span&gt;);&lt;br&gt;    mid_show(root,returnSize,returnNum);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; returnNum;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;非递归方法&#34;&gt;&lt;a href=&#34;#非递归方法&#34; class=&#34;headerlink&#34; title=&#34;非递归方法&#34;&gt;&lt;/a&gt;非递归方法&lt;/h4&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;* &lt;span class=&#34;hljs-title function_&#34;&gt;inorderTraversal&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; TreeNode* root, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;* returnSize)&lt;/span&gt; {&lt;br&gt;    *returnSize = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;* res = &lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;) * &lt;span class=&#34;hljs-number&#34;&gt;501&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// 返回结果&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;TreeNode&lt;/span&gt;** &lt;span class=&#34;hljs-title&#34;&gt;stk&lt;/span&gt; =&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; TreeNode*) * &lt;span class=&#34;hljs-number&#34;&gt;501&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// 生成一个栈&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; top = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (root != &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt; || top &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) {&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (root != &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;) {&lt;br&gt;            stk[top++] = root;&lt;br&gt;            root = root-&amp;gt;left;&lt;br&gt;        }&lt;br&gt;        root = stk[--top];&lt;br&gt;        res[(*returnSize)++] = root-&amp;gt;val;&lt;br&gt;        root = root-&amp;gt;right;&lt;br&gt;    }&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; res;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;二叉树的最大深度&#34;&gt;&lt;a href=&#34;#二叉树的最大深度&#34; class=&#34;headerlink&#34; title=&#34;二叉树的最大深度&#34;&gt;&lt;/a&gt;二叉树的最大深度&lt;/h3&gt;&lt;h4 id=&#34;递归方法-1&#34;&gt;&lt;a href=&#34;#递归方法-1&#34; class=&#34;headerlink&#34; title=&#34;递归方法&#34;&gt;&lt;/a&gt;递归方法&lt;/h4&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;maxDepth&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; TreeNode *root)&lt;/span&gt; {&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    	对于每个节点来说，该结点的最大高度等于其左右子树的最大高度之一&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (root == &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;) &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; fmax(maxDepth(root-&amp;gt;left), maxDepth(root-&amp;gt;right)) + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;图&#34;&gt;&lt;a href=&#34;#图&#34; class=&#34;headerlink&#34; title=&#34;图&#34;&gt;&lt;/a&gt;图&lt;/h2&gt;</content>
        <category term="算法" />
        <updated>2024-03-06T06:47:54.000Z</updated>
    </entry>
</feed>
