{
    "version": "https://jsonfeed.org/version/1",
    "title": "alazymachine • All posts by \"android\" tag",
    "description": "",
    "home_page_url": "https://alazymechnaic.github.io",
    "items": [
        {
            "id": "https://alazymechnaic.github.io/2023/10/02/an-zhuo-hook/",
            "url": "https://alazymechnaic.github.io/2023/10/02/an-zhuo-hook/",
            "title": "安卓hook",
            "date_published": "2023-10-02T13:20:06.000Z",
            "content_html": "<h1 id=\"移动安全开发\"><a href=\"#移动安全开发\" class=\"headerlink\" title=\"移动安全开发\"></a>移动安全开发</h1><hr>\n<h2 id=\"定制化外挂的开发流程\"><a href=\"#定制化外挂的开发流程\" class=\"headerlink\" title=\"定制化外挂的开发流程\"></a>定制化外挂的开发流程</h2><ul>\n<li>逆向分析游戏逻辑</li>\n<li>验证外挂功能可行性：程序中可能存在对数据的校验，导致外挂不可行。</li>\n<li>注入游戏进程：获得root，使用ptrace方式注入游戏进程。</li>\n<li>枚举游戏进程模块信息：游戏进程在运行过程中会加载许多模块，定制化外挂需要获取游戏主逻辑模块的基地址，在Android中可以读取/proc/$pid/maps文件获取游戏进程中当前加载的所有模块名称、基址、权限等信息。<ul>\n<li>Hook游戏关键函数</li>\n<li>游戏内存数据修改</li>\n</ul>\n</li>\n<li>实现外挂功能</li>\n</ul>\n<h2 id=\"Hook技术实现\"><a href=\"#Hook技术实现\" class=\"headerlink\" title=\"Hook技术实现\"></a>Hook技术实现</h2><p>​\thook的前提是已经注入到目标进程后。hook的目的是在关键函数的执行前，执行预先设置的钩子函数，从而达到监控函数调用、改变函数功能的目的。</p>\n<h3 id=\"hook分类\"><a href=\"#hook分类\" class=\"headerlink\" title=\"hook分类\"></a>hook分类</h3><ul>\n<li>native hook: <ul>\n<li>基于汇编代码替换的hook技术：<ul>\n<li>异常hook</li>\n<li>inline hook</li>\n</ul>\n</li>\n<li>函数地址替换：<ul>\n<li>导入表hook</li>\n<li>虚表hook</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"inline-hook\"><a href=\"#inline-hook\" class=\"headerlink\" title=\"inline hook\"></a>inline hook</h3><p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202310031445483.png\" alt=\"image-20231003144538379\"></p>\n<p>使用inline hook的流程并不复杂，而是保持原先的指令替换原则，将某条指令替换为跳转指令，将其指向插入的底层桩函数，在其中保存上下文，并实现自定义的函数调用，最后还原上下文后并继续向下执行。这里注意，ARM架构下插入跳转指令时，由于指令长度限制，没有办法进行直接寻址，可以采用将地址保存在寄存器中，进行寄存器间接寻址的方式。</p>\n<h3 id=\"导入表hook\"><a href=\"#导入表hook\" class=\"headerlink\" title=\"导入表hook\"></a>导入表hook</h3><h3 id=\"基于异常的hook\"><a href=\"#基于异常的hook\" class=\"headerlink\" title=\"基于异常的hook\"></a>基于异常的hook</h3><p>采用的方法是signal + 非法指令的方式，在想要hook的地方触发异常，并捕获。在异常处理函数中捕获上下文的异常信息。</p>\n<ul>\n<li>首先对目标地址写入异常指令，同时注册异常处理函数来获取执行时机。</li>\n<li>当目标地址触发异常时，需要恢复目标地址的异常指令，同时设置目标地址的下一条指令为异常指令</li>\n<li>当目标地址的下一条指令触发异常时，需要将目标地址的正常指令篡改为异常指令，从而获取下次异常Hook的执行时机。</li>\n</ul>\n<h2 id=\"遍历游戏模块\"><a href=\"#遍历游戏模块\" class=\"headerlink\" title=\"遍历游戏模块\"></a>遍历游戏模块</h2><h3 id=\"基于maps、smaps实现的文件遍历模块\"><a href=\"#基于maps、smaps实现的文件遍历模块\" class=\"headerlink\" title=\"基于maps、smaps实现的文件遍历模块\"></a>基于maps、smaps实现的文件遍历模块</h3><p>​\t进程的内存模块信息存放在proc文件系统下，以pid为目录名称的maps文件，其中存放了每个进程的内存布局，注意这里要有root权限。</p>\n<h3 id=\"基于map-files目录实现的模块遍历\"><a href=\"#基于map-files目录实现的模块遍历\" class=\"headerlink\" title=\"基于map_files目录实现的模块遍历\"></a>基于map_files目录实现的模块遍历</h3><p>​\t在proc/pid/map_files文件夹中的软连接进行查看，</p>\n<h3 id=\"基于dl-iterate-phdr函数遍历模块\"><a href=\"#基于dl-iterate-phdr函数遍历模块\" class=\"headerlink\" title=\"基于dl_iterate_phdr函数遍历模块\"></a>基于dl_iterate_phdr函数遍历模块</h3><p>​\t该函数能够列出进程中的共享模块，可以得到模块的路径和地址。</p>\n<h3 id=\"dladdr函数获取指定模块的基址\"><a href=\"#dladdr函数获取指定模块的基址\" class=\"headerlink\" title=\"dladdr函数获取指定模块的基址\"></a>dladdr函数获取指定模块的基址</h3>",
            "tags": [
                "Android"
            ]
        }
    ]
}