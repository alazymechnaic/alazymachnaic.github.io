{
    "version": "https://jsonfeed.org/version/1",
    "title": "alazymachine • All posts by \"go, re\" tag",
    "description": "",
    "home_page_url": "https://alazymechnaic.github.io",
    "items": [
        {
            "id": "https://alazymechnaic.github.io/2023/07/20/go-reverse/",
            "url": "https://alazymechnaic.github.io/2023/07/20/go-reverse/",
            "title": "go_reverse",
            "date_published": "2023-07-20T11:50:06.000Z",
            "content_html": "<h2 id=\"GO-reverse\"><a href=\"#GO-reverse\" class=\"headerlink\" title=\"GO  reverse\"></a>GO  reverse</h2><hr>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>​\tGO语言是谷歌开发的强类型静态静态语言，其编译出的汇编代码与 C/ C++语言存在极大的差异。本身Go在编译过程中将所有的库函数和第三方包都进行了静态的打包操作，还打包进去了自身的runtime和（Garbage Collection， 垃圾回收）模块部分代码，导致其编译后的二进制文件体积十分庞大，存在较大的分析难度。</p>\n<h3 id=\"Go语言特性\"><a href=\"#Go语言特性\" class=\"headerlink\" title=\"Go语言特性\"></a>Go语言特性</h3><ul>\n<li><strong>独有的数据表示方式</strong>： 例如String类型使用，（start_address，length）二元组进行表示，导致其在进行函数调用时，传入的内容由原本C中的字符串地址变为了两个参数。</li>\n<li><strong>独有的栈管理机制</strong>：Go语言中的栈使用continue stack机制，每个runtime在初始状态下分配一个较小的区域当做栈，每次运行时如果栈不够用了就再申请一个更大的栈，将旧栈中的内容复制进去。</li>\n<li><strong>全静态链接</strong>：程序中并不按照函数名对库函数进行动态使用，而是进行全静态链接，在没有调试信息和符号表的情况下调试难度很大</li>\n<li><strong>独有的函数调用机制</strong>：Go语言函数中的callee的栈空间由caller来进行管理，caller在进入callee之前预先将栈中把参数留出，同时还要给返回值留出栈空间</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL21lbWJlci5odG1sP21lbWJlcklkPTEyMjA3OQ==\">https://www.anquanke.com/member.html?memberId=122079</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TWpNNU5UYzJNRFl4TXc9PSZtaWQ9MjQ1ODM4NzExNiZpZHg9MSZzbj1jNjY4ZGFlYTMwYmM5ZGNlOGQ3OWQzMTZlOTM5OTNlNCZjaGtzbT1iMThmMzIyNjg2ZjhiYjMwZTgxYjc0NjQ0NmYwOGRjZDM4MWE1ODhiNWMwYzZiODQyMDA3Y2M4MjJhODc1YmQ1ZWQxNGMyZDc0ZDZhJnNjZW5lPTI3\">https://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;mid=2458387116&amp;idx=1&amp;sn=c668daea30bc9dce8d79d316e93993e4&amp;chksm=b18f322686f8bb30e81b746446f08dcd381a588b5c0c6b842007cc822a875bd5ed14c2d74d6a&amp;scene=27</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2xlYW5vdGUuY29tL2Jsb2cvcG9zdC81YzY0YmIyYmFiNjQ0MTUxNjcwMDBmNDg=\">http://leanote.com/blog/post/5c64bb2bab64415167000f48</span></p>\n",
            "tags": [
                "go, RE"
            ]
        }
    ]
}