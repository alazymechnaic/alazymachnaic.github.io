<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>alazymachine • Posts by &#34;go, re&#34; tag</title>
        <link>https://alazymechnaic.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Thu, 20 Jul 2023 19:50:06 +0800</pubDate>
        <lastBuildDate>Thu, 20 Jul 2023 19:50:06 +0800</lastBuildDate>
        <category>paper</category>
        <category>HEAP PWN CTF</category>
        <category>pwn</category>
        <category>Linux</category>
        <category>Paper</category>
        <category>fuzz</category>
        <category>bypass</category>
        <category>clash</category>
        <category>go, RE</category>
        <category>kernel pwn</category>
        <category>binary</category>
        <category>C</category>
        <category>dataflow</category>
        <category>Android</category>
        <category>arm</category>
        <category>Hook</category>
        <category>go</category>
        <category>writing</category>
        <item>
            <guid isPermalink="true">https://alazymechnaic.github.io/2023/07/20/go-yu-yan-reverse/</guid>
            <title>go_reverse</title>
            <link>https://alazymechnaic.github.io/2023/07/20/go-yu-yan-reverse/</link>
            <category>go, RE</category>
            <pubDate>Thu, 20 Jul 2023 19:50:06 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;GO-reverse&#34;&gt;&lt;a href=&#34;#GO-reverse&#34; class=&#34;headerlink&#34; title=&#34;GO  reverse&#34;&gt;&lt;/a&gt;GO  reverse&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;​	GO语言是谷歌开发的强类型静态静态语言，其编译出的汇编代码与 C/ C++语言存在极大的差异。本身Go在编译过程中将所有的库函数和第三方包都进行了静态的打包操作，还打包进去了自身的runtime和（Garbage Collection， 垃圾回收）模块部分代码，导致其编译后的二进制文件体积十分庞大，存在较大的分析难度。&lt;/p&gt;
&lt;h3 id=&#34;Go语言特性&#34;&gt;&lt;a href=&#34;#Go语言特性&#34; class=&#34;headerlink&#34; title=&#34;Go语言特性&#34;&gt;&lt;/a&gt;Go语言特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;独有的数据表示方式&lt;/strong&gt;： 例如String类型使用，（start_address，length）二元组进行表示，导致其在进行函数调用时，传入的内容由原本C中的字符串地址变为了两个参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;独有的栈管理机制&lt;/strong&gt;：Go语言中的栈使用continue stack机制，每个runtime在初始状态下分配一个较小的区域当做栈，每次运行时如果栈不够用了就再申请一个更大的栈，将旧栈中的内容复制进去。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全静态链接&lt;/strong&gt;：程序中并不按照函数名对库函数进行动态使用，而是进行全静态链接，在没有调试信息和符号表的情况下调试难度很大&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;独有的函数调用机制&lt;/strong&gt;：Go语言函数中的callee的栈空间由caller来进行管理，caller在进入callee之前预先将栈中把参数留出，同时还要给返回值留出栈空间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.anquanke.com/member.html?memberId=122079&#34;&gt;https://www.anquanke.com/member.html?memberId=122079&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;amp;mid=2458387116&amp;amp;idx=1&amp;amp;sn=c668daea30bc9dce8d79d316e93993e4&amp;amp;chksm=b18f322686f8bb30e81b746446f08dcd381a588b5c0c6b842007cc822a875bd5ed14c2d74d6a&amp;amp;scene=27&#34;&gt;https://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;amp;mid=2458387116&amp;amp;idx=1&amp;amp;sn=c668daea30bc9dce8d79d316e93993e4&amp;amp;chksm=b18f322686f8bb30e81b746446f08dcd381a588b5c0c6b842007cc822a875bd5ed14c2d74d6a&amp;amp;scene=27&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://leanote.com/blog/post/5c64bb2bab64415167000f48&#34;&gt;http://leanote.com/blog/post/5c64bb2bab64415167000f48&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
