{
    "version": "https://jsonfeed.org/version/1",
    "title": "alazymachine • All posts by \"kernel pwn\" tag",
    "description": "",
    "home_page_url": "https://alazymechnaic.github.io",
    "items": [
        {
            "id": "https://alazymechnaic.github.io/2023/07/13/kernel-pwn/",
            "url": "https://alazymechnaic.github.io/2023/07/13/kernel-pwn/",
            "title": "kernel_pwn",
            "date_published": "2023-07-13T12:41:24.000Z",
            "content_html": "<h2 id=\"Kernel-PWN\"><a href=\"#Kernel-PWN\" class=\"headerlink\" title=\"Kernel PWN\"></a>Kernel PWN</h2><hr>\n<p><img data-src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202309172016734.png\" alt=\"image-20230713204349079\"></p>\n<h3 id=\"内核保护技术\"><a href=\"#内核保护技术\" class=\"headerlink\" title=\"内核保护技术\"></a>内核保护技术</h3><ul>\n<li><p><strong>SMAP/SMEP</strong>: </p>\n<ul>\n<li><em>arm里面叫PXN(Privilege Execute Never)和PAN(Privileged Access Never)。</em><ul>\n<li>SMAP(Supervisor Mode Access Prevention，管理模式访问保护): 禁止内核访问用户空间数据</li>\n<li>SMEP(Supervisor Mode Execution Prevention，管理模式执行保护): 禁止内核访问用户代码区域</li>\n<li>使用cat /proc/cpuinfo指令查看当前程序中存在的SMAP/SMEP功能是否支持，<strong>win8之后开始支持SMEP，并且在RC4中设置适当的位来表示应该强制执行SMEP，可以通过ROP或者jmp到一个RWX的内核地址来绕过</strong>。linux内核从3.0开始支持SMEP，3.7开始支持SMAP。</li>\n</ul>\n</li>\n<li>ret2User: 在没有SMAP/SMEP保护的情况下将内核指针重定向到用户空间进行漏洞利用</li>\n<li>ret2dir:  physmap区域由内核管理并且由虚拟地址直接映射到物理地址。（也就时可以直接访问实际物理内存的内容）。在用户进行vmmap操作的时候，有很大概率能够将当前内存写入到该物理内存中，而内核又是可以直接访问该区域的，因此可以bypass SMAP/SMEP 参考文献： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zYzY2MmI2MTYzYTc=\">https://www.jianshu.com/p/3c662b6163a7</span></li>\n</ul>\n</li>\n<li><p><strong>stack protector</strong>:  在编译内核时选择<em>CONFIG_CC_STACKPROTECTOR</em>选项开启该保护，功能类似canary</p>\n</li>\n<li><p><strong>Kernel Address Display Restrict</strong> ：限制内核地址显示，当攻击者试图开发通用性更强的漏洞利用程序时，他们通常需要知道内核结构的位置。 通过将内核地址视为敏感信息，常规本地用户无法看到那些地址。 从Ubuntu 11.04开始，/ proc / sys / kernel / kptr_restrict设置为“ 1”，以阻止报告已知的内核地址泄漏。 此外，只有root用户才能读取各种文件和目录：/boot/vmlinuz<em>、/boot/System.map</em>、/sys/kernel/debug/、/proc/slabinfo</p>\n</li>\n<li><h3 id=\"Kernel-Address-Space-Layout-Randomisation：\"><a href=\"#Kernel-Address-Space-Layout-Randomisation：\" class=\"headerlink\" title=\"Kernel Address Space Layout Randomisation：\"></a>Kernel Address Space Layout Randomisation：</h3><ul>\n<li>内存地址随机化，类似一般程序中的地址随机化，只不过是发生在内核</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">commit_creds</span><span class=\"token punctuation\">(</span><span class=\"token function\">prepare_kernel_cred</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// prepare_kernel_cred(0) 用0为参数生成一个root权限的结构体，并将其传递给commit_creds</span>\n<span class=\"token comment\">// commit_creds 用于将当前结构体设置为当前程序的凭证</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"安装qemu启动一个Linux内核调试试一下\"><a href=\"#安装qemu启动一个Linux内核调试试一下\" class=\"headerlink\" title=\"安装qemu启动一个Linux内核调试试一下\"></a>安装qemu启动一个Linux内核调试试一下</h2><h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjYyNDI1Lmh0bQ==\">https://bbs.kanxue.com/thread-262425.htm</span></p>\n",
            "tags": [
                "kernel pwn"
            ]
        }
    ]
}