{
    "version": "https://jsonfeed.org/version/1",
    "title": "alazymachine • All posts by \"fuzz\" tag",
    "description": "",
    "home_page_url": "https://alazymechnaic.github.io",
    "items": [
        {
            "id": "https://alazymechnaic.github.io/2023/08/30/afl-ru-men/",
            "url": "https://alazymechnaic.github.io/2023/08/30/afl-ru-men/",
            "title": "AFL入门",
            "date_published": "2023-08-30T08:38:13.000Z",
            "content_html": "<h1 id=\"AFL\"><a href=\"#AFL\" class=\"headerlink\" title=\"AFL ++\"></a>AFL ++</h1><hr>\n<h2 id=\"afl-for-binary\"><a href=\"#afl-for-binary\" class=\"headerlink\" title=\"afl for binary\"></a>afl for binary</h2><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">dop@ubuntu:~$ AFL_QEMU_DEBUG_MAPS=1 afl-qemu-trace ./ciscn_2019_c_1<br>400000-402000 r-xp 00000000 08:05 1617251                                /home/dop/ciscn_2019_c_1<br>402000-601000 ---p 00000000 00:00 0<br>601000-602000 r--p 00001000 08:05 1617251                                /home/dop/ciscn_2019_c_1<br>602000-603000 rw-p 00002000 08:05 1617251                                /home/dop/ciscn_2019_c_1<br>4000000000-4000001000 ---p 00000000 00:00 0<br>4000001000-4000801000 rw-p 00000000 00:00 0                              [stack]<br>4000801000-4000802000 r--p 00000000 08:05 1968235                        /usr/lib/x86_64-linux-gnu/ld-2.31.so<br>4000802000-4000825000 r-xp 00001000 08:05 1968235                        /usr/lib/x86_64-linux-gnu/ld-2.31.so<br>4000825000-400082d000 r--p 00024000 08:05 1968235                        /usr/lib/x86_64-linux-gnu/ld-2.31.so<br>400082d000-400082e000 ---p 00000000 00:00 0<br>400082e000-400082f000 r--p 0002c000 08:05 1968235                        /usr/lib/x86_64-linux-gnu/ld-2.31.so<br>400082f000-4000830000 rw-p 0002d000 08:05 1968235                        /usr/lib/x86_64-linux-gnu/ld-2.31.so<br>4000830000-4000833000 rw-p 00000000 00:00 0<br>4000847000-4000869000 r--p 00000000 08:05 1968239                        /usr/lib/x86_64-linux-gnu/libc-2.31.so<br>4000869000-40009e1000 r-xp 00022000 08:05 1968239                        /usr/lib/x86_64-linux-gnu/libc-2.31.so<br>40009e1000-4000a2f000 r--p 0019a000 08:05 1968239                        /usr/lib/x86_64-linux-gnu/libc-2.31.so<br>4000a2f000-4000a33000 r--p 001e7000 08:05 1968239                        /usr/lib/x86_64-linux-gnu/libc-2.31.so<br>4000a33000-4000a35000 rw-p 001eb000 08:05 1968239                        /usr/lib/x86_64-linux-gnu/libc-2.31.so<br>4000a35000-4000a3b000 rw-p 00000000 00:00 0<br>ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]<br>EEEEEEE                            hh      iii<br>EE      mm mm mmmm    aa aa   cccc hh          nn nnn    eee<br>EEEEE   mmm  mm  mm  aa aaa cc     hhhhhh  iii nnn  nn ee   e<br>EE      mmm  mm  mm aa  aaa cc     hh   hh iii nn   nn eeeee<br>EEEEEEE mmm  mm  mm  aaa aa  ccccc hh   hh iii nn   nn  eeeee<br>====================================================================<br>Welcome to this Encryption machine<br><br>====================================================================<br>1.Encrypt<br>2.Decrypt<br>3.Exit<br>Input your choice!<br></code></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202309172015669.png\" alt=\"image-20230901091314691\"></p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">export</span> AFL_QEMU_PERSISTENT_ADDR=0x400B28<br><span class=\"hljs-built_in\">export</span> AFL_QEMU_PERSISTENT_GPR=1<br></code></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"无源码测试\"><a href=\"#无源码测试\" class=\"headerlink\" title=\"无源码测试\"></a>无源码测试</h2><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 无源码测试基于qemu实现，首先配置qemu</span><br>$ <span class=\"hljs-built_in\">cd</span> qemu_mode<br>$ ./build_qemu_support.sh<br><span class=\"hljs-comment\"># 设置原始输入和输出</span><br>$ <span class=\"hljs-built_in\">mkdir</span> fuzz_in<br>$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"hello\"</span> &gt; fuzz_in/testcase<br>$ gcc test.c -o <span class=\"hljs-built_in\">test</span><br>$ afl-fuzz -i fuzz_in -o fuzz_out -Q ./test<br></code></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202309172015117.png\" alt=\"image-20230901102144519\"></p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 输出结果</span><br>└── default<br>    ├── cmdline<br>    ├── crashes<br>    │&nbsp;&nbsp; ├── <span class=\"hljs-built_in\">id</span>:000000,sig:11,src:000000+000030,time:3961,execs:13145,op:splice,rep:4<br>    │&nbsp;&nbsp; ├── <span class=\"hljs-built_in\">id</span>:000001,sig:04,src:000000+000030,time:3961,execs:13146,op:splice,rep:5<br>    │&nbsp;&nbsp; ├── <span class=\"hljs-built_in\">id</span>:000002,sig:04,src:000000+000026,time:3985,execs:13213,op:splice,rep:8<br>    │&nbsp;&nbsp; ├── <span class=\"hljs-built_in\">id</span>:000003,sig:11,src:000043+000009,time:4075,execs:13502,op:splice,rep:16<br>    │&nbsp;&nbsp; ├── <span class=\"hljs-built_in\">id</span>:000004,sig:11,src:000035+000023,time:4240,execs:14064,op:splice,rep:16<br>    │&nbsp;&nbsp; ├── <span class=\"hljs-built_in\">id</span>:000005,sig:11,src:000025+000037,time:4319,execs:14316,op:splice,rep:6<br>    │&nbsp;&nbsp; └── README.txt<br>    ├── fuzz_bitmap<br>    ├── fuzzer_setup<br>    ├── fuzzer_stats<br>    ├── hangs<br>    ├── plot_data<br>    └── queue<br>        ├── <span class=\"hljs-built_in\">id</span>:000000,time:0,execs:0,orig:testcase<br>        ├── <span class=\"hljs-built_in\">id</span>:000001,src:000000,time:4,execs:12,op:havoc,rep:2,+cov<br>        ├── <span class=\"hljs-built_in\">id</span>:000002,src:000000,time:6,execs:20,op:havoc,rep:1<br>        ├── <span class=\"hljs-built_in\">id</span>:000003,src:000000,time:9,execs:28,op:havoc,rep:1<br>        ├── <span class=\"hljs-built_in\">id</span>:000004,src:000000,time:12,execs:37,op:havoc,rep:1<br><span class=\"hljs-comment\"># </span><br>crashes：存放去重后触发crash的数据<br><br>fuzz_bitmap：记录代码覆盖率<br><br>fuzzer_stats：fuzz状态<br><br>hangs：存放去重后触发挂起的数据<br><br>plot_data：绘图数据<br><br>queue：有效的样本集合<br><br></code></pre></td></tr></tbody></table></figure>\n\n<p>如果需要对so文件进行测试，需要将相应的动态链接库目录加入到环境变量中</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">export</span> QEMU_LD_PREFIX=<span class=\"hljs-variable\">$LD_LIBRARY_PATH</span>:<br><span class=\"hljs-built_in\">export</span> LD_LIBRARY_PATH=<span class=\"hljs-variable\">$LD_LIBRARY_PATH</span><br><span class=\"hljs-comment\"># 两个都试试吧</span><br></code></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"自定义fuzz策略\"><a href=\"#自定义fuzz策略\" class=\"headerlink\" title=\"自定义fuzz策略\"></a>自定义fuzz策略</h2><p><a href=\"https://www.anquanke.com/post/id/254363\">https://www.anquanke.com/post/id/254363</a></p>\n<p><a href=\"https://github.com/AFLplusplus/AFLplusplus/blob/dev/docs/custom_mutators.md%E3%80%81\">https://github.com/AFLplusplus/AFLplusplus/blob/dev/docs/custom_mutators.md、</a></p>\n<h3 id=\"官方自定义文档\"><a href=\"#官方自定义文档\" class=\"headerlink\" title=\"官方自定义文档\"></a>官方自定义文档</h3><p><a href=\"https://github.com/AFLplusplus/AFLplusplus/blob/dev/docs/custom_mutators.md#2-apis\">https://github.com/AFLplusplus/AFLplusplus/blob/dev/docs/custom_mutators.md#2-apis</a></p>\n<h3 id=\"安装libprotobuf\"><a href=\"#安装libprotobuf\" class=\"headerlink\" title=\"安装libprotobuf\"></a>安装libprotobuf</h3><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提示cmake 版本太低 https://www.cnblogs.com/jsdy/p/12689470.html#_label0</span><br>升级cmake <br>$ wget http://www.cmake.org/files/v3.25/cmake-3.25.2.tar.gz<br>./bootstrap<br>make<br>make install<br><span class=\"hljs-comment\"># 出找不到openssl </span><br>Could NOT find OpenSSL, try to <span class=\"hljs-built_in\">set</span> the path to OpenSSL root folder <span class=\"hljs-keyword\">in</span> the system variable OPENSSL_ROOT_DIR (missing: OPENSSL_LIBRARIES OPENSSL_INCLUDE_DIR) <br>$ sudo apt-get install libssl-dev<br><br></code></pre></td></tr></tbody></table></figure>\n\n<p>安装libxml4</p>\n<p>autogen.sh </p>\n<p>报错：<br>configure.ac:1087: error: possibly undefined macro: m4_ifdef<br>      If this token and others are legitimate, please use m4_pattern_allow.<br>      See the Autoconf documentation.</p>\n<p>解决方案：sudo cp /usr/share/aclocal/*.m4 /usr/local/share/aclocal/<br><a href=\"https://www.cnblogs.com/y4247464/p/14388334.html\">https://www.cnblogs.com/y4247464/p/14388334.html</a></p>\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202309081527504.png\">\t</p>\n<p>本文介绍如何利用AFL Plus Plus实现自定义目标的模糊测试。</p>\n<p>Tutorials ： <a href=\"https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/tutorials.md\">https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/tutorials.md</a></p>\n<h2 id=\"AFL源码阅读\"><a href=\"#AFL源码阅读\" class=\"headerlink\" title=\"AFL源码阅读\"></a>AFL源码阅读</h2><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// afl-fuzz.h: line 431</span><br><span class=\"hljs-comment\">// 该结构用于存储本次afl运行所需要的上下文内容</span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">afl_state</span> {</span><br><span class=\"hljs-comment\">/* Position of this state in the global states list */</span><br>  u32 _id;<br><br>  <span class=\"hljs-type\">afl_forkserver_t</span> fsrv;<br>  <span class=\"hljs-type\">sharedmem_t</span>      shm;<br>  <span class=\"hljs-type\">sharedmem_t</span>     *shm_fuzz;<br>  <span class=\"hljs-type\">afl_env_vars_t</span>   afl_env;\t<br>  <span class=\"hljs-comment\">//...</span><br>} <span class=\"hljs-type\">afl_state_t</span>;<br><br><span class=\"hljs-comment\">// afl-fuzz-init.c 该函数的目的是使用原始输入执行程序</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">perform_dry_run</span><span class=\"hljs-params\">(<span class=\"hljs-type\">afl_state_t</span> *afl)</span> {}<br><br><span class=\"hljs-comment\">// afl-forkserver.c </span><br><span class=\"hljs-comment\">// 该函数用于进行子程序的执行</span><br><span class=\"hljs-type\">fsrv_run_result_t</span> __attribute__((hot))<br>afl_fsrv_run_target(<span class=\"hljs-type\">afl_forkserver_t</span> *fsrv, u32 timeout,<br>                    <span class=\"hljs-keyword\">volatile</span> u8 *stop_soon_p) {<br><br></code></pre></td></tr></tbody></table></figure>\n\n",
            "tags": [
                "fuzz"
            ]
        }
    ]
}