{
    "version": "https://jsonfeed.org/version/1",
    "title": "alazymachine • All posts by \"fuzz\" tag",
    "description": "",
    "home_page_url": "https://alazymechnaic.github.io",
    "items": [
        {
            "id": "https://alazymechnaic.github.io/2023/08/30/afl-ru-men/",
            "url": "https://alazymechnaic.github.io/2023/08/30/afl-ru-men/",
            "title": "AFL入门",
            "date_published": "2023-08-30T08:38:13.000Z",
            "content_html": "<h1 id=\"AFL\"><a href=\"#AFL\" class=\"headerlink\" title=\"AFL ++\"></a>AFL ++</h1><hr>\n<h2 id=\"面试题目相关\"><a href=\"#面试题目相关\" class=\"headerlink\" title=\"面试题目相关\"></a>面试题目相关</h2><h3 id=\"AFL中使用的路径的度量机制是什么？\"><a href=\"#AFL中使用的路径的度量机制是什么？\" class=\"headerlink\" title=\"AFL中使用的路径的度量机制是什么？\"></a>AFL中使用的路径的度量机制是什么？</h3><h3 id=\"针对协议的fuzz主要是做哪些内容？\"><a href=\"#针对协议的fuzz主要是做哪些内容？\" class=\"headerlink\" title=\"针对协议的fuzz主要是做哪些内容？\"></a>针对协议的fuzz主要是做哪些内容？</h3><p>TLSAttacker</p>\n<h3 id=\"为什么针对二级制的工作要比针对源代码的工作更少？\"><a href=\"#为什么针对二级制的工作要比针对源代码的工作更少？\" class=\"headerlink\" title=\"为什么针对二级制的工作要比针对源代码的工作更少？\"></a>为什么针对二级制的工作要比针对源代码的工作更少？</h3><p><strong>原因</strong>：针对二级制的分析开销大，很多基于仿真的方法效率太低；收集目标信息困难；往二进制里面打标签很困难。</p>\n<p><strong>解决办法</strong>：使用处理器追踪的Intel PT，使用触发和过滤功能在指令级别跟踪代码执行。英特尔PT通过记录分支来工作。在运行时，当CPU遇到任何分支指令（如“ je”，“ call”，“ ret”）时，它将记录对该分支采取的操作。这个比较强大，既能够记录用户态又可以记录内核态。</p>\n<h3 id=\"Angr中缓解路径爆炸的策略是什么\"><a href=\"#Angr中缓解路径爆炸的策略是什么\" class=\"headerlink\" title=\"Angr中缓解路径爆炸的策略是什么\"></a>Angr中缓解路径爆炸的策略是什么</h3><ul>\n<li>simProcedure：重写一些可能导致状态爆炸的函数。</li>\n<li>veritesting：动态符号执行和静态符号执行的结合。实现路径归并，DSE生成公式时的负载很高，但公式很容易解出，SSE为语句生成公式，公式生成很容易，但也能覆盖更多路径，但更难解。</li>\n<li>Lazy Solve：跳过不必要的函数</li>\n<li>Symbion：具体执行和符号执行的结合</li>\n<li>代码片段重写，设定好一些固定内存位置，防止其进入会爆炸的路径中。</li>\n<li>Hook：对会产生爆炸的函数进行替换，需要指定要删除的代码片段位置和代码长度，然后用自定义的代码替换。</li>\n</ul>\n<h3 id=\"动态符号执行和静态符号执行的区别\"><a href=\"#动态符号执行和静态符号执行的区别\" class=\"headerlink\" title=\"动态符号执行和静态符号执行的区别\"></a>动态符号执行和静态符号执行的区别</h3><ul>\n<li>动态符号执行是真的会执行目标程序，静态符号执行本身还算做代码扫描。</li>\n<li>静态符号执行主要是收集约束，并且能在一定程度上完成依照符号条件的分支合并，进行剪枝。而动态符号执行则是能够生成路径翻转后的新测试用例。</li>\n<li><strong>选择性符号执行</strong>：选择性符号执行。S2E就是选择性符号执行工具，会在选定区域完成。那么这个时候就可能会出现约束丢失的情况，这种情况下对if</li>\n</ul>\n<h2 id=\"插装相关\"><a href=\"#插装相关\" class=\"headerlink\" title=\"插装相关\"></a>插装相关</h2><h3 id=\"libdft的粒度\"><a href=\"#libdft的粒度\" class=\"headerlink\" title=\"libdft的粒度\"></a>libdft的粒度</h3><p>在粒度上，libdft的污点分析是在指令级别（Instruction-level）进行的。它通过在执行过程中插入代码，对每个指令进行监视和分析。这种粒度较细，可以提供对指令级操作的准确分析和检测，但相应地也会增加插装的开销和运行时性能损失。</p>\n<h3 id=\"插装的粒度有哪些\"><a href=\"#插装的粒度有哪些\" class=\"headerlink\" title=\"插装的粒度有哪些\"></a>插装的粒度有哪些</h3><ol>\n<li>指令级别（Instruction-level）：在指令级别插装中，Pin可以在每个指令执行之前或之后插入代码。这种粒度最细，允许对应用程序的每个指令进行监视、修改或跟踪。指令级别插装提供了对应用程序执行的最详细的控制和观察能力。</li>\n<li>函数级别（Function-level）：在函数级别插装中，Pin可以在每个函数的入口和出口处插入代码。这种粒度较粗，允许对函数的调用和返回进行监视、修改或跟踪。函数级别插装提供了对应用程序控制流的高级观察和干预能力。</li>\n<li>基本块级别（Basic block-level）：在基本块级别插装中，Pin可以在基本块的开头或结尾插入代码。基本块是一段连续的指令序列，没有分支或跳转。基本块级别插装提供了对应用程序中基本块的执行和控制的监视和修改能力。</li>\n<li>指令组级别（Instruction group-level）：在指令组级别插装中，Pin可以在一组相关指令的执行之前或之后插入代码。这种粒度介于指令级别和基本块级别之间，允许在一组指令的执行过程中进行监视、修改或跟踪</li>\n</ol>\n<h2 id=\"模糊测试原理\"><a href=\"#模糊测试原理\" class=\"headerlink\" title=\"模糊测试原理\"></a>模糊测试原理</h2><p>​\tAFL（American Fuzzy Lop）以程序中的代码覆盖率为导向进行模糊测试的工具。由三个基础模块组成，分别是测试用例生成模块、程序执行模块以及异常检测模块。测试用例生成模块包含两种用例生成方式，</p>\n<ul>\n<li>基于生成的Fuzz工具(Generation Based Fuzzer)：用户给定程序输入的格式，生成器自动填充里面的内容。</li>\n<li>基于变异的Fuzz工具(Mutation Based Fuzzer)：用户给定初始输入，用户对初始输入做比特翻转，随机插入等方式更改测试数据。<strong>基于代码覆盖率的方式会将能触发新路径的输入样例保存下来，用于后续的测试。</strong></li>\n</ul>\n<p>模糊测试工具的执行流程如下：</p>\n<ul>\n<li>编译源代码并插装，以记录代码覆盖率</li>\n<li>选择输入文件作为初始测试集加入到输入队列。</li>\n<li>对队列文件按照一定策略进行突变</li>\n<li>如果经过变异文件更新了覆盖范围，则将其保留添加到队列中</li>\n<li>记录上述过程中触发的crash</li>\n</ul>\n<p>为了解决基于execv函数成本高的问题，AFL是使用fork的方式进行，首先在进行源代码编译的时候对程序进行插装，让程序停留在合适的位置，此时的所有准备工作已经完成，但是还没有能够接收输入的状态进行<strong>fork</strong>。然后接收本次的输入进行运行。其中 <strong>persistent mode</strong>，能够限制提高模糊测试效率，能够保存一些代码覆盖率和一些队列信息。Fuzzer会通过execv启动插装过的进程作为forkserver，forkserver不断fork自身，相当于fuzzer程序是实际被fork程序的祖祖父进程。最终使用execv来执行目标程序，如果目标程序崩溃了就会执行execv之后的代码，如果没有崩溃就会程序正常执行结束。</p>\n<ul>\n<li>forkserver是插装后的待测试程序。</li>\n<li>fuzzer和forserver之间是通过管道进行通信</li>\n<li>程序在插装后会在main函数中停下，等待fuzzer的命令，执行作为forkserver的能力</li>\n<li>fuzz_run_target()函数用于执行目标应用程序、监控超时、返回状态信息，被调用的程序将更新trace_bits[]。其直接调用afl_fsrv_run_target(fsrv, timeout, &amp;afl-&gt;stop_soon)函数。</li>\n</ul>\n<h3 id=\"Mutation策略有哪些\"><a href=\"#Mutation策略有哪些\" class=\"headerlink\" title=\"Mutation策略有哪些\"></a>Mutation策略有哪些</h3><ul>\n<li>最基本的是Basic Mutation：对目标程序的输入进行简单的比特翻转，字节替换，插入删除</li>\n<li>Random Mutation： 随机字节替换与翻转</li>\n<li>字典变异（Dictionary Mutation）：根据用户提供的字典文件，给某些特定位置的字节进行比特上的替换。</li>\n<li>约束变异，在为输入的某些字节限定好约束后，在约束下进行变异。</li>\n</ul>\n<h3 id=\"定向模糊测试（DGF）\"><a href=\"#定向模糊测试（DGF）\" class=\"headerlink\" title=\"定向模糊测试（DGF）\"></a>定向模糊测试（<strong>DGF</strong>）</h3><p><a href=\"https://blog.csdn.net/qq_40229814/article/details/132711607\">https://blog.csdn.net/qq_40229814/article/details/132711607</a></p>\n<ul>\n<li><p>倾向于利用目标位置的工具： 这种工具的主要特征是，它们旨在找到特定的目标位置，目标位置可以是代码的某个位置，如函数、基本块（basic block）或一系列有序的调用点。此类工具的评估标准是基于可见的度量标准，例如在执行跟踪、控制流图或调用图上测量的度量。总之，这种工具具有明确定义的目标位置和可视化的度量标准。</p>\n</li>\n<li><p>倾向于利用目标行为（bug）的工具： 这种工具也具有特定的适应度度量标准（fitness metric），但不同的是，它们没有固定的目标位置。相反，它们旨在测试和发现特定的行为或缺陷，而不关心目标位置。这些工具的目标不需要事先标记，或者在某些情况下无法进行预先标记。此外，它们的适应度度量标准可能不像第一类工具那么容易直观可见。通过优化适应度函数，这种类型的工具可以自动达到目标并揭示缺陷行为。</p>\n</li>\n</ul>\n<p>怎样确定种子：</p>\n<p>AFLGo方法： AFLGo使用源代码在编译时进行仪器化，并通过计算程序单元测试（PUT）的调用和控制流图中边的数量来计算到目标基本块的距离。<strong>然后在运行时，它汇总每个已执行的基本块的距离值，以计算平均值来评估种子。它根据距离对种子进行优先排序，偏向于距离目标更近的种子。</strong></p>\n<p>TOFU方法： TOFU的距离度量标准定义为达到目标所需的正确分支决策数量。</p>\n<p>RDFuzz方法： RDFuzz将距离与基本块的执行频率结合起来，以对种子进行优先排序。</p>\n<p>UAFuzz方法： UAFuzz使用距离度量标准来表示导致目标函数的调用链，这些链更有可能包含分配和释放内存函数，以检测复杂的行为Use-After-Free漏洞。</p>\n<p>AFLChurn方法： AFLChurn不同于传统距离计算，它为基本块分配了数值权重，根据基本块的最近更改或更改频率来确定权重。</p>\n<p>WindRanger方法： WindRanger在计算距离时考虑了偏离基本块（即，执行跟踪开始偏离目标位置的基本块）</p>\n<h3 id=\"关于目前Fuzz的问题\"><a href=\"#关于目前Fuzz的问题\" class=\"headerlink\" title=\"关于目前Fuzz的问题\"></a>关于目前Fuzz的问题</h3><p><a href=\"https://blog.csdn.net/u013648063/article/details/125627454\">https://blog.csdn.net/u013648063/article/details/125627454</a></p>\n<p>没有系统地分析测试程序，几乎是不可能准确地限制输入空间。<strong>由于使用fuzzing的目的不同，执行状态的信息也不局限于代码覆盖率。这些信息可以是协议实现的状态机，面向对象程序的合法执行，并发实现的别名覆盖率，深度学习模型的神经元覆盖率，或者android智能电视的执行日志。</strong></p>\n<p>目前大家的研究方向在于哪些种子被用于下一轮编译</p>\n<p>要花多少时间在某个种子上</p>\n<p>种子应该如何进行变异</p>\n<h3 id=\"关于输入的建模\"><a href=\"#关于输入的建模\" class=\"headerlink\" title=\"关于输入的建模\"></a>关于输入的建模</h3><p>为了生成满足规则的输入，生成过程会严格按照指定的操作来。如果一个输入违反了目标程序的语法或者语义，输入会在早期被程序所丢掉。换句话说，输入空间受控于输入模型。常见的玩法如下：</p>\n<ul>\n<li><p>将fuzzing和特定目标程序之间做对应。比如在测试TLS协议的时候，有TLSAttacker，针对每个字段进行fuzz</p>\n</li>\n<li><p>中间语言转化，将当前的输入转换为规整的IR，这个对fuzz不同的语言处理器是十分有作用的</p>\n</li>\n<li><h4 id=\"Fragment-Recombination：\"><a href=\"#Fragment-Recombination：\" class=\"headerlink\" title=\"Fragment Recombination：\"></a>Fragment Recombination：</h4><ul>\n<li>将输入进行拆分，并且重组成新的文件。Fuzzer会将输入文件解析为一棵树，这样可以保证语法的正确性。</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"AFL实战\"><a href=\"#AFL实战\" class=\"headerlink\" title=\"AFL实战\"></a>AFL实战</h2><h3 id=\"afl-for-binary\"><a href=\"#afl-for-binary\" class=\"headerlink\" title=\"afl for binary\"></a>afl for binary</h3><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">dop@ubuntu:~$ AFL_QEMU_DEBUG_MAPS=1 afl-qemu-trace ./ciscn_2019_c_1<br>400000-402000 r-xp 00000000 08:05 1617251                                /home/dop/ciscn_2019_c_1<br>402000-601000 ---p 00000000 00:00 0<br>601000-602000 r--p 00001000 08:05 1617251                                /home/dop/ciscn_2019_c_1<br>602000-603000 rw-p 00002000 08:05 1617251                                /home/dop/ciscn_2019_c_1<br>4000000000-4000001000 ---p 00000000 00:00 0<br>4000001000-4000801000 rw-p 00000000 00:00 0                              [stack]<br>4000801000-4000802000 r--p 00000000 08:05 1968235                        /usr/lib/x86_64-linux-gnu/ld-2.31.so<br>4000802000-4000825000 r-xp 00001000 08:05 1968235                        /usr/lib/x86_64-linux-gnu/ld-2.31.so<br>4000825000-400082d000 r--p 00024000 08:05 1968235                        /usr/lib/x86_64-linux-gnu/ld-2.31.so<br>400082d000-400082e000 ---p 00000000 00:00 0<br>400082e000-400082f000 r--p 0002c000 08:05 1968235                        /usr/lib/x86_64-linux-gnu/ld-2.31.so<br>400082f000-4000830000 rw-p 0002d000 08:05 1968235                        /usr/lib/x86_64-linux-gnu/ld-2.31.so<br>4000830000-4000833000 rw-p 00000000 00:00 0<br>4000847000-4000869000 r--p 00000000 08:05 1968239                        /usr/lib/x86_64-linux-gnu/libc-2.31.so<br>4000869000-40009e1000 r-xp 00022000 08:05 1968239                        /usr/lib/x86_64-linux-gnu/libc-2.31.so<br>40009e1000-4000a2f000 r--p 0019a000 08:05 1968239                        /usr/lib/x86_64-linux-gnu/libc-2.31.so<br>4000a2f000-4000a33000 r--p 001e7000 08:05 1968239                        /usr/lib/x86_64-linux-gnu/libc-2.31.so<br>4000a33000-4000a35000 rw-p 001eb000 08:05 1968239                        /usr/lib/x86_64-linux-gnu/libc-2.31.so<br>4000a35000-4000a3b000 rw-p 00000000 00:00 0<br>ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]<br>EEEEEEE                            hh      iii<br>EE      mm mm mmmm    aa aa   cccc hh          nn nnn    eee<br>EEEEE   mmm  mm  mm  aa aaa cc     hhhhhh  iii nnn  nn ee   e<br>EE      mmm  mm  mm aa  aaa cc     hh   hh iii nn   nn eeeee<br>EEEEEEE mmm  mm  mm  aaa aa  ccccc hh   hh iii nn   nn  eeeee<br>====================================================================<br>Welcome to this Encryption machine<br><br>====================================================================<br>1.Encrypt<br>2.Decrypt<br>3.Exit<br>Input your choice!<br></code></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202309172015669.png\" alt=\"image-20230901091314691\"></p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">export</span> AFL_QEMU_PERSISTENT_ADDR=0x400B28<br><span class=\"hljs-built_in\">export</span> AFL_QEMU_PERSISTENT_GPR=1<br></code></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"无源码测试\"><a href=\"#无源码测试\" class=\"headerlink\" title=\"无源码测试\"></a>无源码测试</h3><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 无源码测试基于qemu实现，首先配置qemu</span><br>$ <span class=\"hljs-built_in\">cd</span> qemu_mode<br>$ ./build_qemu_support.sh<br><span class=\"hljs-comment\"># 设置原始输入和输出</span><br>$ <span class=\"hljs-built_in\">mkdir</span> fuzz_in<br>$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"hello\"</span> &gt; fuzz_in/testcase<br>$ gcc test.c -o <span class=\"hljs-built_in\">test</span><br>$ afl-fuzz -i fuzz_in -o fuzz_out -Q ./test<br></code></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202309172015117.png\" alt=\"image-20230901102144519\"></p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 输出结果</span><br>└── default<br>    ├── cmdline<br>    ├── crashes<br>    │&nbsp;&nbsp; ├── <span class=\"hljs-built_in\">id</span>:000000,sig:11,src:000000+000030,time:3961,execs:13145,op:splice,rep:4<br>    │&nbsp;&nbsp; ├── <span class=\"hljs-built_in\">id</span>:000001,sig:04,src:000000+000030,time:3961,execs:13146,op:splice,rep:5<br>    │&nbsp;&nbsp; ├── <span class=\"hljs-built_in\">id</span>:000002,sig:04,src:000000+000026,time:3985,execs:13213,op:splice,rep:8<br>    │&nbsp;&nbsp; ├── <span class=\"hljs-built_in\">id</span>:000003,sig:11,src:000043+000009,time:4075,execs:13502,op:splice,rep:16<br>    │&nbsp;&nbsp; ├── <span class=\"hljs-built_in\">id</span>:000004,sig:11,src:000035+000023,time:4240,execs:14064,op:splice,rep:16<br>    │&nbsp;&nbsp; ├── <span class=\"hljs-built_in\">id</span>:000005,sig:11,src:000025+000037,time:4319,execs:14316,op:splice,rep:6<br>    │&nbsp;&nbsp; └── README.txt<br>    ├── fuzz_bitmap<br>    ├── fuzzer_setup<br>    ├── fuzzer_stats<br>    ├── hangs<br>    ├── plot_data<br>    └── queue<br>        ├── <span class=\"hljs-built_in\">id</span>:000000,time:0,execs:0,orig:testcase<br>        ├── <span class=\"hljs-built_in\">id</span>:000001,src:000000,time:4,execs:12,op:havoc,rep:2,+cov<br>        ├── <span class=\"hljs-built_in\">id</span>:000002,src:000000,time:6,execs:20,op:havoc,rep:1<br>        ├── <span class=\"hljs-built_in\">id</span>:000003,src:000000,time:9,execs:28,op:havoc,rep:1<br>        ├── <span class=\"hljs-built_in\">id</span>:000004,src:000000,time:12,execs:37,op:havoc,rep:1<br><span class=\"hljs-comment\"># </span><br>crashes：存放去重后触发crash的数据<br><br>fuzz_bitmap：记录代码覆盖率<br><br>fuzzer_stats：fuzz状态<br><br>hangs：存放去重后触发挂起的数据<br><br>plot_data：绘图数据<br><br>queue：有效的样本集合<br><br></code></pre></td></tr></tbody></table></figure>\n\n<p>如果需要对so文件进行测试，需要将相应的动态链接库目录加入到环境变量中</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">export</span> QEMU_LD_PREFIX=<span class=\"hljs-variable\">$LD_LIBRARY_PATH</span>:<br><span class=\"hljs-built_in\">export</span> LD_LIBRARY_PATH=<span class=\"hljs-variable\">$LD_LIBRARY_PATH</span><br><span class=\"hljs-comment\"># 两个都试试吧</span><br></code></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"自定义fuzz策略\"><a href=\"#自定义fuzz策略\" class=\"headerlink\" title=\"自定义fuzz策略\"></a>自定义fuzz策略</h3><p><a href=\"https://www.anquanke.com/post/id/254363\">https://www.anquanke.com/post/id/254363</a></p>\n<p><a href=\"https://github.com/AFLplusplus/AFLplusplus/blob/dev/docs/custom_mutators.md%E3%80%81\">https://github.com/AFLplusplus/AFLplusplus/blob/dev/docs/custom_mutators.md、</a></p>\n<h4 id=\"官方自定义文档\"><a href=\"#官方自定义文档\" class=\"headerlink\" title=\"官方自定义文档\"></a>官方自定义文档</h4><p><a href=\"https://github.com/AFLplusplus/AFLplusplus/blob/dev/docs/custom_mutators.md#2-apis\">https://github.com/AFLplusplus/AFLplusplus/blob/dev/docs/custom_mutators.md#2-apis</a></p>\n<h4 id=\"安装libprotobuf\"><a href=\"#安装libprotobuf\" class=\"headerlink\" title=\"安装libprotobuf\"></a>安装libprotobuf</h4><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提示cmake 版本太低 https://www.cnblogs.com/jsdy/p/12689470.html#_label0</span><br>升级cmake <br>$ wget http://www.cmake.org/files/v3.25/cmake-3.25.2.tar.gz<br>./bootstrap<br>make<br>make install<br><span class=\"hljs-comment\"># 出找不到openssl </span><br>Could NOT find OpenSSL, try to <span class=\"hljs-built_in\">set</span> the path to OpenSSL root folder <span class=\"hljs-keyword\">in</span> the system variable OPENSSL_ROOT_DIR (missing: OPENSSL_LIBRARIES OPENSSL_INCLUDE_DIR) <br>$ sudo apt-get install libssl-dev<br><br></code></pre></td></tr></tbody></table></figure>\n\n<p>安装libxml4</p>\n<p>autogen.sh </p>\n<p>报错：<br>configure.ac:1087: error: possibly undefined macro: m4_ifdef<br>      If this token and others are legitimate, please use m4_pattern_allow.<br>      See the Autoconf documentation.</p>\n<p>解决方案：sudo cp /usr/share/aclocal/*.m4 /usr/local/share/aclocal/<br><a href=\"https://www.cnblogs.com/y4247464/p/14388334.html\">https://www.cnblogs.com/y4247464/p/14388334.html</a></p>\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202309081527504.png\">\t</p>\n<p>本文介绍如何利用AFL Plus Plus实现自定义目标的模糊测试。</p>\n<p>Tutorials ： <a href=\"https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/tutorials.md\">https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/tutorials.md</a></p>\n<h3 id=\"AFL源码阅读\"><a href=\"#AFL源码阅读\" class=\"headerlink\" title=\"AFL源码阅读\"></a>AFL源码阅读</h3><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// afl-fuzz.h: line 431</span><br><span class=\"hljs-comment\">// 该结构用于存储本次afl运行所需要的上下文内容</span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">afl_state</span> {</span><br><span class=\"hljs-comment\">/* Position of this state in the global states list */</span><br>  u32 _id;<br><br>  <span class=\"hljs-type\">afl_forkserver_t</span> fsrv;<br>  <span class=\"hljs-type\">sharedmem_t</span>      shm;<br>  <span class=\"hljs-type\">sharedmem_t</span>     *shm_fuzz;<br>  <span class=\"hljs-type\">afl_env_vars_t</span>   afl_env;\t<br>  <span class=\"hljs-comment\">//...</span><br>} <span class=\"hljs-type\">afl_state_t</span>;<br><br><span class=\"hljs-comment\">// afl-fuzz-init.c 该函数的目的是使用原始输入执行程序</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">perform_dry_run</span><span class=\"hljs-params\">(<span class=\"hljs-type\">afl_state_t</span> *afl)</span> {}<br><br><span class=\"hljs-comment\">// afl-forkserver.c </span><br><span class=\"hljs-comment\">// 该函数用于进行子程序的执行</span><br><span class=\"hljs-type\">fsrv_run_result_t</span> __attribute__((hot))<br>afl_fsrv_run_target(<span class=\"hljs-type\">afl_forkserver_t</span> *fsrv, u32 timeout,<br>                    <span class=\"hljs-keyword\">volatile</span> u8 *stop_soon_p) {<br><br></code></pre></td></tr></tbody></table></figure>\n\n",
            "tags": [
                "fuzz"
            ]
        }
    ]
}