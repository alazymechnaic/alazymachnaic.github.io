<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>alazymachine • Posts by &#34;fuzz&#34; tag</title>
        <link>https://alazymechnaic.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Wed, 30 Aug 2023 16:38:13 +0800</pubDate>
        <lastBuildDate>Wed, 30 Aug 2023 16:38:13 +0800</lastBuildDate>
        <category>paper</category>
        <category>fuzz</category>
        <category>arm</category>
        <category>Linux</category>
        <category>C</category>
        <category>go</category>
        <category>Paper</category>
        <category>bypass</category>
        <category>clash</category>
        <category>Hook</category>
        <category>go, RE</category>
        <category>kernel pwn</category>
        <category>binary</category>
        <category>writing</category>
        <category>HEAP PWN CTF</category>
        <category>Android</category>
        <category>dataflow</category>
        <category>pwn</category>
        <category>java</category>
        <category>web</category>
        <category>exploit</category>
        <category>network</category>
        <category>代码分析</category>
        <category>二进制安全</category>
        <category>渗透</category>
        <category>程序分析</category>
        <category>stack overflow</category>
        <category>算法</category>
        <item>
            <guid isPermalink="true">https://alazymechnaic.github.io/2023/08/30/afl-ru-men/</guid>
            <title>AFL入门</title>
            <link>https://alazymechnaic.github.io/2023/08/30/afl-ru-men/</link>
            <category>fuzz</category>
            <pubDate>Wed, 30 Aug 2023 16:38:13 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;AFL&#34;&gt;&lt;a href=&#34;#AFL&#34; class=&#34;headerlink&#34; title=&#34;AFL ++&#34;&gt;&lt;/a&gt;AFL ++&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&#34;面试题目相关&#34;&gt;&lt;a href=&#34;#面试题目相关&#34; class=&#34;headerlink&#34; title=&#34;面试题目相关&#34;&gt;&lt;/a&gt;面试题目相关&lt;/h2&gt;&lt;h3 id=&#34;AFL中使用的路径的度量机制是什么？&#34;&gt;&lt;a href=&#34;#AFL中使用的路径的度量机制是什么？&#34; class=&#34;headerlink&#34; title=&#34;AFL中使用的路径的度量机制是什么？&#34;&gt;&lt;/a&gt;AFL中使用的路径的度量机制是什么？&lt;/h3&gt;&lt;h3 id=&#34;针对协议的fuzz主要是做哪些内容？&#34;&gt;&lt;a href=&#34;#针对协议的fuzz主要是做哪些内容？&#34; class=&#34;headerlink&#34; title=&#34;针对协议的fuzz主要是做哪些内容？&#34;&gt;&lt;/a&gt;针对协议的fuzz主要是做哪些内容？&lt;/h3&gt;&lt;p&gt;TLSAttacker&lt;/p&gt;
&lt;h3 id=&#34;为什么针对二级制的工作要比针对源代码的工作更少？&#34;&gt;&lt;a href=&#34;#为什么针对二级制的工作要比针对源代码的工作更少？&#34; class=&#34;headerlink&#34; title=&#34;为什么针对二级制的工作要比针对源代码的工作更少？&#34;&gt;&lt;/a&gt;为什么针对二级制的工作要比针对源代码的工作更少？&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;原因&lt;/strong&gt;：针对二级制的分析开销大，很多基于仿真的方法效率太低；收集目标信息困难；往二进制里面打标签很困难。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决办法&lt;/strong&gt;：使用处理器追踪的Intel PT，使用触发和过滤功能在指令级别跟踪代码执行。英特尔PT通过记录分支来工作。在运行时，当CPU遇到任何分支指令（如“ je”，“ call”，“ ret”）时，它将记录对该分支采取的操作。这个比较强大，既能够记录用户态又可以记录内核态。&lt;/p&gt;
&lt;h3 id=&#34;Angr中缓解路径爆炸的策略是什么&#34;&gt;&lt;a href=&#34;#Angr中缓解路径爆炸的策略是什么&#34; class=&#34;headerlink&#34; title=&#34;Angr中缓解路径爆炸的策略是什么&#34;&gt;&lt;/a&gt;Angr中缓解路径爆炸的策略是什么&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;simProcedure：重写一些可能导致状态爆炸的函数。&lt;/li&gt;
&lt;li&gt;veritesting：动态符号执行和静态符号执行的结合。实现路径归并，DSE生成公式时的负载很高，但公式很容易解出，SSE为语句生成公式，公式生成很容易，但也能覆盖更多路径，但更难解。&lt;/li&gt;
&lt;li&gt;Lazy Solve：跳过不必要的函数&lt;/li&gt;
&lt;li&gt;Symbion：具体执行和符号执行的结合&lt;/li&gt;
&lt;li&gt;代码片段重写，设定好一些固定内存位置，防止其进入会爆炸的路径中。&lt;/li&gt;
&lt;li&gt;Hook：对会产生爆炸的函数进行替换，需要指定要删除的代码片段位置和代码长度，然后用自定义的代码替换。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;动态符号执行和静态符号执行的区别&#34;&gt;&lt;a href=&#34;#动态符号执行和静态符号执行的区别&#34; class=&#34;headerlink&#34; title=&#34;动态符号执行和静态符号执行的区别&#34;&gt;&lt;/a&gt;动态符号执行和静态符号执行的区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;动态符号执行是真的会执行目标程序，静态符号执行本身还算做代码扫描。&lt;/li&gt;
&lt;li&gt;静态符号执行主要是收集约束，并且能在一定程度上完成依照符号条件的分支合并，进行剪枝。而动态符号执行则是能够生成路径翻转后的新测试用例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择性符号执行&lt;/strong&gt;：选择性符号执行。S2E就是选择性符号执行工具，会在选定区域完成。那么这个时候就可能会出现约束丢失的情况，这种情况下对if&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;插装相关&#34;&gt;&lt;a href=&#34;#插装相关&#34; class=&#34;headerlink&#34; title=&#34;插装相关&#34;&gt;&lt;/a&gt;插装相关&lt;/h2&gt;&lt;h3 id=&#34;libdft的粒度&#34;&gt;&lt;a href=&#34;#libdft的粒度&#34; class=&#34;headerlink&#34; title=&#34;libdft的粒度&#34;&gt;&lt;/a&gt;libdft的粒度&lt;/h3&gt;&lt;p&gt;在粒度上，libdft的污点分析是在指令级别（Instruction-level）进行的。它通过在执行过程中插入代码，对每个指令进行监视和分析。这种粒度较细，可以提供对指令级操作的准确分析和检测，但相应地也会增加插装的开销和运行时性能损失。&lt;/p&gt;
&lt;h3 id=&#34;插装的粒度有哪些&#34;&gt;&lt;a href=&#34;#插装的粒度有哪些&#34; class=&#34;headerlink&#34; title=&#34;插装的粒度有哪些&#34;&gt;&lt;/a&gt;插装的粒度有哪些&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;指令级别（Instruction-level）：在指令级别插装中，Pin可以在每个指令执行之前或之后插入代码。这种粒度最细，允许对应用程序的每个指令进行监视、修改或跟踪。指令级别插装提供了对应用程序执行的最详细的控制和观察能力。&lt;/li&gt;
&lt;li&gt;函数级别（Function-level）：在函数级别插装中，Pin可以在每个函数的入口和出口处插入代码。这种粒度较粗，允许对函数的调用和返回进行监视、修改或跟踪。函数级别插装提供了对应用程序控制流的高级观察和干预能力。&lt;/li&gt;
&lt;li&gt;基本块级别（Basic block-level）：在基本块级别插装中，Pin可以在基本块的开头或结尾插入代码。基本块是一段连续的指令序列，没有分支或跳转。基本块级别插装提供了对应用程序中基本块的执行和控制的监视和修改能力。&lt;/li&gt;
&lt;li&gt;指令组级别（Instruction group-level）：在指令组级别插装中，Pin可以在一组相关指令的执行之前或之后插入代码。这种粒度介于指令级别和基本块级别之间，允许在一组指令的执行过程中进行监视、修改或跟踪&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;模糊测试原理&#34;&gt;&lt;a href=&#34;#模糊测试原理&#34; class=&#34;headerlink&#34; title=&#34;模糊测试原理&#34;&gt;&lt;/a&gt;模糊测试原理&lt;/h2&gt;&lt;p&gt;​	AFL（American Fuzzy Lop）以程序中的代码覆盖率为导向进行模糊测试的工具。由三个基础模块组成，分别是测试用例生成模块、程序执行模块以及异常检测模块。测试用例生成模块包含两种用例生成方式，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于生成的Fuzz工具(Generation Based Fuzzer)：用户给定程序输入的格式，生成器自动填充里面的内容。&lt;/li&gt;
&lt;li&gt;基于变异的Fuzz工具(Mutation Based Fuzzer)：用户给定初始输入，用户对初始输入做比特翻转，随机插入等方式更改测试数据。&lt;strong&gt;基于代码覆盖率的方式会将能触发新路径的输入样例保存下来，用于后续的测试。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模糊测试工具的执行流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译源代码并插装，以记录代码覆盖率&lt;/li&gt;
&lt;li&gt;选择输入文件作为初始测试集加入到输入队列。&lt;/li&gt;
&lt;li&gt;对队列文件按照一定策略进行突变&lt;/li&gt;
&lt;li&gt;如果经过变异文件更新了覆盖范围，则将其保留添加到队列中&lt;/li&gt;
&lt;li&gt;记录上述过程中触发的crash&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决基于execv函数成本高的问题，AFL是使用fork的方式进行，首先在进行源代码编译的时候对程序进行插装，让程序停留在合适的位置，此时的所有准备工作已经完成，但是还没有能够接收输入的状态进行&lt;strong&gt;fork&lt;/strong&gt;。然后接收本次的输入进行运行。其中 &lt;strong&gt;persistent mode&lt;/strong&gt;，能够限制提高模糊测试效率，能够保存一些代码覆盖率和一些队列信息。Fuzzer会通过execv启动插装过的进程作为forkserver，forkserver不断fork自身，相当于fuzzer程序是实际被fork程序的祖祖父进程。最终使用execv来执行目标程序，如果目标程序崩溃了就会执行execv之后的代码，如果没有崩溃就会程序正常执行结束。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;forkserver是插装后的待测试程序。&lt;/li&gt;
&lt;li&gt;fuzzer和forserver之间是通过管道进行通信&lt;/li&gt;
&lt;li&gt;程序在插装后会在main函数中停下，等待fuzzer的命令，执行作为forkserver的能力&lt;/li&gt;
&lt;li&gt;fuzz_run_target()函数用于执行目标应用程序、监控超时、返回状态信息，被调用的程序将更新trace_bits[]。其直接调用afl_fsrv_run_target(fsrv, timeout, &amp;amp;afl-&amp;gt;stop_soon)函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Mutation策略有哪些&#34;&gt;&lt;a href=&#34;#Mutation策略有哪些&#34; class=&#34;headerlink&#34; title=&#34;Mutation策略有哪些&#34;&gt;&lt;/a&gt;Mutation策略有哪些&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;最基本的是Basic Mutation：对目标程序的输入进行简单的比特翻转，字节替换，插入删除&lt;/li&gt;
&lt;li&gt;Random Mutation： 随机字节替换与翻转&lt;/li&gt;
&lt;li&gt;字典变异（Dictionary Mutation）：根据用户提供的字典文件，给某些特定位置的字节进行比特上的替换。&lt;/li&gt;
&lt;li&gt;约束变异，在为输入的某些字节限定好约束后，在约束下进行变异。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定向模糊测试（DGF）&#34;&gt;&lt;a href=&#34;#定向模糊测试（DGF）&#34; class=&#34;headerlink&#34; title=&#34;定向模糊测试（DGF）&#34;&gt;&lt;/a&gt;定向模糊测试（&lt;strong&gt;DGF&lt;/strong&gt;）&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_40229814/article/details/132711607&#34;&gt;https://blog.csdn.net/qq_40229814/article/details/132711607&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;倾向于利用目标位置的工具： 这种工具的主要特征是，它们旨在找到特定的目标位置，目标位置可以是代码的某个位置，如函数、基本块（basic block）或一系列有序的调用点。此类工具的评估标准是基于可见的度量标准，例如在执行跟踪、控制流图或调用图上测量的度量。总之，这种工具具有明确定义的目标位置和可视化的度量标准。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;倾向于利用目标行为（bug）的工具： 这种工具也具有特定的适应度度量标准（fitness metric），但不同的是，它们没有固定的目标位置。相反，它们旨在测试和发现特定的行为或缺陷，而不关心目标位置。这些工具的目标不需要事先标记，或者在某些情况下无法进行预先标记。此外，它们的适应度度量标准可能不像第一类工具那么容易直观可见。通过优化适应度函数，这种类型的工具可以自动达到目标并揭示缺陷行为。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;怎样确定种子：&lt;/p&gt;
&lt;p&gt;AFLGo方法： AFLGo使用源代码在编译时进行仪器化，并通过计算程序单元测试（PUT）的调用和控制流图中边的数量来计算到目标基本块的距离。&lt;strong&gt;然后在运行时，它汇总每个已执行的基本块的距离值，以计算平均值来评估种子。它根据距离对种子进行优先排序，偏向于距离目标更近的种子。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TOFU方法： TOFU的距离度量标准定义为达到目标所需的正确分支决策数量。&lt;/p&gt;
&lt;p&gt;RDFuzz方法： RDFuzz将距离与基本块的执行频率结合起来，以对种子进行优先排序。&lt;/p&gt;
&lt;p&gt;UAFuzz方法： UAFuzz使用距离度量标准来表示导致目标函数的调用链，这些链更有可能包含分配和释放内存函数，以检测复杂的行为Use-After-Free漏洞。&lt;/p&gt;
&lt;p&gt;AFLChurn方法： AFLChurn不同于传统距离计算，它为基本块分配了数值权重，根据基本块的最近更改或更改频率来确定权重。&lt;/p&gt;
&lt;p&gt;WindRanger方法： WindRanger在计算距离时考虑了偏离基本块（即，执行跟踪开始偏离目标位置的基本块）&lt;/p&gt;
&lt;h3 id=&#34;关于目前Fuzz的问题&#34;&gt;&lt;a href=&#34;#关于目前Fuzz的问题&#34; class=&#34;headerlink&#34; title=&#34;关于目前Fuzz的问题&#34;&gt;&lt;/a&gt;关于目前Fuzz的问题&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u013648063/article/details/125627454&#34;&gt;https://blog.csdn.net/u013648063/article/details/125627454&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;没有系统地分析测试程序，几乎是不可能准确地限制输入空间。&lt;strong&gt;由于使用fuzzing的目的不同，执行状态的信息也不局限于代码覆盖率。这些信息可以是协议实现的状态机，面向对象程序的合法执行，并发实现的别名覆盖率，深度学习模型的神经元覆盖率，或者android智能电视的执行日志。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前大家的研究方向在于哪些种子被用于下一轮编译&lt;/p&gt;
&lt;p&gt;要花多少时间在某个种子上&lt;/p&gt;
&lt;p&gt;种子应该如何进行变异&lt;/p&gt;
&lt;h3 id=&#34;关于输入的建模&#34;&gt;&lt;a href=&#34;#关于输入的建模&#34; class=&#34;headerlink&#34; title=&#34;关于输入的建模&#34;&gt;&lt;/a&gt;关于输入的建模&lt;/h3&gt;&lt;p&gt;为了生成满足规则的输入，生成过程会严格按照指定的操作来。如果一个输入违反了目标程序的语法或者语义，输入会在早期被程序所丢掉。换句话说，输入空间受控于输入模型。常见的玩法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将fuzzing和特定目标程序之间做对应。比如在测试TLS协议的时候，有TLSAttacker，针对每个字段进行fuzz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;中间语言转化，将当前的输入转换为规整的IR，这个对fuzz不同的语言处理器是十分有作用的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h4 id=&#34;Fragment-Recombination：&#34;&gt;&lt;a href=&#34;#Fragment-Recombination：&#34; class=&#34;headerlink&#34; title=&#34;Fragment Recombination：&#34;&gt;&lt;/a&gt;Fragment Recombination：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;将输入进行拆分，并且重组成新的文件。Fuzzer会将输入文件解析为一棵树，这样可以保证语法的正确性。&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;AFL实战&#34;&gt;&lt;a href=&#34;#AFL实战&#34; class=&#34;headerlink&#34; title=&#34;AFL实战&#34;&gt;&lt;/a&gt;AFL实战&lt;/h2&gt;&lt;h3 id=&#34;afl-for-binary&#34;&gt;&lt;a href=&#34;#afl-for-binary&#34; class=&#34;headerlink&#34; title=&#34;afl for binary&#34;&gt;&lt;/a&gt;afl for binary&lt;/h3&gt;&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs sh&#34;&gt;dop@ubuntu:~$ AFL_QEMU_DEBUG_MAPS=1 afl-qemu-trace ./ciscn_2019_c_1&lt;br&gt;400000-402000 r-xp 00000000 08:05 1617251                                /home/dop/ciscn_2019_c_1&lt;br&gt;402000-601000 ---p 00000000 00:00 0&lt;br&gt;601000-602000 r--p 00001000 08:05 1617251                                /home/dop/ciscn_2019_c_1&lt;br&gt;602000-603000 rw-p 00002000 08:05 1617251                                /home/dop/ciscn_2019_c_1&lt;br&gt;4000000000-4000001000 ---p 00000000 00:00 0&lt;br&gt;4000001000-4000801000 rw-p 00000000 00:00 0                              [stack]&lt;br&gt;4000801000-4000802000 r--p 00000000 08:05 1968235                        /usr/lib/x86_64-linux-gnu/ld-2.31.so&lt;br&gt;4000802000-4000825000 r-xp 00001000 08:05 1968235                        /usr/lib/x86_64-linux-gnu/ld-2.31.so&lt;br&gt;4000825000-400082d000 r--p 00024000 08:05 1968235                        /usr/lib/x86_64-linux-gnu/ld-2.31.so&lt;br&gt;400082d000-400082e000 ---p 00000000 00:00 0&lt;br&gt;400082e000-400082f000 r--p 0002c000 08:05 1968235                        /usr/lib/x86_64-linux-gnu/ld-2.31.so&lt;br&gt;400082f000-4000830000 rw-p 0002d000 08:05 1968235                        /usr/lib/x86_64-linux-gnu/ld-2.31.so&lt;br&gt;4000830000-4000833000 rw-p 00000000 00:00 0&lt;br&gt;4000847000-4000869000 r--p 00000000 08:05 1968239                        /usr/lib/x86_64-linux-gnu/libc-2.31.so&lt;br&gt;4000869000-40009e1000 r-xp 00022000 08:05 1968239                        /usr/lib/x86_64-linux-gnu/libc-2.31.so&lt;br&gt;40009e1000-4000a2f000 r--p 0019a000 08:05 1968239                        /usr/lib/x86_64-linux-gnu/libc-2.31.so&lt;br&gt;4000a2f000-4000a33000 r--p 001e7000 08:05 1968239                        /usr/lib/x86_64-linux-gnu/libc-2.31.so&lt;br&gt;4000a33000-4000a35000 rw-p 001eb000 08:05 1968239                        /usr/lib/x86_64-linux-gnu/libc-2.31.so&lt;br&gt;4000a35000-4000a3b000 rw-p 00000000 00:00 0&lt;br&gt;ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]&lt;br&gt;EEEEEEE                            hh      iii&lt;br&gt;EE      mm mm mmmm    aa aa   cccc hh          nn nnn    eee&lt;br&gt;EEEEE   mmm  mm  mm  aa aaa cc     hhhhhh  iii nnn  nn ee   e&lt;br&gt;EE      mmm  mm  mm aa  aaa cc     hh   hh iii nn   nn eeeee&lt;br&gt;EEEEEEE mmm  mm  mm  aaa aa  ccccc hh   hh iii nn   nn  eeeee&lt;br&gt;====================================================================&lt;br&gt;Welcome to this Encryption machine&lt;br&gt;&lt;br&gt;====================================================================&lt;br&gt;1.Encrypt&lt;br&gt;2.Decrypt&lt;br&gt;3.Exit&lt;br&gt;Input your choice!&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202309172015669.png&#34; alt=&#34;image-20230901091314691&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs sh&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;export&lt;/span&gt; AFL_QEMU_PERSISTENT_ADDR=0x400B28&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;export&lt;/span&gt; AFL_QEMU_PERSISTENT_GPR=1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;无源码测试&#34;&gt;&lt;a href=&#34;#无源码测试&#34; class=&#34;headerlink&#34; title=&#34;无源码测试&#34;&gt;&lt;/a&gt;无源码测试&lt;/h3&gt;&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs sh&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 无源码测试基于qemu实现，首先配置qemu&lt;/span&gt;&lt;br&gt;$ &lt;span class=&#34;hljs-built_in&#34;&gt;cd&lt;/span&gt; qemu_mode&lt;br&gt;$ ./build_qemu_support.sh&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 设置原始输入和输出&lt;/span&gt;&lt;br&gt;$ &lt;span class=&#34;hljs-built_in&#34;&gt;mkdir&lt;/span&gt; fuzz_in&lt;br&gt;$ &lt;span class=&#34;hljs-built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&#34;hello&#34;&lt;/span&gt; &amp;gt; fuzz_in/testcase&lt;br&gt;$ gcc test.c -o &lt;span class=&#34;hljs-built_in&#34;&gt;test&lt;/span&gt;&lt;br&gt;$ afl-fuzz -i fuzz_in -o fuzz_out -Q ./test&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202309172015117.png&#34; alt=&#34;image-20230901102144519&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs sh&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 输出结果&lt;/span&gt;&lt;br&gt;└── default&lt;br&gt;    ├── cmdline&lt;br&gt;    ├── crashes&lt;br&gt;    │&amp;nbsp;&amp;nbsp; ├── &lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;:000000,sig:11,src:000000+000030,time:3961,execs:13145,op:splice,rep:4&lt;br&gt;    │&amp;nbsp;&amp;nbsp; ├── &lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;:000001,sig:04,src:000000+000030,time:3961,execs:13146,op:splice,rep:5&lt;br&gt;    │&amp;nbsp;&amp;nbsp; ├── &lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;:000002,sig:04,src:000000+000026,time:3985,execs:13213,op:splice,rep:8&lt;br&gt;    │&amp;nbsp;&amp;nbsp; ├── &lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;:000003,sig:11,src:000043+000009,time:4075,execs:13502,op:splice,rep:16&lt;br&gt;    │&amp;nbsp;&amp;nbsp; ├── &lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;:000004,sig:11,src:000035+000023,time:4240,execs:14064,op:splice,rep:16&lt;br&gt;    │&amp;nbsp;&amp;nbsp; ├── &lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;:000005,sig:11,src:000025+000037,time:4319,execs:14316,op:splice,rep:6&lt;br&gt;    │&amp;nbsp;&amp;nbsp; └── README.txt&lt;br&gt;    ├── fuzz_bitmap&lt;br&gt;    ├── fuzzer_setup&lt;br&gt;    ├── fuzzer_stats&lt;br&gt;    ├── hangs&lt;br&gt;    ├── plot_data&lt;br&gt;    └── queue&lt;br&gt;        ├── &lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;:000000,time:0,execs:0,orig:testcase&lt;br&gt;        ├── &lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;:000001,src:000000,time:4,execs:12,op:havoc,rep:2,+cov&lt;br&gt;        ├── &lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;:000002,src:000000,time:6,execs:20,op:havoc,rep:1&lt;br&gt;        ├── &lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;:000003,src:000000,time:9,execs:28,op:havoc,rep:1&lt;br&gt;        ├── &lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;:000004,src:000000,time:12,execs:37,op:havoc,rep:1&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# &lt;/span&gt;&lt;br&gt;crashes：存放去重后触发crash的数据&lt;br&gt;&lt;br&gt;fuzz_bitmap：记录代码覆盖率&lt;br&gt;&lt;br&gt;fuzzer_stats：fuzz状态&lt;br&gt;&lt;br&gt;hangs：存放去重后触发挂起的数据&lt;br&gt;&lt;br&gt;plot_data：绘图数据&lt;br&gt;&lt;br&gt;queue：有效的样本集合&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果需要对so文件进行测试，需要将相应的动态链接库目录加入到环境变量中&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs sh&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;export&lt;/span&gt; QEMU_LD_PREFIX=&lt;span class=&#34;hljs-variable&#34;&gt;$LD_LIBRARY_PATH&lt;/span&gt;:&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;export&lt;/span&gt; LD_LIBRARY_PATH=&lt;span class=&#34;hljs-variable&#34;&gt;$LD_LIBRARY_PATH&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 两个都试试吧&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;自定义fuzz策略&#34;&gt;&lt;a href=&#34;#自定义fuzz策略&#34; class=&#34;headerlink&#34; title=&#34;自定义fuzz策略&#34;&gt;&lt;/a&gt;自定义fuzz策略&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://www.anquanke.com/post/id/254363&#34;&gt;https://www.anquanke.com/post/id/254363&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/blob/dev/docs/custom_mutators.md%E3%80%81&#34;&gt;https://github.com/AFLplusplus/AFLplusplus/blob/dev/docs/custom_mutators.md、&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;官方自定义文档&#34;&gt;&lt;a href=&#34;#官方自定义文档&#34; class=&#34;headerlink&#34; title=&#34;官方自定义文档&#34;&gt;&lt;/a&gt;官方自定义文档&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/blob/dev/docs/custom_mutators.md#2-apis&#34;&gt;https://github.com/AFLplusplus/AFLplusplus/blob/dev/docs/custom_mutators.md#2-apis&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;安装libprotobuf&#34;&gt;&lt;a href=&#34;#安装libprotobuf&#34; class=&#34;headerlink&#34; title=&#34;安装libprotobuf&#34;&gt;&lt;/a&gt;安装libprotobuf&lt;/h4&gt;&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs sh&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 提示cmake 版本太低 https://www.cnblogs.com/jsdy/p/12689470.html#_label0&lt;/span&gt;&lt;br&gt;升级cmake &lt;br&gt;$ wget http://www.cmake.org/files/v3.25/cmake-3.25.2.tar.gz&lt;br&gt;./bootstrap&lt;br&gt;make&lt;br&gt;make install&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 出找不到openssl &lt;/span&gt;&lt;br&gt;Could NOT find OpenSSL, try to &lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt; the path to OpenSSL root folder &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; the system variable OPENSSL_ROOT_DIR (missing: OPENSSL_LIBRARIES OPENSSL_INCLUDE_DIR) &lt;br&gt;$ sudo apt-get install libssl-dev&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;安装libxml4&lt;/p&gt;
&lt;p&gt;autogen.sh &lt;/p&gt;
&lt;p&gt;报错：&lt;br&gt;configure.ac:1087: error: possibly undefined macro: m4_ifdef&lt;br&gt;      If this token and others are legitimate, please use m4_pattern_allow.&lt;br&gt;      See the Autoconf documentation.&lt;/p&gt;
&lt;p&gt;解决方案：sudo cp /usr/share/aclocal/*.m4 /usr/local/share/aclocal/&lt;br&gt;&lt;a href=&#34;https://www.cnblogs.com/y4247464/p/14388334.html&#34;&gt;https://www.cnblogs.com/y4247464/p/14388334.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202309081527504.png&#34;&gt;	&lt;/p&gt;
&lt;p&gt;本文介绍如何利用AFL Plus Plus实现自定义目标的模糊测试。&lt;/p&gt;
&lt;p&gt;Tutorials ： &lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/tutorials.md&#34;&gt;https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/tutorials.md&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;AFL源码阅读&#34;&gt;&lt;a href=&#34;#AFL源码阅读&#34; class=&#34;headerlink&#34; title=&#34;AFL源码阅读&#34;&gt;&lt;/a&gt;AFL源码阅读&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// afl-fuzz.h: line 431&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 该结构用于存储本次afl运行所需要的上下文内容&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;afl_state&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Position of this state in the global states list */&lt;/span&gt;&lt;br&gt;  u32 _id;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-type&#34;&gt;afl_forkserver_t&lt;/span&gt; fsrv;&lt;br&gt;  &lt;span class=&#34;hljs-type&#34;&gt;sharedmem_t&lt;/span&gt;      shm;&lt;br&gt;  &lt;span class=&#34;hljs-type&#34;&gt;sharedmem_t&lt;/span&gt;     *shm_fuzz;&lt;br&gt;  &lt;span class=&#34;hljs-type&#34;&gt;afl_env_vars_t&lt;/span&gt;   afl_env;	&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//...&lt;/span&gt;&lt;br&gt;} &lt;span class=&#34;hljs-type&#34;&gt;afl_state_t&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// afl-fuzz-init.c 该函数的目的是使用原始输入执行程序&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;perform_dry_run&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;afl_state_t&lt;/span&gt; *afl)&lt;/span&gt; {}&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// afl-forkserver.c &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 该函数用于进行子程序的执行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;fsrv_run_result_t&lt;/span&gt; __attribute__((hot))&lt;br&gt;afl_fsrv_run_target(&lt;span class=&#34;hljs-type&#34;&gt;afl_forkserver_t&lt;/span&gt; *fsrv, u32 timeout,&lt;br&gt;                    &lt;span class=&#34;hljs-keyword&#34;&gt;volatile&lt;/span&gt; u8 *stop_soon_p) {&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

 ]]></description>
        </item>
    </channel>
</rss>
